What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	High risk problems are address in the prototype program to make sure that the program is feasible A prototype may also be used to show a company that the software can be possibly programmed	3.5
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	A prototype program simulates the behaviors of portions of the desired software product to allow for error checking	4
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	It is used to let the users have a first idea of the completed program and allow the clients to evaluate the program This can generate much feedback including software specifications and project estimations of the total project	3
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	To find problem and errors in a program before it is finalized	2
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	To address major issues in the creation of the program There is no way to account for all possible bugs in the program but it is possible to prove the program is tangible	2.5
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	To provide an example or model of how the finished program should perfom Provides forsight of some of the challanges that would be encountered Provides opportunity To introduce changes To the finished program	3.5
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	To lay out the basics and give you a starting point in the actual problem solving	2
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	To simulate problem solving for parts of the problem	4.5
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	A prototype program provides a basic groundwork from which to further enhance and improve a solution to a problem	2
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	A prototype program is a part of the Specification phase of Software Problem Solvin It is employed to illustrate how the key problem or problems will be solved in a program and sometimes serves as a base program to expand upon	4.5
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	it provides a limited proof of concept to verify with the client before actually programming the whole application	2
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	It tests the main function of the program while leaving out the finer details	2
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	To get early feedback from users in early stages of development To show users a first idea of what the program will do or look like To make sure the program will meet requirements before intense programming begins	2.5
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	A prototype program is used in problem solving to collect data for the problem	1.5
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	To ease the understanding of problem under discussion and to ease the understanding of the program itself	2.5
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	The role of a prototype program is to help spot key problems that may arise during the actual programing	2
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	the prototype program gives a general idea of what the end product will do without the time and effort to write out the entire program	3
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	to show that a certain part of the program works as it is supposed to	3
What is the role of a prototype program in problem solving	To simulate the behaviour of portions of the desired software product	Prototype programming is an approach to programming that enables one to take an organized approach to developing an effective program with minimal errors and a strategic pattern when solving a problem i e book gave an example of a costumer withdrawing money from a bank the approach that was taking on a pseudo code level during the OOA or Design lvl before proceeding into creating a solution	2.5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	High risk problems are address in the prototype program to make sure that the program is feasible A prototype may also be used to show a company that the software can be possibly programmed	3.5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	A prototype program simulates the behaviors of portions of the desired software product to allow for error checking	4
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	Defined in the Specification phase a prototype stimulates the behavior of portions of the desired software product Meaning the role of a prototype is a temporary solution until the program itself is refined to be used extensively in problem solving	5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	It is used to let the users have a first idea of the completed program and allow the clients to evaluate the program This can generate much feedback including software specifications and project estimations of the total project	3
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	To find problem and errors in a program before it is finalized	2
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	To address major issues in the creation of the program There is no way to account for all possible bugs in the program but it is possible to prove the program is tangible	2.5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	you can break the whole program into prototype programs to simulate parts of the final program	5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	To provide an example or model of how the finished program should perfom Provides forsight of some of the challanges that would be encountered Provides opportunity To introduce changes To the finished program	3.5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	Simulating the behavior of only a portion of the desired software product	5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	A program that stimulates the behavior of portions of the desired software product	5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	A program that simulates the behavior of portions of the desired software product	5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	To lay out the basics and give you a starting point in the actual problem solving	2
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	To simulate problem solving for parts of the problem	4.5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	A prototype program provides a basic groundwork from which to further enhance and improve a solution to a problem	2
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	A prototype program is a part of the Specification phase of Software Problem Solvin It is employed to illustrate how the key problem or problems will be solved in a program and sometimes serves as a base program to expand upon	4.5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	Program that simulates the behavior of portions of the desired software product	5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	it provides a limited proof of concept to verify with the client before actually programming the whole application	2
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	It tests the main function of the program while leaving out the finer details	2
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	To get early feedback from users in early stages of development To show users a first idea of what the program will do or look like To make sure the program will meet requirements before intense programming begins	2.5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	it simulates the behavior of portions of the desired software product	5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	It simulates the behavior of portions of the desired software product	5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	A prototype program is used in problem solving to collect data for the problem	1.5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	To ease the understanding of problem under discussion and to ease the understanding of the program itself	2.5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	it simulates the behavior of portions of the desired software product	5
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	The role of a prototype program is to help spot key problems that may arise during the actual programing	2
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	the prototype program gives a general idea of what the end product will do without the time and effort to write out the entire program	3
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	to show that a certain part of the program works as it is supposed to	3
What is the role of a prototype program in problem solving	To simulate portions of the desired final product with a quick and easy program that does a small specific job It is a way to help see what the problem is and how you may solve it in the final project	Prototype programming is an approach to programming that enables one to take an organized approach to developing an effective program with minimal errors and a strategic pattern when solving a problem i e book gave an example of a costumer withdrawing money from a bank the approach that was taking on a pseudo code level during the OOA or Design lvl before proceeding into creating a solution	2.5
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	Refining and possibly the design if the testing phase reveals problems in the design Production can be affected if the program is unworkable in its current form which will lead to a later production time than originally estimated Also affects coding because after testing you may need to rewrite the code for the program to remove errors	3.5
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	The implementation phase and the maintenance phase are effected	4
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	Verification coding refining the solution and maintenance are all influenced by the testing stage	4.5
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	In RUP the stages in the software life cycle are influenced by the testing stage is : Elaboration phase - refined progject vision iterative devilopment of core system development of system requirements more accurate time and cost estimates Construction phase - iterative development of remaining system Transition phase - testing and deployment of the system	3
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	Refining the solution Production and Maintenance are all influenced by the Testing stage	3
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	Elaboration Construction and Transition are all affected by testing	2
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	Refining Production Maintenance	3.5
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	Refining the solution	4
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	Verification Debugging	2
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	The second half of the Elaboration phase Construction phase and the Transition phase	2.5
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	The refining step the production step and the maintenance stage	3.5
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	Elaboration Construction Transition	2
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	Refining	3
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	The testing stage has a direct influence on the final version of a program being as it is the debugging and finalization of a software revision	1.5
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	Testing refining production and maintenance	3.5
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	Depending on how the work is done Testing is spread throughout the process as to prevent errors from showing up later on due to lack of foresight	1.5
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	Elaboration construction and transition	2.5
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	All stages are influenced except setting the program requirements If a test fails it can change the whole design implementation etc of a program as well as the final outcome	1.5
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	Refining production and maintenance	3
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	refining production maintenance	3.5
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	Removing logical errors testing for valid data random data and actual data	1
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	1 - specification 2 - design 3 - risk analysis 4 - verification 5 - coding 6 - testing 7 - refining 8 - production 9 - maintenance	2.5
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	Refining stage Production stage and Maintenance stage	3.5
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	Testing could affect all parts of the life cycle; it could make you go back to specification if it does not test well	2
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	coding	3
What stages in the software life cycle are influenced by the testing stage	The testing stage can influence both the coding stage - LRB - phase 5 - RRB - and the solution refinement stage - LRB - phase 7 - RRB -	The Individual components and steps such as analysis design and implementing code as well as the entire system are tested for execution of the requirements identified during the analysis stage i e Main output	1.5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Refining and possibly the design if the testing phase reveals problems in the design Production can be affected if the program is unworkable in its current form which will lead to a later production time than originally estimated Also affects coding because after testing you may need to rewrite the code for the program to remove errors	3.5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	The implementation phase and the maintenance phase are effected	4
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Verification coding refining the solution and maintenance are all influenced by the testing stage	4.5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	In RUP the stages in the software life cycle are influenced by the testing stage is : Elaboration phase - refined progject vision iterative devilopment of core system development of system requirements more accurate time and cost estimates Construction phase - iterative development of remaining system Transition phase - testing and deployment of the system	3
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Refining the solution Production and Maintenance are all influenced by the Testing stage	3
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Elaboration Construction and Transition are all affected by testing	2
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Refining Production Maintenance	3.5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Refining the solution	4
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Verification Debugging	2
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Refining and Coding	5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	The second half of the Elaboration phase Construction phase and the Transition phase	2.5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	The refining step the production step and the maintenance stage	3.5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Elaboration Construction Transition	2
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Refining	3
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	The testing stage has a direct influence on the final version of a program being as it is the debugging and finalization of a software revision	1.5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Directly : Refining coding Because Refining is right before the Testing Phase and Coding is right after the Testing Phase Indirectly : Production Maintenance Because Refining occurs before these last two stages in the Software Life Cycle	5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Testing refining production and maintenance	3.5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Depending on how the work is done Testing is spread throughout the process as to prevent errors from showing up later on due to lack of foresight	1.5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Elaboration construction and transition	2.5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	All stages are influenced except setting the program requirements If a test fails it can change the whole design implementation etc of a program as well as the final outcome	1.5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Refining production and maintenance	3
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	coding and refining	5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	refining production maintenance	3.5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Removing logical errors testing for valid data random data and actual data	1
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	1 - specification 2 - design 3 - risk analysis 4 - verification 5 - coding 6 - testing 7 - refining 8 - production 9 - maintenance	2.5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Refining stage Production stage and Maintenance stage	3.5
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	Testing could affect all parts of the life cycle; it could make you go back to specification if it does not test well	2
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	coding	3
What stages in the software life cycle are influenced by the testing stage	Refining and Coding	The Individual components and steps such as analysis design and implementing code as well as the entire system are tested for execution of the requirements identified during the analysis stage i e Main output	1.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Modularability the ability to reuse parts of the program later in another program sometimes with completely different goals for the program Also it makes it easier to debug code by dividing up the code into classes that each do a specific job and when the program fails at one job you only have one class to debug Good for security purposes because it allows you to let someone use a program which sorts lists without having to give them access to the source code ALso allows you to use inheritance and polymorphism	4.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	The main advantages to object - oriented programming are that existing classes can be reused and program maintenance and verification are easier	3.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	The advantages is that OOP allows us to build classes of objects Three principles that make up OOP are : Encapsulation - Objects combine data and operations Inheritance - Classes can inherit properties from other classes Polymorphism - Objects can determine appropriate operations at execution time	2.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Some advantages are existing classes can be reused and program maintenance and verification are easier to accomplish	3.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Object oriented programming allows programmers to use an object with classes that can be changed and manipulated while not affecting the entire object at once The classes all hold attrubutes that affect the object	1
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Reusable components Extensibility Maintainability it reduces large problems into smaller more manageable problems	4
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Encapsulation - objects combine data and operations Inheritance - classes can inherit properties from other classes Polymorphism - Objects can determine appropriate operations at execution time	2.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Easier to debugg Reusability	3
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Re - usability and ease of maintenance	4
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Existing classes can be reused and program maintenance and verification are easier	3.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Using different modules allows for easier debugging	2
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Data encapsulation concept the use of functions or methods to manipulate data	3.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Modular reusable code allowing faster deployment of solutions and a more general view of a solution	4.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Variables can remain private The code is easily modified and reusable as well as easily implemented Not to mention easier to read and follow along as an observer	4.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Data Abstraction and control it is possible to isolate elements from other elements a lot easier and prevent tampering of data	3.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Encapsulation Objects use operations without knowing how the operation works Inheritance cuts redundancy by reusing earlier classes Polymorphism objects select the correct operation to use in the situation	4
What are the main advantages associated with object - oriented programming	Abstraction and reusability	They make it easier to reuse and adapt previously written code and they separate complex programs into smaller easier to understand classes	4.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Existing classes can be reused Program maintenance and verification are easier	3.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Existing classes can be feused Program maintenance and verification are easier	3.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Existing classes can be reused Program maintenance and verifications are easy	4
What are the main advantages associated with object - oriented programming	Abstraction and reusability	1 - Existing classes can be reused 2 - Program maintenance and verification are easier	3.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Information can be hidden It is easier to debug Programming is easier and more manageable	3.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Existing classes can be reused program maintenance and verification are easier	3.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	existing classes can be reused program maintenance and verification are easier	3.5
What are the main advantages associated with object - oriented programming	Abstraction and reusability	Well for one encapsulation the values of the variables inside an object are private unless methods are written to pass info outside of the object As well as Inheritance where each subclass inherits all variables and methods of its super class Example in the book included obj clock and how obj alarm would still use clock from the first class	3.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Modularability the ability to reuse parts of the program later in another program sometimes with completely different goals for the program Also it makes it easier to debug code by dividing up the code into classes that each do a specific job and when the program fails at one job you only have one class to debug Good for security purposes because it allows you to let someone use a program which sorts lists without having to give them access to the source code ALso allows you to use inheritance and polymorphism	4.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	The main advantages to object - oriented programming are that existing classes can be reused and program maintenance and verification are easier	3.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	The advantages is that OOP allows us to build classes of objects Three principles that make up OOP are : Encapsulation - Objects combine data and operations Inheritance - Classes can inherit properties from other classes Polymorphism - Objects can determine appropriate operations at execution time	2.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Some advantages are existing classes can be reused and program maintenance and verification are easier to accomplish	3.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Object oriented programming allows programmers to use an object with classes that can be changed and manipulated while not affecting the entire object at once The classes all hold attrubutes that affect the object	1
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Reusable components Extensibility Maintainability it reduces large problems into smaller more manageable problems	4
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Encapsulation - objects combine data and operations Inheritance - classes can inherit properties from other classes Polymorphism - Objects can determine appropriate operations at execution time	2.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Easier to debugg Reusability	3
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Re - usability and ease of maintenance	4
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	One of the main advantages is you can hide inner details a technique known by encapsulation Objects combine the data and operations but you cannot see how it works Another advantage is you can reuse classes that have been defined earlier in the program a method known as inheritance Finally another advantage is objects can determine appropriate operations at execution time a technique known as polymorphism	5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Existing classes can be reused and program maintenance and verification are easier	3.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Using different modules allows for easier debugging	2
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Data encapsulation concept the use of functions or methods to manipulate data	3.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Modular reusable code allowing faster deployment of solutions and a more general view of a solution	4.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Coding and Debugging programs are usually easier as either the compiler will specify the object that is working incorrectly or the function an object was assigned to will be easier to identify The code itself also looks more organized and is easier to read and will help to avoid redundant coding Post - programming maintenance is also easier Also modules can be reused several times in other programs without too much hassle Abstraction is the art of breaking down one big problem into smaller simpler problems and solving them Many of the smaller problems are shared between unique complex problems and creating modules to these solve these smaller repeated problems can save time when you encounter them again	5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Variables can remain private The code is easily modified and reusable as well as easily implemented Not to mention easier to read and follow along as an observer	4.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Data Abstraction and control it is possible to isolate elements from other elements a lot easier and prevent tampering of data	3.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Encapsulation Objects use operations without knowing how the operation works Inheritance cuts redundancy by reusing earlier classes Polymorphism objects select the correct operation to use in the situation	4
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	They make it easier to reuse and adapt previously written code and they separate complex programs into smaller easier to understand classes	4.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Existing classes can be reused Program maintenance and verification are easier	3.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Existing classes can be feused Program maintenance and verification are easier	3.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	the main advantages to object - oriented programming is data abstraction easier maintenance and re - usability	5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Existing classes can be reused Program maintenance and verifications are easy	4
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	1 - Existing classes can be reused 2 - Program maintenance and verification are easier	3.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Information can be hidden It is easier to debug Programming is easier and more manageable	3.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Existing classes can be reused program maintenance and verification are easier	3.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	existing classes can be reused program maintenance and verification are easier	3.5
What are the main advantages associated with object - oriented programming	This type of programming is more flexible making it easier to add and modify the program It is also a type of a fail safe program you check each individual module This eliminates redundant code and makes the program easier to read for other programmers When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program	Well for one encapsulation the values of the variables inside an object are private unless methods are written to pass info outside of the object As well as Inheritance where each subclass inherits all variables and methods of its super class Example in the book included obj clock and how obj alarm would still use clock from the first class	3.5
Where do C plus plus programs begin to execute	At the main function	in the testing phase	0
Where do C plus plus programs begin to execute	At the main function	At the root	2.5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	At function int main - LRB - - RRB -	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	the Function main - LRB - - RRB -	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	c plus plus programs begin to execute in the main method	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	A C plus plus program will begin to execute at the main - LRB - - RRB - function	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	They begin in the main - LRB - - RRB - function	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	Int main - LRB - - RRB -	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	main method	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	in the testing phase	0
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	At the MAIN function	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	main	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	They begin to execute at the funcion main - LRB - - RRB -	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	The main method	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	At the root	2.5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	In the main - LRB - - RRB - function	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	C plus plus programs begin execution at main	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	In the Main function	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	At the main - LRB - - RRB - function	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	The main function	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	The function main	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	After loading the required include statements and libraries the main method begins the execution	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	main function	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	main	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	C plus plus programs begin execution at the main function	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	At main	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	they beging to excute at main	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	at the main function int main - LRB - - RRB -	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	C plus plus programs begin execution at the main function	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	in the main function	5
Where do C plus plus programs begin to execute	At function int main - LRB - - RRB -	Within the main function	5
What is a variable	A location in memory that can store a value	Variable can be a integer or a string in a program	2
What is a variable	A location in memory that can store a value	In programming a structure that holds data and is uniquely named by the programmer It holds the data assigned to it until a new value is assigned or the program is finished	4.5
What is a variable	A location in memory that can store a value	A named object that can hold a numerical or letter value	3.5
What is a variable	A location in memory that can store a value	It is a sybol or name for a value or number Example : a used number can stand for any given number and the programmer can refer to that number by using the variable name	4
What is a variable	A location in memory that can store a value	An identifier that holds a location in memory	4
What is a variable	A location in memory that can store a value	a value or word that can assume any of a set of values	3
What is a variable	A location in memory that can store a value	A pointer to a location in memory	4
What is a variable	A location in memory that can store a value	a symbol that stands in for a value that may or may not change depending on the program	4
What is a variable	A location in memory that can store a value	a placeholder to hold information used in the program for example : int can hold : 1 2 3 4 68 72 256 etc float can hold : 1 54 55 55 1 24 5 657 8 8123 et char can hold : A B C D E F ! 4 5 6 P etc	4.5
What is a variable	A location in memory that can store a value	a stored value used by the program	4.5
What is a variable	A location in memory that can store a value	A way to store different values into the program such as numbers words letters etc	4.5
What is a variable	A location in memory that can store a value	An object with a location in memory where value can be stored	3.5
What is a variable	A location in memory that can store a value	a variable is an object where data is stored	3.5
What is a variable	A variable is a location in memory where a value can be stored	Variable can be a integer or a string in a program	2
What is a variable	A variable is a location in memory where a value can be stored	In programming a structure that holds data and is uniquely named by the programmer It holds the data assigned to it until a new value is assigned or the program is finished	4.5
What is a variable	A variable is a location in memory where a value can be stored	A variable is a location in memory where a value can be stored	5
What is a variable	A variable is a location in memory where a value can be stored	Variable is a location in the computer memory in which a value can be stored and later can retrieve that value	5
What is a variable	A variable is a location in memory where a value can be stored	A variable is a location in the computer memory where a value can be stored for use by a program Each variable has a name a value a type and a size	5
What is a variable	A variable is a location in memory where a value can be stored	A named object that can hold a numerical or letter value	3.5
What is a variable	A variable is a location in memory where a value can be stored	It is a sybol or name for a value or number Example : a used number can stand for any given number and the programmer can refer to that number by using the variable name	4
What is a variable	A variable is a location in memory where a value can be stored	A variable is a location in the computers memory where a value can be stored for use by a program	5
What is a variable	A variable is a location in memory where a value can be stored	An identifier that holds a location in memory	4
What is a variable	A variable is a location in memory where a value can be stored	a block of memory that holds a specific type of data	5
What is a variable	A variable is a location in memory where a value can be stored	It is a location in the computer memory where it can be stored for use by a program	5
What is a variable	A variable is a location in memory where a value can be stored	A location in memory where value can be stored	5
What is a variable	A variable is a location in memory where a value can be stored	a value or word that can assume any of a set of values	3
What is a variable	A variable is a location in memory where a value can be stored	A pointer to a location in memory	4
What is a variable	A variable is a location in memory where a value can be stored	A variable is the memory address for a specific type of stored data or from a mathematical perspective a symbol representing a fixed definition with changing values	5
What is a variable	A variable is a location in memory where a value can be stored	A variable is a value that is subject to change in a computer memory that can be used by programs Programs can change the value of the variable and recall it later or act on it directly	5
What is a variable	A variable is a location in memory where a value can be stored	a symbol that stands in for a value that may or may not change depending on the program	4
What is a variable	A variable is a location in memory where a value can be stored	a placeholder to hold information used in the program for example : int can hold : 1 2 3 4 68 72 256 etc float can hold : 1 54 55 55 1 24 5 657 8 8123 et char can hold : A B C D E F ! 4 5 6 P etc	4.5
What is a variable	A variable is a location in memory where a value can be stored	a stored value used by the program	4.5
What is a variable	A variable is a location in memory where a value can be stored	A way to store different values into the program such as numbers words letters etc	4.5
What is a variable	A variable is a location in memory where a value can be stored	An object with a location in memory where value can be stored	3.5
What is a variable	A variable is a location in memory where a value can be stored	location in memory where a value can be stored	5
What is a variable	A variable is a location in memory where a value can be stored	a variable is an object where data is stored	3.5
What is a variable	A variable is a location in memory where a value can be stored	Location in memory where a value can be stored	5
What is a variable	A variable is a location in memory where a value can be stored	it is a location in memory where value can be stored	5
What is a variable	A variable is a location in memory where a value can be stored	A variable is the location in a computer memory where a value can be stored for use by a program	5
What is a variable	A variable is a location in memory where a value can be stored	A variable is a location in a computers memory where a value can be stored for use by a program	5
What is a variable	A variable is a location in memory where a value can be stored	a location in memory where data can be stored and retrieved	5
What is a variable	A variable is a location in memory where a value can be stored	Is a method or identifier I would say we use to bind a data object to memory location; which is then stored in a location that can be accessed when and manipulated later when the variable name is called	5
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	They can be declared right before they are used but it is a good practice to declare them at the beginning of the program and label what they are food	2
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	In the Function main - LRB - - RRB - before using the variable	3
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	Variables are declared where ever it is defined either inside a block locally or outside a block globally	4.5
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	Variables are declared before they are actually used They can be declared before main - LRB - - RRB - to use globally	4
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	For good programing practice they should be declared before main - LRB - - RRB - but should at least be declared before they are used	2.5
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	Any where in the main function	2
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	Globally for an entire program and locally for individual functions - LRB - including FOR statements - RRB -	4.5
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	They are usually declared at the beginning before they can be used in the program They always contain a name and a data type	3
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	Inside the method	2.5
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	at the top	1.5
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	Variables are usually declared at the beginning of a module of C plus plus code	2.5
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	In the main function usually at the top of code They can be declared almost anywhere but must be declared before the code can use or act upon them	3.5
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	in the very beginning of the program Before the main - LRB - - RRB - starts	2
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	In the declaration of Functions for statements and while statements in the body of If For while do while statements in namespaces headers etc - LRB - almost anywhere - RRB - anywhere in the program as long as it is on it is own line	2.5
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	After declaration of the variable data type	1
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	anywhere in the code can be at the top or in the middle of the code or anywhere	3
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	Before they are used	2
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	Anywhere in the same scope before they are used	3.5
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	variables can be declared in classes and methods	2.5
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	global variables are declared in the main function local variables are declared in any other function	4
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	Variables are usually declared at the very beginning of a C plus plus program but can be declared any in the program as long as they appear before they are called upon	4
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	Variables are declared in the main function before any operation is attempted with the variables	2
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	anywhere but where you declare them depends on where you want them to be accessible - LRB - their scope - RRB -	4.5
Where are variables declared in a C plus plus program	Variables can be declared anywhere in a program They can be declared inside a function - LRB - local variables - RRB - or outside the functions - LRB - global variables - RRB -	It depends if it s a global then they have to be declared out side the source code to be used in every scope however a local variable is one declared in a local function etc which obviously doesn t need to be declared outside the variable seeing how it is used for the function or block its being called for	4.5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	They can be declared right before they are used but it is a good practice to declare them at the beginning of the program and label what they are food	2
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	In the Function main - LRB - - RRB - before using the variable	3
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	Variables are declared where ever it is defined either inside a block locally or outside a block globally	4.5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	Variables are declared before they are actually used They can be declared before main - LRB - - RRB - to use globally	4
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	For good programing practice they should be declared before main - LRB - - RRB - but should at least be declared before they are used	2.5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	They can be declared globally just before the main method - LRB - but also outside of it - RRB - or variables can be subject to only the method they are scoped within but would still be declared at the beginning of that method - LRB - but inside of it - RRB -	5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	local variables are declared inside the method while global variables are declared in the body	5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	Any where in the main function	2
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	Globally for an entire program and locally for individual functions - LRB - including FOR statements - RRB -	4.5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	They are usually declared at the beginning before they can be used in the program They always contain a name and a data type	3
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	Inside the method	2.5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	at the top	1.5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	Global variables are declared in the body of the code Local variables are declared in the function they are to be used - LRB - unless the function is being passed a variable - RRB - Variables should always be declared before use	5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	Variables are usually declared at the beginning of a module of C plus plus code	2.5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	In the main function usually at the top of code They can be declared almost anywhere but must be declared before the code can use or act upon them	3.5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	in the very beginning of the program Before the main - LRB - - RRB - starts	2
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	In the declaration of Functions for statements and while statements in the body of If For while do while statements in namespaces headers etc - LRB - almost anywhere - RRB - anywhere in the program as long as it is on it is own line	2.5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	After declaration of the variable data type	1
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	anywhere in the code can be at the top or in the middle of the code or anywhere	3
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	Before they are used	2
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	Anywhere in the same scope before they are used	3.5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	variables can be declared in classes and methods	2.5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	inside the function scope and outside of the function scope in case of global variables	5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	global variables are declared in the main function local variables are declared in any other function	4
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	Variables are usually declared at the very beginning of a C plus plus program but can be declared any in the program as long as they appear before they are called upon	4
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	Variables are declared in the main function before any operation is attempted with the variables	2
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	anywhere but where you declare them depends on where you want them to be accessible - LRB - their scope - RRB -	4.5
Where are variables declared in a C plus plus program	Local variables are declared inside the method or function they will be used in at the beginning of the method Global variables are declared outside of any function or method generally before functions are defined	It depends if it s a global then they have to be declared out side the source code to be used in every scope however a local variable is one declared in a local function etc which obviously doesn t need to be declared outside the variable seeing how it is used for the function or block its being called for	4.5
What is the main difference between a while and a do while statement	The block inside a do while statement will execute at least once	The do statement first evaluates the condition and then executes the lines of code in the statement 0 or more times The do while statement executes the lines of code and then it evaluates the condition	4.5
What is the main difference between a while and a do while statement	The block inside a do while statement will execute at least once	The loop of a do while statement always executes once	4.5
What is the main difference between a while and a do while statement	The block inside a do while statement will execute at least once	Do while runs the embedded code at least once the do command does not necessarily	4
What is the main difference between a while and a do while statement	The block inside a do while statement will execute at least once	A while loop terminates at the beginning of the loop a do or while terminates at the end of the loop	3.5
What is the main difference between a while and a do while statement	The block inside a do while statement will execute at least once	the loop body always executes at least once	3.5
What is the main difference between a while and a do while statement	The block inside a do while statement will execute at least once	NO ANSWER	0
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	The do statement first evaluates the condition and then executes the lines of code in the statement 0 or more times The do while statement executes the lines of code and then it evaluates the condition	4.5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	The main difference between a while and a do while loop is that the do while loop always cycles through the loop at least once but the while loop does not always do so	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	While loop used to execute a block of code as long as some condition is true A do while loop used to execute a block of code as long as some condition is satisfied The difference between while and do while is while loop tests its condition before the execution of its contents and the do while loop tests its condition after the execution of its contents at least once	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	The termination condition of a do while statement is usually at the end of the loop so it will run at least once As for the while statement if the condition is false to begin with then the loop will never run	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	A while loop will check the statement to make sure it is true before executing A do while loop will execute before checking the statement to see if it should run again	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	A while statement will test the condition of the while loop FIRST there is a chance the loop will never run A do while loop will ALWAYS run once and then the while test will determine if it will run again	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	a do while loop always executes once A while loop conditional statement has to be true for it to run	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	WHILE statement - The condition is checked for validity then is repeated until the conditon is false Do WHILE statement - - The code is performed at least once then checked for valid condition Will continue to	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	while statements will evaluate the statement BEFORE executing a cycle of the loop including the first cycle meaning that a while loop will not always execute A do while will run evaluate the statement AFTER running through a cycle of the loop ensuring that the loop always executes at least one time	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	The main difference between a do and a do while statement is in a do while statement is the statements in a do block are always executed atleast once The while statement will only execute if its condition is true	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	The loop of a do while statement always executes once	4.5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	a while statement will only process if the statement is met while a do while will always process once then only continue if the statement is met	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	Do while runs the embedded code at least once the do command does not necessarily	4
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	While tests for true first before running do while runs once first before checking	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	A do while statement body always executes at least once Where as a while statement will not execute at all unless the condition for the while is true	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	The statements within the block of the do while loop will always be executed at least once regardless of the conditions Whereas the while loops may never be executed if the conditions are not met	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	a do while loop will always run through once while an while loop performs a test before running through the loop	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	A while statement tests the condition before it can start A do while statement loops through once before the condition is tested	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	A while loop terminates at the beginning of the loop a do or while terminates at the end of the loop	3.5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	the loop body always executes at least once	3.5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	While loop evaluates its expression at the top of its loop and decides if it needs to execute and the do - while always executes at least once and then evaluates its expression at the bottom of its loop	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	A do while statement will always execute the do piece of code at least once before checking the condition A while statement will always check the condition first	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	A do - while passes atleast 1 time before checking the condition however a while would fail to enter the loop if the condition fails in its first place	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	a while loop checks if the condition is true or not first if it was true it excutes the statement a do while loop executes the statement before it checks the condition if the condition was true it would excute the statement again so a do while loop would excute the statement atleast once	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	NO ANSWER	0
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	A do while loop will always execute atleast once a while loop may never execute depending on teh conditions	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	a while loop is pre - check - LRB - it checks the condition statement before it executes the code within the while block - RRB - a do while loop is post - check - LRB - it checks the condition AFTER the block executes it runs at least once no matter what the condition statement is - RRB -	5
What is the main difference between a while and a do while statement	do while statements evaluate whether or not to loop after running the block contained within it at least once So the main differance is that while statements have a possibility of never being used Do while statements on the other hand are always run at least once before evaluating whether to run again	- RRB - - RRB - What is the main difference between a while and a do while statement The do while construct consists of a block of code and a condition First the code within the block is executed and then the condition is evaluated this is done until it is proven false The difference between the While loop is it tests the condition before the code within the block is executed	5
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	A hierarchy of nodes that are sorted in a particular order Each node has a ancestor - LRB - except for the root - RRB - and children - LRB - except for the leaves - RRB -	4
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	A tree is a finite set of one or more nodes such that : there is a specially designated node called the root	4.5
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	A connected undirected graph without cycles	4.5
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	a tree is a series of nodes where each node has links to other nodes	3
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	an infinite set of nodes that have a root and descendants and each addition is a leaf	3.5
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	A set of one or more nodes that are hierarchically organized with one special root node	4
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	A tree is a finite set of one or more nodes such that there is a specially designated node called the root	3.5
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	A tree is a data structure where nodes are linked to each other in a hierarchical manner	3.5
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	a grouping of data in a parent to child structure	3
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	It is a list of numbers in a list made by comparing values of nodes already in the tree and adding to the appropriate spot Its a list made up of nodes with left and right pointers	3
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	A tree is a branched data structure with nodes and leaves a special node called root has no parent node but however like all other nodes can and does have 2 nodes that it links to namely one on the right and one on the left	4.5
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	A finite set of nodes that starts with the root and terminates with leaves	4
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	a set of data arranged with pointers each element can have many pointers but no two pointers point to the same element	2.5
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	A Tree is a data structure with one or more data nodes each of which contains some data Each node itself can have a number of attached child nodes creating the branched structure Trees are named for	4.5
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	a finite collection of nodes where it starts with an element called the root which has children and its children have children until you get to the leaves which are the last elements and have to children	4.5
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	A nonlinear two - dimensional data structure	2
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	a finite set of one or more nodes such that there is a root node and all other nodes are split into trees of lesser value than the root	4
What is a tree	A collection of nodes which has a special node called root and the rest of the nodes are partitioned into one or more disjoint sets each set being a tree	A type of data structure in which each element is attached to one or more elements directly beneath it	4
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	A hierarchy of nodes that are sorted in a particular order Each node has a ancestor - LRB - except for the root - RRB - and children - LRB - except for the leaves - RRB -	4
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	5
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	A tree is a finite set of one or more nodes such that : there is a specially designated node called the root	4.5
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	A connected undirected graph without cycles	4.5
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	A data structure that contains a root internal nodes and external nodes Each node references another node by means of pointers - LRB - pass - by - reference - RRB - The root is the base of the tree it has no parents A leaf is a node at the end of the tree which points to NULL	5
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	a tree is a series of nodes where each node has links to other nodes	3
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	an infinite set of nodes that have a root and descendants and each addition is a leaf	3.5
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	A set of one or more nodes that are hierarchically organized with one special root node	4
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	A tree is a finite set of one or more nodes such that there is a specially designated node called the root	3.5
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	one or more nodes in a hierarchy starting with the root and branching off like a tree to subtrees	5
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	A tree is a data structure where nodes are linked to each other in a hierarchical manner	3.5
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	a grouping of data in a parent to child structure	3
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	It is a list of numbers in a list made by comparing values of nodes already in the tree and adding to the appropriate spot Its a list made up of nodes with left and right pointers	3
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	A tree is a branched data structure with nodes and leaves a special node called root has no parent node but however like all other nodes can and does have 2 nodes that it links to namely one on the right and one on the left	4.5
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	It organizes data in a nonlinear hierarchical form where items can have more than one successor Partitioned into a root node and subsets are general subtrees of the root	5
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	A tree is a finite set of one or more nodes such that there is a specially designated node called the root The remaining nodes are partitioned into n is greater than or equal to 0 disjoint sets T the n plus 1 where each element set is a tree	5
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	A finite set of nodes that starts with the root and terminates with leaves	4
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	a set of data arranged with pointers each element can have many pointers but no two pointers point to the same element	2.5
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	A Tree is a data structure with one or more data nodes each of which contains some data Each node itself can have a number of attached child nodes creating the branched structure Trees are named for	4.5
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	a finite collection of nodes where it starts with an element called the root which has children and its children have children until you get to the leaves which are the last elements and have to children	4.5
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	A nonlinear two - dimensional data structure	2
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	a finite set of one or more nodes such that there is a root node and all other nodes are split into trees of lesser value than the root	4
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	A finite number of nodes such that there is one root node each node has a certain number of children nodes and each child is also a tree	5
What is a tree	A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree	A type of data structure in which each element is attached to one or more elements directly beneath it	4
What is the height of a tree	The length of the longest path from the root to any of its leaves	Each level of a generation in the tree some people do not count the root as a generation	4
What is the height of a tree	The length of the longest path from the root to any of its leaves	The height of a tree is in terms of the levels of its nodes such that if the tree is empty its height is 0 otherwise its height is equal to the maximum level of its nodes	4.5
What is the height of a tree	The length of the longest path from the root to any of its leaves	The height is the number of generations - LRB - levels - RRB - from the root	4.5
What is the height of a tree	The length of the longest path from the root to any of its leaves	is the depth of its furthest leaf	4.5
What is the height of a tree	The length of the longest path from the root to any of its leaves	the number of nodes from root to leaf	3.5
What is the height of a tree	The length of the longest path from the root to any of its leaves	the number of generations or levels of a tree	4.5
What is the height of a tree	The length of the longest path from the root to any of its leaves	The intensity of the children Say you begin with one node Thats one height Then you add two children to that node and then two children to each of those nodes and two children to each of THOSE nodes Youre current height would be 4	3
What is the height of a tree	The length of the longest path from the root to any of its leaves	the number of levels of a tree like a tree can have at minimum a depth of 3 and at most a height of 8 for 8 nodes	3.5
What is the height of a tree	The length of the longest path from the root to any of its leaves	is equal to the number of levels levels between the root node and the terminal nodes	4.5
What is the height of a tree	The length of the longest path from the root to any of its leaves	the number of generations or levels the tree has	4.5
What is the height of a tree	The length of the longest path from the root to any of its leaves	The height of a tree is the depth of its subtrees that is how many layers deep it is	4.5
What is the height of a tree	The length of the longest path from the root to any of its leaves	is the number of generations in the tree	4.5
What is the height of a tree	The length of the longest path from the root to any of its leaves	the number of distinct levels of separation	4
What is the height of a tree	The length of the longest path from the root to any of its leaves	the height of a tree is how many levels of nodes that it has	4.5
What is the height of a tree	The length of the longest path from the root to any of its leaves	The connections between elements are called branches Trees are often called inverted trees because they are normally drawn with the root at the top	1.5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	Each level of a generation in the tree some people do not count the root as a generation	4
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	The height of a tree is in terms of the levels of its nodes such that if the tree is empty its height is 0 otherwise its height is equal to the maximum level of its nodes	4.5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	The height of a tree is the number of nodes on the longest path from the root to a leaf	5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	The number of nodes on the longest path from the root of the tree to a leaf	5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	Height equals the number of times you must progress down the levels of a tree to reach a leaf of the greatest distance from the root	5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	the height of a tree is the length from the root to the furthest leaf	5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	The height is the number of generations - LRB - levels - RRB - from the root	4.5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	The height of a tree is the number of levels between the root and the leaf farthest away from it	5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	is the depth of its furthest leaf	4.5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	the number of nodes from root to leaf	3.5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	the distance from the deepest leaf to the root	5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	the number of generations or levels of a tree	4.5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	The intensity of the children Say you begin with one node Thats one height Then you add two children to that node and then two children to each of those nodes and two children to each of THOSE nodes Youre current height would be 4	3
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	the number of levels of a tree like a tree can have at minimum a depth of 3 and at most a height of 8 for 8 nodes	3.5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	The number of nodes on the longest path from the root to the leaf	5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	The height of a tree is the number of nodes on the longes path from the root to a leaf	5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	is equal to the number of levels levels between the root node and the terminal nodes	4.5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	the number of generations or levels the tree has	4.5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	The height of a tree is the depth of its subtrees that is how many layers deep it is	4.5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	is the number of generations in the tree	4.5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	The number of nodes on the longest path from the root to a leaf	5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	the number of distinct levels of separation	4
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	the height of a tree is how many levels of nodes that it has	4.5
What is the height of a tree	The height of a tree is the number of nodes on the longest path from the root to a leaf	The connections between elements are called branches Trees are often called inverted trees because they are normally drawn with the root at the top	1.5
What is a leaf	A node that has no children	A new item to the tree - - a child	3
What is a leaf	A node that has no children	A leaf is a node with children it is a terminating node	2
What is a leaf	A node that has no children	The node with degree 0	4
What is a leaf	A node that has no children	the node with degree 0	4
What is a leaf	A node that has no children	the last child on any branch	4.5
What is a leaf	A node that has no children	a node with degree 0 last node in the tree and furtherest away from the root	4
What is a leaf	A node that has no children	an endpoint on a tree that contains no pointers or pointers that are set to null	4.5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	A leaf is a child of a parent node that has no children nodes of its own	5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	A leaf is a node with no children	5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	A node with no children	5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	A tree node with no children	5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	And end point of the tree a node that does not have any children	5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	a node with no children	5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	A new item to the tree - - a child	3
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	A leaf is a node with children it is a terminating node	2
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	The node with degree 0	4
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	the node with degree 0	4
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	a leaf is a node with no children	5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	the last child on any branch	4.5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	The last value in the tree A value with no children attatched	5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	a node with no children	5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	A node with no children	5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	A leaf is a node with no children	5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	a node with degree 0 last node in the tree and furtherest away from the root	4
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	an endpoint on a tree that contains no pointers or pointers that are set to null	4.5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	A leaf is a node with no children	5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	an element in a tree that has no children	5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	A node with no children	5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	a leaf is a node that has no children nodes	5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	a leaf is a node with no children	5
What is a leaf	A leaf is a child of a parent node that has no children nodes of its own	The elements at the very bottom of an inverted tree - LRB - that is those that have no elements below them - RRB - are called leaves	5
What is a binary tree	A tree for which the maximum number of children per node is two	A tree data structure in which each done has at most two children typical called left and right nodes The right node is usually greater than the left node and the parent node	4.5
What is a binary tree	A tree for which the maximum number of children per node is two	a tree with only 2 joints left and right	4.5
What is a binary tree	A tree for which the maximum number of children per node is two	A binary search tree is a tree that also has the condition that each node may have at maximum 2 children	4.5
What is a binary tree	A tree for which the maximum number of children per node is two	a list of numbers that are ordered compared to how they compare to the other numbers already added in the tree	2
What is a binary tree	A tree for which the maximum number of children per node is two	a tree where every parent has only two children	4.5
What is a binary tree	A tree for which the maximum number of children per node is two	a binary tree is a special search tree where each node has either 2 1 or 0 children	4.5
What is a binary tree	A tree for which the maximum number of children per node is two	A binary tree is a special type of inverted tree in which each element has only two branches below it	4.5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	A tree data structure in which each done has at most two children typical called left and right nodes The right node is usually greater than the left node and the parent node	4.5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	A set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node has at most two children the left child and the right child	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	A set of zero or more nodes partitioned into a root node and two possibly empty sets that are binary trees Thus each node in a binary tree has at most two children the left child and the right child	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	A tree in which each parent has a maximum of 2 children	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	a tree where each node has at most 2 children	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	a tree with up to two children or a right subtree and a left subtree	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	A binary tree is a tree in which all nodes have a maximum of two degrees or can only have two children each	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	a binary tree is a tree data structure in which each node has at most two children	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	a tree with only 2 joints left and right	4.5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	A binary search tree is a tree that also has the condition that each node may have at maximum 2 children	4.5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	a tree where each parent can have at max two children	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	a list of numbers that are ordered compared to how they compare to the other numbers already added in the tree	2
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	a tree where each node can have at most 2 children	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	Starting at the root node it branches off into one or two subsets that are binary subtrees of the root Each node has at most two children the left child and the right child	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node has at most two children the left child and the right child	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	a tree that has a maximum of 2 children per node	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	a tree with elements that can contain at most two pointers	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	A binary tree can have only two children for each node	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	a tree where every parent has only two children	4.5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	A tree where every node has no more than two children	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	a binary tree is a special search tree where each node has either 2 1 or 0 children	4.5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	a binary tree is a special type of tree where each node can only have at maximum 2 children	5
What is a binary tree	A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root Each node can have no more than two children a right and a left child	A binary tree is a special type of inverted tree in which each element has only two branches below it	4.5
What is a binary search tree	A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child	a tree where each node has at most two nodes and the node on the left is less than the root and the node on the right is greater than the root	4.5
What is a binary search tree	A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child	a special binary tree that has a rule that all the subtrees on the right are smaller than the node value and all the subtrees on the left are larger than the node value	4
What is a binary search tree	A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child	Binary search trees are similar to binary trees but have been implemented to organize data in a specific way for later searching	3.5
What is a binary search tree	A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child	A binary tree with the data organized in a specific arangment	2.5
What is a binary search tree	A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child	A binary search tree is a tree that also has the condition that each node may have at maximum 2 children and where the input data is compared to the data in the tree starting with the root If the value is smaller than the root it traverses left if it is larger it traverses right until it becomes a leaf	4.5
What is a binary search tree	A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child	a binary tree in which the data is in order from left to right	4
What is a binary search tree	A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child	a tree that is set up so that it can be easily searched for numbers based on the location compared to the previous nodes	3.5
What is a binary search tree	A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child	A binary search tree is a finite set of nodes that is either empty or consits of a root and two disjoint binary trees call the left and right subtrees	2.5
What is a binary search tree	A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child	a set of numbers arranged by links each node can contain two pointers to other elements each node to the left of the parent is smaller and each node to the right is larger recursive implementation implies that if traversed in order the output would be sorted	4.5
What is a binary search tree	A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child	a binary search tree is a special tree in which each node has at most two children labeled left child and right child	2.5
What is a binary search tree	A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child	Binary search trees are a fundamental data structure used to construct more abstract data structures such as sets multisets and associative arrays	2.5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	A binary search tree is a binary tree where the value in any node n is greater than the value in every node in n left subtree but less than every node in n s right subtree	5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	A binary tree where the value in any node n is greater than the value in every node in n left subtree but less than the value of every node in n right subtree	5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	A binary tree where the search key in any node n is greater than the search key in any node in n left subtree but less than the search key in any node in n right subtree	5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	A tree which is split based on values This makes it very easy to search One can compare the desired value to the root and if the root is greater than we search the left side of the tree if it is less than we search the right side and do the same thing recursively	5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	a tree where each node has at most two nodes and the node on the left is less than the root and the node on the right is greater than the root	4.5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	a special binary tree that has a rule that all the subtrees on the right are smaller than the node value and all the subtrees on the left are larger than the node value	4
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	Binary search trees are similar to binary trees but have been implemented to organize data in a specific way for later searching	3.5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	it is a binary tree where each node has a value a total order is defined on these values the left subtree of a node contains only values less than the node value and the right subtree of a node contains only values greater than or equal to the node value	5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	A binary tree with the data organized in a specific arangment	2.5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	A binary search tree is a tree that also has the condition that each node may have at maximum 2 children and where the input data is compared to the data in the tree starting with the root If the value is smaller than the root it traverses left if it is larger it traverses right until it becomes a leaf	4.5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	a binary tree in which the data is in order from left to right	4
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	a tree that is set up so that it can be easily searched for numbers based on the location compared to the previous nodes	3.5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	a binary tree where the children are ordered such that the right side is greater than the current node and the left is less than or equal the current node	5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	A binary tree where the value in any node n is greater than the value in every node n left subtree but less than every value in n right subtree	5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	A binary search tree is a finite set of nodes that is either empty or consits of a root and two disjoint binary trees call the left and right subtrees	2.5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	it is similar to a binary tree The keys in a nonempty left subtree - LRB - right subtree - RRB - are smaller - LRB - larger - RRB - than the key in the root of subtree the values in all nodes in the left subtree of a node are less than the node value the values in all nodes in the right subtree of a node are greater than the node values	5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	a set of numbers arranged by links each node can contain two pointers to other elements each node to the left of the parent is smaller and each node to the right is larger recursive implementation implies that if traversed in order the output would be sorted	4.5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	A binary search tree is a special binary tree arranged such that every left child node contains a value less than its parent and every right child node contains a value greater its parent	5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	a binary tree with a special organization of data where the left child of the element is less than it and the right child is larger than it	5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	A tree in which the smaller values are located on the left of a parent node and the larger values are located on the right of the parent node	5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	a binary search tree is a special tree in which each node has at most two children labeled left child and right child	2.5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	it is a binary tree where each node has a unique key the left child of a node has only values less than that node and the right child of each node has higher values than that node	5
What is a binary search tree	A tree data structure where each node has a value where the total order is defined on these values the left subtree contains only values less than the parent node and vice versa for the right subtree	Binary search trees are a fundamental data structure used to construct more abstract data structures such as sets multisets and associative arrays	2.5
What is the inorder traversal of a binary tree	Traverse the left subtree then the root then the right subtree	The inorder traversal of a binary tree visits the node of a binary tree in order according to their data values	2.5
What is the inorder traversal of a binary tree	Traverse the left subtree then the root then the right subtree	Traverses the binary tree in inorder It lets you visit the nodes in order according to their data values	3
What is the inorder traversal of a binary tree	Traverse the left subtree then the root then the right subtree	Its used to visit nodes of a binary search tree in a search key order	3.5
What is the inorder traversal of a binary tree	Traverse the left subtree then the root then the right subtree	Inorder traversal of a binary tree will retrieve start at the furthest left hand leaf and checks it it s parent and it s right side sibling then it goes up a level and repeats until it gets to the root	4.5
What is the inorder traversal of a binary tree	Traverse the left subtree then the root then the right subtree	postorder	1.5
What is the inorder traversal of a binary tree	Traverse the left subtree then the root then the right subtree	in order starts with the root then does right child then left child recursively	1.5
What is the inorder traversal of a binary tree	Traverse the left subtree then the root then the right subtree	it goes from lowest to highest inside of the tree	2
What is the inorder traversal of a binary tree	Traverse the left subtree then the root then the right subtree	starting by displaying the node furthest to the right then the node then the node on the right in recursive order	4
What is the inorder traversal of a binary tree	Traverse the left subtree then the root then the right subtree	It travels left to right	3.5
What is the inorder traversal of a binary tree	Traverse the left subtree then the root then the right subtree	it means that you traverse one subtree of a node then look at the node itself before traversing the other subtree of the node	4
What is the inorder traversal of a binary tree	Traverse the left subtree then the root then the right subtree	Level order traversal is a traversal method by which levels are visited successively starting with level 0 - LRB - the root node - RRB - and nodes are visited from left to right on each level with Push and Pop methods	2
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	The inorder traversal of a binary tree visits the node of a binary tree in order according to their data values	2.5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	Traverses the binary tree in inorder It lets you visit the nodes in order according to their data values	3
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	Its used to visit nodes of a binary search tree in a search key order	3.5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	- LRB - Left side of tree - RRB - - LRB - Root - RRB - - LRB - Right side of tree - RRB -	5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	printing a tree in order from least to greatest This done by going as far left down the tree as possible and printing the parent and then right tree Then move up the tree	5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	The in order is to go from left root right	5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	Inorder traversal of a binary tree will retrieve start at the furthest left hand leaf and checks it it s parent and it s right side sibling then it goes up a level and repeats until it gets to the root	4.5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	traverse the left subtree visit the root traverse the right subtree	5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	postorder	1.5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	in order starts with the root then does right child then left child recursively	1.5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	Left Child implies Parent implies Right Child	5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	it goes from lowest to highest inside of the tree	2
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	starting by displaying the node furthest to the right then the node then the node on the right in recursive order	4
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	It travels left to right	3.5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	void inorder - LRB - ptNode ptr - RRB - if - LRB - ptr - RRB - inorder - LRB - ptr implies left - RRB - ; coutdata; inorder - LRB - ptr implies right - RRB - ;	5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	the root is in the middle The left subtree is traversed first then the root and finally the right subtree	5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	a traversal that visits the left branch first then the parent node then the right branch recursively	5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	Inorder traversal visits the left branch of a node - LRB - all the way to it is deepest left - most leaf - RRB - before visiting the node itself After visiting the entire left branch and the node it visits the node right branch following the same pattern of left child node right child	5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	left middle right	5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	You traverse all the nodes to the left then visit the root then traverse all the nodes on the right	5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	you would go to the furthest down left most node then to the root then to the right - LRB - if left and right exist - RRB - then you would return one node previous and do the same until you reached the root then go to the furthest down left most node on the right side of the root and continue this process	5
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	it means that you traverse one subtree of a node then look at the node itself before traversing the other subtree of the node	4
What is the inorder traversal of a binary tree	For every node in the binary tree we first visit its left sub - tree - LRB - if its there - RRB - and then visit the parent node itself and then the right sub - tree - LRB - if its there - RRB -	Level order traversal is a traversal method by which levels are visited successively starting with level 0 - LRB - the root node - RRB - and nodes are visited from left to right on each level with Push and Pop methods	2
How many comparisons does it take to find an element in a binary search tree	The height of the tree - LRB - or log of the number of elements in the tree - RRB -	n minus 1 divided by 2 is the algorithm to compare and find an element	2
How many comparisons does it take to find an element in a binary search tree	The height of the tree - LRB - or log of the number of elements in the tree - RRB -	Depends on what half of the tree and the levels you have	3.5
How many comparisons does it take to find an element in a binary search tree	The height of the tree - LRB - or log of the number of elements in the tree - RRB -	n minus 1	2.5
How many comparisons does it take to find an element in a binary search tree	The height of the tree - LRB - or log of the number of elements in the tree - RRB -	O - LRB - nlog - LRB - n - RRB - - RRB -	2.5
How many comparisons does it take to find an element in a binary search tree	The height of the tree - LRB - or log of the number of elements in the tree - RRB -	nLog - LRB - n - RRB -	2
How many comparisons does it take to find an element in a binary search tree	The height of the tree - LRB - or log of the number of elements in the tree - RRB -	at the minimum log - LRB - n - RRB - or log - LRB - 2 - RRB - at the maximum N searches where N is the number of nodes	4.5
How many comparisons does it take to find an element in a binary search tree	The height of the tree - LRB - or log of the number of elements in the tree - RRB -	O - LRB - n - RRB -	3
How many comparisons does it take to find an element in a binary search tree	The height of the tree - LRB - or log of the number of elements in the tree - RRB -	It takes at most 3 comparisons to find and element in a binary search tree	1.5
How many comparisons does it take to find an element in a binary search tree	The height of the tree - LRB - or log of the number of elements in the tree - RRB -	- LRB - n to the power of k - RRB - minus 1 where k is the height of the tree	1.5
How many comparisons does it take to find an element in a binary search tree	The height of the tree - LRB - or log of the number of elements in the tree - RRB -	2 way key comparison	1
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	In a binary search tree of size n it takes log - LRB - n - RRB - comparisons to find a specified element	5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	n minus 1 divided by 2 is the algorithm to compare and find an element	2
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	At most its equivalent to the height of the tree	5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	Log - LRB - n - RRB -	5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	O - LRB - log n - RRB -	5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	Depends on what half of the tree and the levels you have	3.5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	O - LRB - log n - RRB - in balanced trees	5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	n minus 1	2.5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	log - LRB - n - RRB -	5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	O - LRB - nlog - LRB - n - RRB - - RRB -	2.5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	nLog - LRB - n - RRB -	2
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	logn	5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	at the minimum log - LRB - n - RRB - or log - LRB - 2 - RRB - at the maximum N searches where N is the number of nodes	4.5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	O - LRB - n - RRB -	3
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	It takes at most 3 comparisons to find and element in a binary search tree	1.5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	log - LRB - n - RRB - where n equals the number of nodes	5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	it takes as many comparisons as the number of levels of the binary search tree it only compares one number at each level	5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	At most it takes one less comparisons than the tree height In big - O notation it takes O - LRB - log n - RRB - comparisons if the tree is balanced	5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	O - LRB - log n - RRB -	5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	log n comparisons	5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	- LRB - n to the power of k - RRB - minus 1 where k is the height of the tree	1.5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	it takes h comparisons where h is the height of the tree	5
How many comparisons does it take to find an element in a binary search tree	This is on the runtime order of log - LRB - n - RRB - where n is the number of nodes in the binary tree	2 way key comparison	1
What are the elements typically included in a class definition	Function members and data members	The name of the class file the parameters it must take to perform its function Also a brief description of what the class does	3
What are the elements typically included in a class definition	Function members and data members	access specifiers and functions oftentimes a constructor	3
What are the elements typically included in a class definition	Function members and data members	Class is user defined It contains members data and functions The keyword class is used and includes brackets - LRB - - RRB -	4
What are the elements typically included in a class definition	Function members and data members	the functions and variables used when the object is defined for the class	4
What are the elements typically included in a class definition	Function members and data members	return type and input parameters	2.5
What are the elements typically included in a class definition	Function members and data members	Constructor Data members Methods	4.5
What are the elements typically included in a class definition	Function members and data members	The elements that are included in a class definition is the access - modifier data types variables and function signatures	4
What are the elements typically included in a class definition	Function members and data members	The variables and function prototypes	4
What are the elements typically included in a class definition	Function members and data members	public and private variables and initiations of functions included in the class	4
What are the elements typically included in a class definition	Function members and data members	The return value and the accepted value	1.5
What are the elements typically included in a class definition	Function members and data members	A class definition typically includes the class name the classes constructor - LRB - s - RRB - and any extra functions and class variables	4
What are the elements typically included in a class definition	Function members and data members	Parameters and their type Class name and return type and the code to be executed in the class	3
What are the elements typically included in a class definition	Function members and data members	Constructor functions and variables native to the class	4
What are the elements typically included in a class definition	Function members and data members	constructor and function definitions	3.5
What are the elements typically included in a class definition	Function members and data members	class name data of class definition of functions and methods	4.5
What are the elements typically included in a class definition	Function members and data members	A class definition includes the definitions of the class constructor - LRB - s - RRB - and any public or private functions Of course it also includes the class header and any necessary C libraries	3
What are the elements typically included in a class definition	Function members and data members	Class name semicoln at the end of the defination private and bublic followed by :	3
What are the elements typically included in a class definition	Function members and data members	a constructor private and public variables and function prototypes	4
What are the elements typically included in a class definition	Function members and data members	class definitions include the name of the class and type of parameters	3
What are the elements typically included in a class definition	Function members and data members	class variables class function prototypes	4.5
What are the elements typically included in a class definition	Function members and data members	input ADDRESS return type elements	2.5
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	The name of the class file the parameters it must take to perform its function Also a brief description of what the class does	3
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	access specifiers and functions oftentimes a constructor	3
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	5
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	Class is user defined It contains members data and functions The keyword class is used and includes brackets - LRB - - RRB -	4
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	Member functions and data members	5
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	the functions and variables used when the object is defined for the class	4
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	Data members functions and function definitions variables	5
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	return type and input parameters	2.5
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	Constructor Data members Methods	4.5
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	Function members and member attributes or in other words the class variables and functions	5
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	The elements that are included in a class definition is the access - modifier data types variables and function signatures	4
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	The variables and function prototypes	4
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	public and private variables and initiations of functions included in the class	4
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	The return value and the accepted value	1.5
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	A class definition typically includes the class name the classes constructor - LRB - s - RRB - and any extra functions and class variables	4
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	Parameters and their type Class name and return type and the code to be executed in the class	3
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	data members class variables and functions	5
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	Constructor functions and variables native to the class	4
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	functions and data members	5
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	data members and function definitions	5
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	member functions and data members	5
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	constructor and function definitions	3.5
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	class name data of class definition of functions and methods	4.5
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	A class definition includes the definitions of the class constructor - LRB - s - RRB - and any public or private functions Of course it also includes the class header and any necessary C libraries	3
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	Class name semicoln at the end of the defination private and bublic followed by :	3
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	a constructor private and public variables and function prototypes	4
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	Data variables and Functions Data members	5
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	class definitions include the name of the class and type of parameters	3
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	class variables class function prototypes	4.5
What are the elements typically included in a class definition	The elements typically included in a class definition are the function prototypes usually declared public and the data members used in the class which are usually declared private	input ADDRESS return type elements	2.5
Briefly describe in one sentence how does merge sort work	It splits the original array into two sorts each of the two halves and then merges the sorted arrays	A merge sort works by removing all items to sepperate memory locations and merging them back together in order	3.5
Briefly describe in one sentence how does merge sort work	It splits the original array into two sorts each of the two halves and then merges the sorted arrays	By divide and conquer	3.5
Briefly describe in one sentence how does merge sort work	It splits the original array into two sorts each of the two halves and then merges the sorted arrays	merge sort splits an array of elements into smaller and smaller array till the value of 1 is reached	4
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	A merge sort works by removing all items to sepperate memory locations and merging them back together in order	3.5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	It divides the array into two halves sorts each half then merges the two halves together	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	Divide into two sublists and then those sublists break into length 1 then merges the sublists sorted	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	Merge sort uses the divide and conquer idea where it divides the array in half multiple times and then joins each element of the array back into one sorted array This is one of the best sorting algorithms besides Quicksort	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	divides the line in half coninuously until you get to only a single value then recombine the values to form a sorted line	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	Continually split array in half sort each side of the halves then put them back together once organized	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	merge sort splits the array of elements into smaller arrays until the arrays reach size 1 and then the merge sort merges the smaller arrays into arrays of size 2 then it moves to the next step and merges the next arrays	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	By divide and conquer	3.5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	Break a single array down into many arrays with individual elements then sort the elements as you reconstruct them back into a single array	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	Merge sort breaks the array in half and continues to do so until it has 2 elements to compare and sorts them after doing so it merges back as it keeps on sorting the algorithm as it does so	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	Merge sort divides the problem in half organizes each half then brings the two halves together again	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	Take an array and split it into two then solve these simpler problems and merge the two answers in correct order	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	A merge sort recursively divides the array into half until only one element remains then it sorts the data on its way out of the recursive call by merging the cells	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	Merge sort recursively divides an array into two arrays until all arrays have 1 element at which point it merges the 1 element arrays into larger sorted arrays the final returned array being the sorted version of the initial array	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	Merge sort continuously breaks an array in half then sorts the arrays as it concatenates them back together into one sorted array	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	It takes an array splits itself in half sorts the two halves - LRB - either by recursion or iteration - RRB - and compares them together giving a third array a full sorted list with both halves rejoined	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	it splits a large array into small arrays and recurs until the array is a size of 1 and then merges all of the arrays back together until the source array is completely sourted	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	Mergesort divides the array into smaller halves and then combines the sorted subarrays into one sorted array	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	merge sort breaks the array down in halves until it is comparing two values sorts those two values then merges that back with the other broken down parts that it sorted each level merging more sets together till you return back to your whole array in order	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	Divides the data into twor separate arrays sorts the two arrays and merges them back to back together recursively	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	Take the initial array and split it into two temporary smaller arrays sort the two smaller arrays and merge them back into a single array	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	merge sort divides the data into halves until data of one element is reached and then merges each element together according to its placement in comparison to the rest of the data	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	merge sort uses the divide and conquer strategy sorting an array in parts then merging the sorted parts back together	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	Divide recursuivly big array into two arrays sort two array and merge them togather recuruivly	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	divides an array in half and sorts each half by calling its self thus dividing each half again and again and sorting it until the array is sorted then putting the elements back in the original array sorted	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	Merge sort takes an array and splits it in half and sends each half back to itself recursively and merges and sorts the two halves when it starts going back up	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	merge sort splits an array into two halves and then sorts the two smaller arrays and then merges them back together to form a sorted array	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	the merge sort continually divides the array - LRB - or set of containers - RRB - into halves until it reaches the point where there is just one element left then merges each of the sets of two sorted arrays - LRB - containers - RRB -	5
Briefly describe in one sentence how does merge sort work	It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list this is done by reversing the divide and conquer technique	merge sort splits an array of elements into smaller and smaller array till the value of 1 is reached	4
What are the access - specifiers that can be used in a C plus plus class definition	Private and public	static long unsigned	0.5
What are the access - specifiers that can be used in a C plus plus class definition	Private and public	A C plus plus class definition may include access - specifiers public private and static	4.5
What are the access - specifiers that can be used in a C plus plus class definition	Private and public	local global local - variable function specific	2.5
What are the access - specifiers that can be used in a C plus plus class definition	Private and public	data member or data functions are access specifiers	0.5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	Public and private specifiers	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	Public Private Restricted	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	The access specifiers are public and private	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	public private protected	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	Public or Private	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	public : the function or variable can be used outside the class private : the function or variable can only be used with the class	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	Public and Private	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	public private and protected	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	Public Private	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	Private public protected	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	The access - specifiers that can be used in a C plus plus class definition is private and public	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	public and private	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	static long unsigned	0.5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	Private Public Protected or Friend	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	A C plus plus class definition may include access - specifiers public private and static	4.5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	local global local - variable function specific	2.5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	public private	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	Public protected and private	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	private public	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	public can be accessed by any of the program private can only be accessed by the class functions themselves and no outside functions or calls	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	public private protected	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	public and private	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	public private protected	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	functions and data members can be given access - specifications of public private and friend public access is given to any functions or members not given specific access rights	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	data member or data functions are access specifiers	0.5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	public or private	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	public and private	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	public and private	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	public can be accessed from outside the class private accessible only from inside the class not inherited protected accessible only from inside the class inherited	5
What are the access - specifiers that can be used in a C plus plus class definition	Public and private specifiers	public private protected	5
How are objects initialized when they are created	By using constructors	ie GradeBook myGradeBook - LRB - - RRB - ; call upon the class and then give it a name like shown	1.5
How are objects initialized when they are created	By using constructors	They are initialized as a named instance of the template formed by the class This named instance can then be modified to be different from the class that it was created from	3.5
How are objects initialized when they are created	By using constructors	not answered	0
How are objects initialized when they are created	By using constructors	Objects are initialized by a value given When an object is defined for a certain task	2.5
How are objects initialized when they are created	By using constructors	They are initialized with a - LRB - dot - RRB - between the constructor and the object being created	2.5
How are objects initialized when they are created	By using constructors	objectname classname - LRB - - RRB - ; to call a function from the class : objectname funciton - LRB - - RRB - ;	1.5
How are objects initialized when they are created	By using constructors	classname objectname - LRB - input parameters - RRB - ;	3
How are objects initialized when they are created	By using constructors	When the class is called by the Constructor	3.5
How are objects initialized when they are created	By using constructors	Objects are usually initialized at the beginning of the program and are initialized usually in the main function They are initialized after the class name	2.5
How are objects initialized when they are created	By using constructors	; or if you want to initialize a variable to a certain value equals;	2.5
How are objects initialized when they are created	By using constructors	variables are set to a given value or 0 if none is given	1
How are objects initialized when they are created	By using constructors	Objects are initialized essentially as copies of the corresponding classes complete with their own separate variables	2.5
How are objects initialized when they are created	By using constructors	objects are initialized by stating the classname first then assigning a name to the object Within the object - LRB - - RRB - is a place where it can be initialized	3.5
How are objects initialized when they are created	By using constructors	The value is specified after declaration It can initialized anywhere between the declaration and the corresponding	2.5
How are objects initialized when they are created	By using constructors	with the default constructor for that object in its class if no constructor is specified it uses the default system constructor	4.5
How are objects initialized when they are created	By using constructors	initialized using the same name as the class	2.5
How are objects initialized when they are created	By using constructors	they are initialized to a value dependent on the compiler	1
How are objects initialized when they are created	By using constructors	memory is allocated in accordance with their type and initialization input	2
How are objects initialized when they are created	By using constructors	Objects are assigned a space in memory when they are created the name given to the object points to the memory address where the objects data resides	1
How are objects initialized when they are created	By using constructors	by giving them a value	1.5
How are objects initialized when they are created	By using constructors	objects are initialized by giving the object a type name and initial value	2.5
How are objects initialized when they are created	By using constructors	they are initialized to 0	1
How are objects initialized when they are created	By using constructors	obj are initialized by the variables that call them when they are created within a class e i classname objectname etc	2.5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	ie GradeBook myGradeBook - LRB - - RRB - ; call upon the class and then give it a name like shown	1.5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	They are initialized as a named instance of the template formed by the class This named instance can then be modified to be different from the class that it was created from	3.5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	not answered	0
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	Objects are initialized by a value given When an object is defined for a certain task	2.5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	They are initialized with a - LRB - dot - RRB - between the constructor and the object being created	2.5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	objectname classname - LRB - - RRB - ; to call a function from the class : objectname funciton - LRB - - RRB - ;	1.5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	classname objectname - LRB - input parameters - RRB - ;	3
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	When the class is called by the Constructor	3.5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	Constructors; default when not provided by user or programmer specified constructors	5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	Objects are usually initialized at the beginning of the program and are initialized usually in the main function They are initialized after the class name	2.5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	; or if you want to initialize a variable to a certain value equals;	2.5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	variables are set to a given value or 0 if none is given	1
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	When the object is initialized its constructor is called - LRB - whether one is provided or c plus plus assigns a default constructor - RRB -	5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	Objects are initialized essentially as copies of the corresponding classes complete with their own separate variables	2.5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	If you had a class Gradebook you would initialize it in your main function by use of a constructor in the Gradebook class If no constructor is specified or found c plus plus will use a default one with no parameters Gradebook myGradebook; In this bit of code the class Gradebook has been initialized as object myGradebook	5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	objects are initialized by stating the classname first then assigning a name to the object Within the object - LRB - - RRB - is a place where it can be initialized	3.5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	They are initialized with a constructor	5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	The value is specified after declaration It can initialized anywhere between the declaration and the corresponding	2.5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	with the default constructor for that object in its class if no constructor is specified it uses the default system constructor	4.5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	initialized using the same name as the class	2.5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	they are initialized to a value dependent on the compiler	1
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	memory is allocated in accordance with their type and initialization input	2
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	Objects are assigned a space in memory when they are created the name given to the object points to the memory address where the objects data resides	1
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	using constructor	5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	by giving them a value	1.5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	By declaring the class first the name of the variable and then any variables that need to be put in the constructor Ex Class myClass - LRB - x y - RRB -	5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	objects are initialized by giving the object a type name and initial value	2.5
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	they are initialized to 0	1
How are objects initialized when they are created	If the object refers to a class the constructor - LRB - s - RRB - will initialize the objects based on return type and parameters passed Compiler will auto - create one if one is not provided	obj are initialized by the variables that call them when they are created within a class e i classname objectname etc	2.5
What is a function signature	The name of the function and the list of parameters including their types	a function signature is the elements that make it unique such as the variables it calls for and also I suppose this includes the program it is in	4
What is a function signature	The name of the function and the list of parameters including their types	function prototype that contains functions and data members	3
What is a function signature	The name of the function and the list of parameters including their types	the declaration of the function	2.5
What is a function signature	The name of the function and the list of parameters including their types	The function signature tells what the function parameters and includes all the function calls	4
What is a function signature	The name of the function and the list of parameters including their types	the body of the function that holds all the actual code	2
What is a function signature	The name of the function and the list of parameters including their types	A function signature is the return type and accepted pass value type it takes	3.5
What is a function signature	The name of the function and the list of parameters including their types	the unique identifier of a function which includes input variables along with the function name but excludes the output type	4.5
What is a function signature	The name of the function and the list of parameters including their types	a function signature should include the name of the function parameters and a body	4
What is a function signature	The name of the function and the list of parameters including their types	function sig is is what is the class recognizes as the main function or rather its specification	2
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	Name of the function parameters it must receive in order to perform and a return type	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	a function signature is the elements that make it unique such as the variables it calls for and also I suppose this includes the program it is in	4
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	A function signature is the return type of a function its name and the number and type of its parameters	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	function prototype that contains functions and data members	3
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	A function signature is a declaration of the function that includes the parameter types and the number of parameters	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	the declaration of the function	2.5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	Includes the name accepted parameters and return type	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	its return type and its input parameters	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	Contains the function name and its paramaters The return type is not included	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	Return type function name and the parameter types	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	The function signature tells what the function parameters and includes all the function calls	4
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	The function name as well as what it returns and what it accepts	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	the body of the function that holds all the actual code	2
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	A function signature is the return type and accepted pass value type it takes	3.5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	A function signature specifies the name and input variables of a function	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	A function signature is the function parameters and their type and the name of the function The return type is not a part of the function signature	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	the name of the function and what it accepts or returns	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	the unique identifier of a function which includes input variables along with the function name but excludes the output type	4.5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	The order number and type of data items included inside the function parameters	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	its the scope type and parameters of that function that give it it is properties and defines it against other functions	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	is the name of the fuction return type and parameters that are being used	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	a function signature should include the name of the function parameters and a body	4
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	the name of the function and the arguments passed to that function	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	A function signature used in a function prototype is the set of object types it take in as parameters with or without names given for the objects	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	function name and parameter are called function signature	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	fuction name and parameters	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	The parameters needed the return type and name of the function	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	the signature of a function includes the name of the function the number and types of parameters and the return type	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	It is what uniquely separates overloaded functions It includes the return type and the parameter list of the function	5
What is a function signature	Name of the function parameters it must receive in order to perform and a return type	function sig is is what is the class recognizes as the main function or rather its specification	2
What is a recursive function	A function that calls itself	not answered	0
What is a recursive function	A function that calls itself	A base case that calls upon itself until the problem becomes smaller and terminates	4
What is a recursive function	A function that calls itself	A recursive function is a function that breaks down a large problem into two or more smaller problems and calls itself to solve those smaller problems until a base case or terminating point is reached At the base case a definite answer is called and the function no longer recurses but unwinds itself back through function calls to determine the answer to the original large problem	4.5
What is a recursive function	A function that calls itself	a function that calls itself into a loop with a base case for a loop exit	4
What is a recursive function	A function that calls itself	It invoke by itself again ana again unless it reach bas case	4.5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	A function that calls itself to perform an opperation such as a factorial recursive function	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	not answered	0
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	A base case that calls upon itself until the problem becomes smaller and terminates	4
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	It is a function that calls itself It runs multiple times until the base case is reached	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	a function that calls itself untill it reaches a base case	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	A function that calls itself Each time it does it must get smaller and eventually MUST converge to a base case otherwise you can start an infinite loop	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	a function that calls itself until a base case is met	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	A function that calls itself With each function call the problem is diminished	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	A function that calls itself to perform a certain task	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	A recursive function is a function that calls itself Usually called the base case If the base case is not correct it causes a infinite loop	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	A function that calls itself in order to solve a problem	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	a function that calls itself over and over until it finds the simplest form of solution or the base case	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	A recursive function is a function that calls itself repeatedly until a base case is achieved The fundamental idea is to break one large problem into a series of smaller similar problems	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	A recursive function typically simplifies a problem by calling itself until arriving at a base case at which it recursively returns a solution	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	A recursive function is a function that breaks down a large problem into two or more smaller problems and calls itself to solve those smaller problems until a base case or terminating point is reached At the base case a definite answer is called and the function no longer recurses but unwinds itself back through function calls to determine the answer to the original large problem	4.5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	a function that calls itself into a loop with a base case for a loop exit	4
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	a function that calls itself until the base cases are met	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	A recursive function only knows how to solve base cases A recursive function calls itself directly or indirectly until a base case is reached	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	a function that calls on itself and uses a base case to stop the recursion	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	a function that calls itself and which eaach calls get closer and close to the base case	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	A function that divides and conquers a problem There is a base case that will eventually be reached The function calls itself over and over until the base case is satisfied	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	a function that calls itself in the definition code	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	A recursive function solves a problem by repeatedly calling itself the initial problem is broken into successively smaller parts until a much simpler base case is reached the solutions to each piece of the problem are then returned a step at a time	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	It invoke by itself again ana again unless it reach bas case	4.5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	a function that solves a problem by dividing the problem into smaller problems by calling its self again and again until a base case is reached	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	A function that calls itself over and over again till a base case is reached then it returns back to the original function	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	a recursive function is a function that during execution calls itself over and over until a base case is reached	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	A function that calls itself Usually used to split a problem into several smaller problems of the same type	5
What is a recursive function	A function that calls upon it self to solve a problem Each time it calls upon it self it splits up a problem into a simplier form until it reaches a base case which is the most simplest form of the problem	function that calls it self till the base case is met	5
What is the alternative way to solve a problem that could be solved through recursive functions	Through iteration	The alternative method is to use loops in the program instead of a function which calls itself	4
What is the alternative way to solve a problem that could be solved through recursive functions	Through iteration	Many recursive solutions may also be solved with looping control statements such as while for do - while etc	4
What is the alternative way to solve a problem that could be solved through recursive functions	Through iteration	the alt way is to use a functions parameter in a call to function	3
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	Iteration performers a series of checks and loops	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	The alternative method is to use loops in the program instead of a function which calls itself	4
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	An alternative to solving a problem using recursive functions is to solve the problem using iteration	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	Iteration this would be more efficient and has repetition structure	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	One can use iteration or by using a simple while or for loop	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	iteration	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	Iteration A while loop or a for loop will be able to accomplish the same desired outcome It may be faster than recursion but could also be harder to understand	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	you can also solve the problem iteratively	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	iterative	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	Using iteration loops	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	Another alternative way to solve a problem instead of using recursive functions is by using iteration	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	A recursive function can often be solved using an iterative function which runs faster but is often more complicated	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	iteration	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	Any recursive function can be solved using an iterative method	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	Many recursive solutions may also be solved with looping control statements such as while for do - while etc	4
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	Using an iterative function which repeats a specified operation or set of operations until a terminating point or base case is reached	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	iteratively	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	using an Iterative calls	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	Iteration	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	iteration is the alternative way to solve a problem	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	using an iterative solution instead	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	Using an iterative solution For while or do while loop	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	the alternative way to solve a problem that could be solved using recursion is iteration	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	Any problem solved recursively could be solved with an iterative function Iterative replacements for recursive functions may be more difficult to program but often lead to more efficient solutions to a problem	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	by iteration	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	itteration like a for loop a while loop or a do while loop	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	Iteration by using loops	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	iterative functions	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	iteration	5
What is the alternative way to solve a problem that could be solved through recursive functions	Iteration performers a series of checks and loops	the alt way is to use a functions parameter in a call to function	3
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	A static array only has a specific size and it cannot grow Also static arrays cannot be accessed outside the program which created it	3
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	Static can be initialized and non - static cannot in C plus plus	2.5
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	An array declared static remains the same throughout the execution of the program	2.5
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	a static array will be called only once once it has been declared the complier will ignore the static line if it comes to it again	4.5
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	The static array will be available to the whole of the program whereas an array that is not static is only available within the scope in which it is declared or or pass - by - reference	4
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	a static array has a predetermined size and that size cannot be altered	3
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	Arrays declared static can not be changed One not declared static can be altered	2.5
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	an array that is declared as static will retain the values stored in it is elements between function calls and will not reinitialize them to default values	4.5
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	An array that is declared static causes anything that is not initialized to be set to 0	2.5
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	A static array will have a null character at the end of the array	3
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	static arrays cannot be changed while normal arrays can be changed	2.5
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	An array they is declared as static can be accessed outside of the method it was declared without passing it as an argument to other functions in the same class	3
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	A static array has class scope allowing it to remain where other arrays might be recycled	4
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	one declared as static is one that is already defined The program knows the length and the array from the start whereas non - static arrays are declared or assigned later	3
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	A static array retains any modified values after a function call Automatic arrays reset to their initial values when the function ends	4.5
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	a static array is one that keeps its values and is not initialized every time a class function is called it is data is not lost at function end	4.5
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	an array that is declared as static can only be used in the function that its being called in Its a constant array Static is another way of say const	2.5
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	Values in an array that is not delcared as static will remain constant When an array is declared const values within the array can be manipulated	2.5
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	the data of a static array cannot be changed	2.5
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	Standard arrays terminate when the functions that call them finish A static array is not removed from memory when it is parent function terminates leaving it available for other functions - LRB - or new instances of the original function - RRB -	4
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	by defining static array it doese not lose scope in locala function static array makes programm more scalable non static array lose scope inside the local function	4.5
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	static arrays can be called from anywhere	2
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	A static array cannot be changed A regular array can be changed when it is passed to a function or manually	2.5
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	a static array can be can be edited throughout the program while a non - static array can only be edited within a given function	3.5
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	An array that is declared static is allocated when the program begins to run and is not freed until the program exits but has limited scope A non - static array is allocated and freed every time that it comes in and out of scope	4.5
What is the difference between an array that is declared as static and one that is not	The static arrays are intialized only once when the function is called	static has a predetermined size that cannot be passed while vis versa	3
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	A static array only has a specific size and it cannot grow Also static arrays cannot be accessed outside the program which created it	3
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	Arrays declared as static are not created and initialized when a function is called and destroyed when the function terminates	5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	Static can be initialized and non - static cannot in C plus plus	2.5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	An array declared static remains the same throughout the execution of the program	2.5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	a static array will be called only once once it has been declared the complier will ignore the static line if it comes to it again	4.5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	The static array will be available to the whole of the program whereas an array that is not static is only available within the scope in which it is declared or or pass - by - reference	4
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	a static array has a predetermined size and that size cannot be altered	3
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	Arrays declared static can not be changed One not declared static can be altered	2.5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	an array that is declared as static will retain the values stored in it is elements between function calls and will not reinitialize them to default values	4.5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	An array that is declared static causes anything that is not initialized to be set to 0	2.5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	A static array will have a null character at the end of the array	3
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	static arrays cannot be changed while normal arrays can be changed	2.5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	An array they is declared as static can be accessed outside of the method it was declared without passing it as an argument to other functions in the same class	3
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	A static array has class scope allowing it to remain where other arrays might be recycled	4
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	An array that is static does not change or uninitialize if called later unless explicitly acted upon It does not terminate or change across objects An automatic local array will be cleared and uninitialized if called later outside of it is specific scope	5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	one declared as static is one that is already defined The program knows the length and the array from the start whereas non - static arrays are declared or assigned later	3
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	a non static array must reinitialize itself every function call while a static array will only initialize itself once unless otherwise forced	5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	A static array retains any modified values after a function call Automatic arrays reset to their initial values when the function ends	4.5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	a static array is one that keeps its values and is not initialized every time a class function is called it is data is not lost at function end	4.5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	an array that is declared as static can only be used in the function that its being called in Its a constant array Static is another way of say const	2.5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	Values in an array that is not delcared as static will remain constant When an array is declared const values within the array can be manipulated	2.5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	the data of a static array cannot be changed	2.5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	Standard arrays terminate when the functions that call them finish A static array is not removed from memory when it is parent function terminates leaving it available for other functions - LRB - or new instances of the original function - RRB -	4
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	by defining static array it doese not lose scope in locala function static array makes programm more scalable non static array lose scope inside the local function	4.5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	static arrays can be called from anywhere	2
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	A static array cannot be changed A regular array can be changed when it is passed to a function or manually	2.5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	a static array can be can be edited throughout the program while a non - static array can only be edited within a given function	3.5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	An array that is declared static is allocated when the program begins to run and is not freed until the program exits but has limited scope A non - static array is allocated and freed every time that it comes in and out of scope	4.5
What is the difference between an array that is declared as static and one that is not	The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again An array that is not declared static will keep its original elements	static has a predetermined size that cannot be passed while vis versa	3
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	a variable char is basically any non command key on the keyboard that you can press A string is a collection of letters or numbers that is stored together to be used later Comonly strings are used for words Chars can be used for less but can have opperations performed on them in a useful way	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	String contains a word where as char can contain phrases or a string of characters	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	a string is a variable with a single entinty of letters combined into one while in a char each letter is assigned a memory value and each has its own variable assigned i e char 0 char 1	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	A string contains a null character at the end of the string which makes it easily possible to get the string length A char array can have a virtually unlimited length therefore its size must be declared or limited	4
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	When you read a string of characters you also read in the white space When you read characters declared char you only read the characters no white space	3
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	Character arrays will terminate at any whitespace including spaces Strings terminate when they encounter the new line character	3.5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	The difference is that a string that is declared a variable of type char is each char is included in the array versus the string of characters that is read into a variable	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	An array of strings reads the string literals meaning anything within quotes A char array reads a string as each individual character	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	character arrays can call on individual letters were a string array can only call words	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	The variable of type string has a terminating character 0 at the end of it	4
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	the one that is type string has an extra string member The or 0 at the end	4
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	a string has variable size and function calls available while an character array usually has a static size	3.5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	the variable of type char each character is stored into a different memory address and can be accessed easly where as in a string of character its not easy to be able to access each character in the string	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	When the string is passed into the array char individual characters are stored and can be manipulated Although when a word is stored into a string variable it is stored as one word and not as individual characters	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	a string variable can change in size and is passed to functions by value whereas a type char cannot change in size and is passed to functions by reference only	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	A string type string acts as a single object with individual char entities accessible only through specific string class functions A char array is less robust but allows direct access to specific char entities	3
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	In arrays strings are stored as a characters - LRB - char - RRB - each character of string will be stored in each memory location of the array while string of characters is only one memory location	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	The char will automatically add a null 0 character at the end of the string	string of characters that is read into a variable of type string includes	1.5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	the type char has a null - LRB - n - RRB - element at the very end	5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	a variable char is basically any non command key on the keyboard that you can press A string is a collection of letters or numbers that is stored together to be used later Comonly strings are used for words Chars can be used for less but can have opperations performed on them in a useful way	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	The programmer must provide the null terminating character in a string of characters using type char and must also ensure that the array is large enough to contain the input string of characters and the null terminating character	5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	String of characters are followed by a null statement type string is for example string s;	5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	String contains a word where as char can contain phrases or a string of characters	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	a string is a variable with a single entinty of letters combined into one while in a char each letter is assigned a memory value and each has its own variable assigned i e char 0 char 1	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	A string contains a null character at the end of the string which makes it easily possible to get the string length A char array can have a virtually unlimited length therefore its size must be declared or limited	4
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	an array of characters stores a null character at the end	5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	When you read a string of characters you also read in the white space When you read characters declared char you only read the characters no white space	3
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	Character arrays will terminate at any whitespace including spaces Strings terminate when they encounter the new line character	3.5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	The difference is that a string that is declared a variable of type char is each char is included in the array versus the string of characters that is read into a variable	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	An array of strings reads the string literals meaning anything within quotes A char array reads a string as each individual character	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	character arrays can call on individual letters were a string array can only call words	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	The character array has an end of line character at the end of it	5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	Type char may contain a null value as the last element whereas type string will not	5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	The variable of type string has a terminating character 0 at the end of it	4
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	the one that is type string has an extra string member The or 0 at the end	4
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	a string has variable size and function calls available while an character array usually has a static size	3.5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	a string char adds a null value to the end of the string	5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	char array needs an end character signature and is made up of characters each separate from each other a string is an object in itself with a value that the user enters	5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	the variable of type char each character is stored into a different memory address and can be accessed easly where as in a string of character its not easy to be able to access each character in the string	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	When the string is passed into the array char individual characters are stored and can be manipulated Although when a word is stored into a string variable it is stored as one word and not as individual characters	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	a string variable can change in size and is passed to functions by value whereas a type char cannot change in size and is passed to functions by reference only	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	A string type string acts as a single object with individual char entities accessible only through specific string class functions A char array is less robust but allows direct access to specific char entities	3
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	In arrays strings are stored as a characters - LRB - char - RRB - each character of string will be stored in each memory location of the array while string of characters is only one memory location	2
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	an array of characters has one more element its last element the terminating element or null which doesnt exist in a variable of type string	5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	A string of characters is a specific variable type that has no extra data at the end A string of type char is all the characters and a null - LRB - 0 - RRB -	5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	a string of characters will have a null character or value at the end of the string	5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	when the characters are put in a char array there is also a null terminating character added to the end 0	5
What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char	the type char has a null - LRB - n - RRB - element at the very end	string of characters that is read into a variable of type string includes	1.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	For example we have an array on n elements the divide and conquer splits up the array into equal halves and repeats this process until each element is by itself	4
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	The divide and conquer paradigm divides a problem into smaller and smaller portions that are easier to solve	4.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	Divide elements recur then conquer which works in merge sort and quicksort	4
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	To divide and conquer you divide the program in half once or multiple times to the extent that the program as a whole is easier to work in groups to solve the problem	4.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	to divide one larger string or line of values and sepereate them into smallers lines to easily manipulate them and then replace them in the order in which they should be	3.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	Split the problem into smaller more manageable parts and proceed to address the smaller problems	4.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	dived and conquer is the breaking up of a large complex program into small easy to solve components	4.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	Dividing a larger problem into the smallest incident of the problem and solving the smallest incident	4.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	Break up very large data structures into smaller sub - units that are easier to manipulate	4.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	The divide - and - conquer technique is where it takes the sorting algorithm and breaks up the array into smaller elements of the array to tackle the problem and run the algorithm	4
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	The divide - and - conquer paradigm divides the problem into two pieces and works on each piece separately allowing for a faster approach to 2 separate smaller problems	4.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	The idea is to split the problem into half and solve for the smaller split - problems	4.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	Divide - and - conquer refers to abstraction the act of separating large complex problems into smaller easier problems that can be solved by a relatively simple algorithm	4.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	It takes a large problem and splits it into two or more easier or faster solutions and makes for better readability	4.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	it is the taking of a larger problem and splitting it into simpler smaller problems	4.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	It divides the problem into singular units and works on the problem piece by piece until the problem is solved	4.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	a divide - and - conquer paradigm takes some data divides it into two parts and works on each part indiviually until the item is found	4.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	The idea of divide and conquer is to take a large problem split it into n smaller problems making the program easier to read and modify	4.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	the divide and conquer paradigm is a recursive solution that keeps dividing the problem into halves until a base case is reached	4.5
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	divide the array in half sort each half then sort them back in one array	3
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	You take a class and break down everything it is supposed to do into easily managed functions	3
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	this is shown by the use of cpp and header files by splitting the program up into smaller subsections of individual code it becomes easier to write and keep up with as opposed to having all of your code in one file	3
Briefly describe the divide - and - conquer paradigm	Divide a problem into smaller subproblems solve them recursively and then combine the solutions into a solution for the original problem	it is the separating of large program into smaller classes then until target is reached	3.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	For example we have an array on n elements the divide and conquer splits up the array into equal halves and repeats this process until each element is by itself	4
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	The divide and conquer paradigm divides a problem into smaller and smaller portions that are easier to solve	4.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	Divide elements recur then conquer which works in merge sort and quicksort	4
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	To divide and conquer you divide the program in half once or multiple times to the extent that the program as a whole is easier to work in groups to solve the problem	4.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	to divide one larger string or line of values and sepereate them into smallers lines to easily manipulate them and then replace them in the order in which they should be	3.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	Split the problem into smaller more manageable parts and proceed to address the smaller problems	4.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	dived and conquer is the breaking up of a large complex program into small easy to solve components	4.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	Dividing a larger problem into the smallest incident of the problem and solving the smallest incident	4.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	Break up very large data structures into smaller sub - units that are easier to manipulate	4.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	The divide - and - conquer technique is where it takes the sorting algorithm and breaks up the array into smaller elements of the array to tackle the problem and run the algorithm	4
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	The divide - and - conquer paradigm divides the problem into two pieces and works on each piece separately allowing for a faster approach to 2 separate smaller problems	4.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	Take a problem and divide it into a smaller problem and solve that smaller problem or divide it into a smaller problem and solve it thus solving the whole problem in the process	5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	The idea is to split the problem into half and solve for the smaller split - problems	4.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	The divide and conquer paradigm splits a large problem into simpler problems at which point it solves the simpler problems and merges the simple solutions together to answer the large problem	5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	Divide - and - conquer refers to abstraction the act of separating large complex problems into smaller easier problems that can be solved by a relatively simple algorithm	4.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	It takes a large problem and splits it into two or more easier or faster solutions and makes for better readability	4.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	it is the taking of a larger problem and splitting it into simpler smaller problems	4.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	It divides the problem into singular units and works on the problem piece by piece until the problem is solved	4.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	smaller parts are easier to compare than comparing the whole so it divides the problem down in halves until it can easily compare then works backwards putting it back together to give the solution	5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	a divide - and - conquer paradigm takes some data divides it into two parts and works on each part indiviually until the item is found	4.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	The idea of divide and conquer is to take a large problem split it into n smaller problems making the program easier to read and modify	4.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	the divide and conquer paradigm is a recursive solution that keeps dividing the problem into halves until a base case is reached	4.5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	dividing and conquering means breaking a problem into two smaller problems solving both of those and putting the two solutions together	5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	Divide the big problem into small problem solve small problem and join small solved elements of the problem if there is two ore more elements in the array divide the array into parts and compare the elements after comperison conquer the elements If array have n element first half have n divided by 2 elements	5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	divide the array in half sort each half then sort them back in one array	3
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	You take a class and break down everything it is supposed to do into easily managed functions	3
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	this is shown by the use of cpp and header files by splitting the program up into smaller subsections of individual code it becomes easier to write and keep up with as opposed to having all of your code in one file	3
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	When a problem is too big split it into smaller problems of the same type and solve those then from the solutions of the smaller problem give the solution to the larger original problem	5
Briefly describe the divide - and - conquer paradigm	Divide and coquer means dividing a problem into 2 plus problems which are solved and then merged back together for a final solution to the whole problem	it is the separating of large program into smaller classes then until target is reached	3.5
What is a pointer	The address of a location in memory	A pointer is an alias to an object in memory	4
What is a pointer	The address of a location in memory	its a data type with a memory address and a value	3.5
What is a pointer	The address of a location in memory	its like a variable but only holds an address in meomrry not the physical address	3
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	A variable in memory that hold the address of another memory location to which it points too	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	A pointer is a variable that contains the memory address of a given value	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	A pointer is a variable that stores the address of another variable	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	A pointer is a variable that holds a memory address or location of another variable	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	A data type that points to an address in memory which contains certain information Used for pass - by - reference to save memory	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	a pointer points to a location in memory of a certain data type	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	A pointer is a variable that points to the address location of another variable Represented by - LRB - STAR - RRB -	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	A pointer is a variable that holds the address of a given variable - LRB - and of a given data type - RRB -	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	pointer is a programming data type whose value points to another value stored in computer memory by its address	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	A data type that points to a specific memory address	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	Its like a variable except it only holds the address in memory of the variable not the physical information	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	a pointer is a reference to a memory location	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	A pointer is an alias to an object in memory	4
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	A pointer is a variable that contains a memory address for something that you can use such as a value array or even a function	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	its a data type with a memory address and a value	3.5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	a form of storing data that keeps the location in memory of an data type or object	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	it contains a object memory address	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	variable that contains the memory address of a data object	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	A pointer is an element that references a memory location	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	an object that points to a specific place in memory where a variable or value is stored	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	a variable that stores the address of a memory location	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	A pointer is a variable that points to an address in memory which contains some data The pointer does not contain or point to any data only a memory address	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	Pointer is a variable which have a memory address of a variable	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	a pointer points to a location in memory where data is stored	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	a variable that holds the address of another variable and can access the contents of the variable	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	a pointer is a memory address that points to a data member	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	A data type that stores the memory address of another variable	5
What is a pointer	A variable in memory that hold the address of another memory location to which it points too	its like a variable but only holds an address in meomrry not the physical address	3
How many steps does it take to search a node in a binary search tree	The height of the tree	Given n elements it would take n divided by 2 steps to find the search criteria	1.5
How many steps does it take to search a node in a binary search tree	The height of the tree	Depends on the location of the node you are looking for If it is the root it is one step else If it is smaller than the current you are on node you go to the left If it is larger than the current node you are on go to the right	2
How many steps does it take to search a node in a binary search tree	The height of the tree	2 to the power of n where n is the of levels the binary tree has	2
How many steps does it take to search a node in a binary search tree	The height of the tree	The number of steps to search a node is the function n minus 1	3.5
How many steps does it take to search a node in a binary search tree	The height of the tree	It would take n divided by 2 elements given n	1.5
How many steps does it take to search a node in a binary search tree	The height of the tree	N n being the number of nodes	4
How many steps does it take to search a node in a binary search tree	The height of the tree	3 steps at most There are 3 cases	1.5
How many steps does it take to search a node in a binary search tree	The height of the tree	three steps visit the root node then go to right subtree after visiting right subtree visit left subtree	2.5
How many steps does it take to search a node in a binary search tree	The height of the tree	- LRB - n - LRB - n minus 1 - RRB - - RRB - divided by 2	1.5
How many steps does it take to search a node in a binary search tree	The height of the tree	2n - 1	2.5
How many steps does it take to search a node in a binary search tree	The height of the tree	it depends on the install search tree then from there for whatever the case is the it repeats it back along the case of the primary node	1.5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	Log - LRB - n - RRB - where n is the number of nodes	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	log - LRB - n - RRB - steps	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	The number of levels and the height of the tree	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	It is the same as the height of the tree	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	Given n elements it would take n divided by 2 steps to find the search criteria	1.5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	log n	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	Depends on the location of the node you are looking for If it is the root it is one step else If it is smaller than the current you are on node you go to the left If it is larger than the current node you are on go to the right	2
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	2 to the power of n where n is the of levels the binary tree has	2
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	The number of steps to search a node is the function n minus 1	3.5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	It would take n divided by 2 elements given n	1.5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	log - LRB - n - RRB -	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	O - LRB - log n - RRB -	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	O - LRB - Log - LRB - n - RRB - - RRB -	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	If the binary search tree is constructed efficiently best case scenario is O - LRB - log n - RRB - time Where n is the number of items in the tree If the binary search tree is constructed poorly with for instance the root of the tree being 1 and progressing downwards and to the right its children are each more than the last : you have a one - way linear linked list That worse case scenario would be a full traversal at O - LRB - n - RRB - time Where n is the number of items in the tree	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	N n being the number of nodes	4
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	depending on the way that the tree is ordered it could be anywhere between log - LRB - n - RRB - and N steps	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	log - LRB - n - RRB -	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	worst case scenario equals the number of levels of the tree ie : the node at the farthest position from the root node best case equals 1 step if its the root node	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	3 steps at most There are 3 cases	1.5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	log - LRB - n - RRB - where n equals the total number of nodes in the tree	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	the same number of steps as the number of levels or generations in the tree	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	to find a node in a binary search tree takes at most the same number of steps as there are levels of the tree	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	three steps visit the root node then go to right subtree after visiting right subtree visit left subtree	2.5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	log n	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	- LRB - n - LRB - n minus 1 - RRB - - RRB - divided by 2	1.5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	2n - 1	2.5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	it takes at most h steps where h is the height of the tree	5
How many steps does it take to search a node in a binary search tree	Log - LRB - n - RRB - where n is the number of nodes	it depends on the install search tree then from there for whatever the case is the it repeats it back along the case of the primary node	1.5
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	Try several sets of data on an algorithm that includes worst case best case and random cases Also try and run the same program on a different computer with the same specs	4.5
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	not answered	0
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	time complexity using big O logarthmic O - LRB - log n - RRB - linear O - LRB - n - RRB - exponential O - LRB - n to the power of 2 - RRB - quadratic O - LRB - n to the power of k - RRB - k is greater than or equal to 1 Polynomial O - LRB - a to the power of n - RRB - n is greater than 1	2.5
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	Using some sort of counting principle of the number of operations performed in an algorithm	4.5
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	measuring the relationship of running an algorithm with different input sizes	4.5
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	Oposite of a theoretical assessment of the algorithm to determine runtime but to run the code first to determine the the runtime This is not recommended because it is a limited test It does not include all possibilities of the data nor the hardware used to process the data	4.5
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	not answered	0
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	The experimental approach for measuring the running time is by using the Big O equation which tells you the running time	3
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	keep a value of how many operations it takes and add to this value each time a function is called	3.5
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	BIG - OH	2.5
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	You run a program with different data sizes like 10 to the power of x As you increase x and measure the completion speeds for the program you can find patterns and attempt the measure the running time It is very important to keep the same software and hardware however which makes experimental testing inferior to theoretical in the eyes of most	4
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	to run the program through and see how many times each thing is called and the runtime of each function is based on that	4.5
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	the number of times a specific segments get called per unit work	3
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	For every call into memory add or multiply it into an equation of type O - LRB - n - RRB -	2.5
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	adding a time marker at the before the algorithm is called and another time marker immediately after so that you have the change in time then you can calculate the efficiency by the speed of the computers cpu	3.5
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	Big O - LRB - h - RRB - notation	2.5
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	running an algorithm on a specific set of data	4
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	In experimental terms the running time of an algorithm is measured by the number of operations required to complete the function This number can usually be expressed in big - O notation	3.5
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	run the code for n - times and get average values drop the constant and lowest number for example if f - LRB - x - RRB - equals 3n plus 1 the running time will bef f - LRB - x - RRB - equals O - LRB - n - RRB -	4
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	adding up the number of operations performed based on the worst case possible	2.5
What is the experimental approach for measuring the running time of an algorithm	Implement the algorithm and measure the physical running time	running the input with various inputs measuring the running time with system time	4.5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	Try several sets of data on an algorithm that includes worst case best case and random cases Also try and run the same program on a different computer with the same specs	4.5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	not answered	0
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	time complexity using big O logarthmic O - LRB - log n - RRB - linear O - LRB - n - RRB - exponential O - LRB - n to the power of 2 - RRB - quadratic O - LRB - n to the power of k - RRB - k is greater than or equal to 1 Polynomial O - LRB - a to the power of n - RRB - n is greater than 1	2.5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	Using some sort of counting principle of the number of operations performed in an algorithm	4.5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	measuring the relationship of running an algorithm with different input sizes	4.5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	Oposite of a theoretical assessment of the algorithm to determine runtime but to run the code first to determine the the runtime This is not recommended because it is a limited test It does not include all possibilities of the data nor the hardware used to process the data	4.5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	not answered	0
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	The experimental approach for measuring the running time is by using the Big O equation which tells you the running time	3
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	You create and run the algorithm multiple times while measuring the amount of time it takes you then average the results	5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	keep a value of how many operations it takes and add to this value each time a function is called	3.5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	BIG - OH	2.5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	Running the program with various input data and measuring the running time with system time	5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	You run a program with different data sizes like 10 to the power of x As you increase x and measure the completion speeds for the program you can find patterns and attempt the measure the running time It is very important to keep the same software and hardware however which makes experimental testing inferior to theoretical in the eyes of most	4
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	to run the program through and see how many times each thing is called and the runtime of each function is based on that	4.5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	the number of times a specific segments get called per unit work	3
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	For every call into memory add or multiply it into an equation of type O - LRB - n - RRB -	2.5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	adding a time marker at the before the algorithm is called and another time marker immediately after so that you have the change in time then you can calculate the efficiency by the speed of the computers cpu	3.5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	Big O - LRB - h - RRB - notation	2.5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	the experimental approach measures actual running time in t t equals seconds	5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	running an algorithm on a specific set of data	4
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	In experimental terms the running time of an algorithm is measured by the number of operations required to complete the function This number can usually be expressed in big - O notation	3.5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	run the code for n - times and get average values drop the constant and lowest number for example if f - LRB - x - RRB - equals 3n plus 1 the running time will bef f - LRB - x - RRB - equals O - LRB - n - RRB -	4
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	to measure the actual time of the program to run and calculate the running time using the input and operations done	5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	adding up the number of operations performed based on the worst case possible	2.5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	the experimental approach would be to run through the algorithm and see how long it takes	5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	trying it with different sets of inputs and measuring the amount of time that the algorithm actually takes	5
What is the experimental approach for measuring the running time of an algorithm	Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters	running the input with various inputs measuring the running time with system time	4.5
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	log - LRB - log n - RRB - n to the power of 2 n to the power of 3 2 to the power of - LRB - log n - RRB - n !	4
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	log - LRB - log - LRB - n - RRB - - RRB - n to the power of 2 n to the power of 3 2 to the power of log - LRB - n - RRB - n !	4.125
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	log - LRB - logn - RRB - 2 to the power of - LRB - logn - RRB - n ! n to the power of 3 n to the power of 2	2
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 2; n to the power of 3;	3.75
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	2 to the power of - LRB - log n - RRB - log - LRB - log n - RRB - n ! n to the power of 2 n to the power of 3	1.75
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	log - LRB - log n - RRB - ; n ! ; n to the power of 2; n to the power of 3; n to the power of - LRB - log n - RRB -	2.25
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	2 to the power of - LRB - log n - RRB - log - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	4
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	from lowest to longest log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 2; n to the power of 3;	3.625
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	2 to the power of - LRB - log n - RRB - n to the power of 3 n to the power of 2 log - LRB - log n - RRB - n !	2
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	linear logarithmic exponential linear linear	1.5
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	quickest at top slowest at bottom log - LRB - log n - RRB - n to the power of 2 n to the power of 3 2 to the power of - LRB - log n - RRB - n !	4
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	longest to shortest : n to the power of 3; n ! ; n to the power of 2; 2 to the power of - LRB - log n - RRB - ; log - LRB - log n - RRB -	3
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	2 to the power of - LRB - log n - RRB - n to the power of 2 to the power of 3 log - LRB - long n - RRB - n !	3.25
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	log - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n ! ; 2 to the power of - LRB - log n - RRB -	4.125
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	n to the power of 2; n ! ; n to the power of 3; 2 to the power of - LRB - log n - RRB - ; log - LRB - log n - RRB -	2.25
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	log - LRB - long n - RRB - 2 to the power of - LRB - log n - RRB - ; n to the power of 2 n to the power of 3;	4.75
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	5
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	log - LRB - log n - RRB - n to the power of 2 n to the power of 3 2 to the power of - LRB - log n - RRB - n !	4
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	log - LRB - logn - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	5
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	5
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	5
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	log - LRB - log - LRB - n - RRB - - RRB - n to the power of 2 n to the power of 3 2 to the power of log - LRB - n - RRB - n !	4.125
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	log - LRB - logn - RRB - 2 to the power of - LRB - logn - RRB - n ! n to the power of 3 n to the power of 2	2
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 2; n to the power of 3;	3.75
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	this goes from largest to smallest : n ! n to the power of 3 n to the power of 2 2 to the power of - LRB - log n - RRB - log - LRB - log n - RRB -	5
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n !	5
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	2 to the power of - LRB - log n - RRB - log - LRB - log n - RRB - n ! n to the power of 2 n to the power of 3	1.75
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	log - LRB - log n - RRB - ; n ! ; n to the power of 2; n to the power of 3; n to the power of - LRB - log n - RRB -	2.25
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	From least to greatest : log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	5
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - is just n n to the power of 2 n to the power of 3 n !	5
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	2 to the power of - LRB - log n - RRB - log - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	4
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	from lowest to longest log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 2; n to the power of 3;	3.625
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	log - LRB - log - LRB - n - RRB - - RRB - 2 to the power of log - LRB - n - RRB - n to the power of 2 n to the power of 3 n !	5
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	5
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	2 to the power of - LRB - log n - RRB - n to the power of 3 n to the power of 2 log - LRB - log n - RRB - n !	2
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	linear logarithmic exponential linear linear	1.5
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	quickest at top slowest at bottom log - LRB - log n - RRB - n to the power of 2 n to the power of 3 2 to the power of - LRB - log n - RRB - n !	4
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	longest to shortest : n to the power of 3; n ! ; n to the power of 2; 2 to the power of - LRB - log n - RRB - ; log - LRB - log n - RRB -	3
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	2 to the power of - LRB - log n - RRB - n to the power of 2 to the power of 3 log - LRB - long n - RRB - n !	3.25
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	from lowest to highest 1 - long - LRB - long n - RRB - 2 minus 2 to the power of log - LRB - n - RRB - 3 minus n to the power of 2 4 minus N to the power of 3 5 minus n !	5
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	log - LRB - log n - RRB - ; n to the power of 2; n to the power of 3; n ! ; 2 to the power of - LRB - log n - RRB -	4.125
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	n to the power of 2; n ! ; n to the power of 3; 2 to the power of - LRB - log n - RRB - ; log - LRB - log n - RRB -	2.25
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	worst to best : n ! n to the power of 3 n to the power of 2 2 to the power of - LRB - log n - RRB - log - LRB - log n - RRB -	5
Order the following functions by their running time : n to the power of 2; log - LRB - log n - RRB - ; 2 to the power of - LRB - log n - RRB - ; n ! ; n to the power of 3	log - LRB - log n - RRB - 2 to the power of - LRB - log n - RRB - n to the power of 2 n to the power of 3 n !	log - LRB - long n - RRB - 2 to the power of - LRB - log n - RRB - ; n to the power of 2 n to the power of 3;	4.75
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	Compare the largest element to the front element and swap data according to value if needed	4
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	Selection sort is a sorting algorithm that divides a list in half and has two lists It then compares the first elements in both these lists and puts these elements in another list having the smaller element before the bigger one	2
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	Selection sort works by finding the smallest element and then compares it with the largest and sorts the elements	2
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	Selection sort is usually a recursive sorting method where you divide the elements to be sorted in half repeatedly You then sort the smallest case then work your way up sorting each until they are all sorted	2.5
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	goes to the middle of the list checks to see if it is greater or less then the value given and moves through the list accordingly to add the value into the proper place	2
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	selection sort finds the lowest element in the data set and places it behind the pivot point	4.5
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	Selection sort iterates through the array one element at a time seeking the least value from the right and replacing the current value with it	4.5
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	it runs through the list and finds the smallest - LRB - or largest - RRB - value and puts it at the appropriate position	4.5
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	pick a number and set all values less than that number to the left while all numbers on the right of that number is larger	3
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	It takes the largest item in the unsorted array and swaps it with last item in the unsorted array	4.5
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	by selecting the first object and comparing it with the next objects to find one that is smaller if it does it switches the two then it comes back the other way and sees if the objects previous to the last one is greater if it does it switches them it does this while decreasing the range it looks at until it finishes in the middle	2.5
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	Selection sorts works by going through a certain list Goes through the unsorted list and selecting the largest item in the list and placing it in a sorted array There are two arrays unsorted and sorted Complete these steps until the list is sorted	4.5
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	selection sort works by pulling all of the values off to the side leaving one value in the list It will then insert a value into the list if the value is bigger it will go to the right if smaller if will go to the left	2.5
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	selection sort searches for the smallest element of the remaining data organization and places it at the largest point of the new data organization	4.5
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	select an element compare it with 2nd element if it is greater swap it	3
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	it selects the smallest element in a list and switches it with the element in its correct position then it selects the next smallest and does the same	4.5
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	It starts at the first element and replaces it with the smallest element found to the right It then repeats with the next element in the list	4.5
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	selection sort is when you pick a data member and put it in a new array then you pick another data member and put it in order with the new array then pick another and insert it in the correct place in the new array etc etc	3
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	it searches through the entire data set for the best element to go in the current position then it moves up a position and searches through the remainder of the set for the best element for the new position	4
Briefly how does selection sort work	It selects the minimum from an array and places it on the first position then it selects the minimum from the rest of the array and places it on the second position and so forth	selection sort iterates through the array one element a time searching for the right and replacing current value with it	4
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	Selection sort searches the array for the lowest value and swaps it with the first value in the array Then searches for the next lowest value and swaps it with the second item in the array and so on	5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	Compare the largest element to the front element and swap data according to value if needed	4
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	Selection sort is a sorting algorithm that divides a list in half and has two lists It then compares the first elements in both these lists and puts these elements in another list having the smaller element before the bigger one	2
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	Iterate through the list - LRB - assume list of integers - RRB - find the smallest one and put it in a separate sorted list then traverse again and find the next smallest and move it to the sorted section and repeat until you run out of elements to sort	5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	selection sort selects the smallest element out of the list then the second smallest and sorts them acordingly	5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	You select the smallest element and place it on the left You select the smallest element and sort it with respect the the item already on the left You continue this till the end of the collection of items	5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	A selection sort scrolls through the data structure looking for the lowest - LRB - or highest - RRB - unsorted piece of data moves it to the held spot increments that spot by one and starts the process over	5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	Selection sort works by finding the smallest element and then compares it with the largest and sorts the elements	2
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	Selection sort is usually a recursive sorting method where you divide the elements to be sorted in half repeatedly You then sort the smallest case then work your way up sorting each until they are all sorted	2.5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	goes to the middle of the list checks to see if it is greater or less then the value given and moves through the list accordingly to add the value into the proper place	2
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	selection sort finds the lowest element in the data set and places it behind the pivot point	4.5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	Selection sort iterates through the array one element at a time seeking the least value from the right and replacing the current value with it	4.5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	Selection sort traverses an unsorted array looking for the smallest value when it is found it is put at the beginning of the unsorted array Performed several times this will output a sorted array	5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	it runs through the list and finds the smallest - LRB - or largest - RRB - value and puts it at the appropriate position	4.5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	pick a number and set all values less than that number to the left while all numbers on the right of that number is larger	3
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	It takes the largest item in the unsorted array and swaps it with last item in the unsorted array	4.5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	by selecting the first object and comparing it with the next objects to find one that is smaller if it does it switches the two then it comes back the other way and sees if the objects previous to the last one is greater if it does it switches them it does this while decreasing the range it looks at until it finishes in the middle	2.5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	Selection sorts works by going through a certain list Goes through the unsorted list and selecting the largest item in the list and placing it in a sorted array There are two arrays unsorted and sorted Complete these steps until the list is sorted	4.5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	selection sort works by pulling all of the values off to the side leaving one value in the list It will then insert a value into the list if the value is bigger it will go to the right if smaller if will go to the left	2.5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	selection sort searches for the smallest element of the remaining data organization and places it at the largest point of the new data organization	4.5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	Selection sort sorts an array one element at at time It first finds the element with the smallest key and puts it into the first location within its array or list then finds the next smallest and puts it in the second location and so on	5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	select an element compare it with 2nd element if it is greater swap it	3
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	it selects the smallest element in a list and switches it with the element in its correct position then it selects the next smallest and does the same	4.5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	It starts at the first element and replaces it with the smallest element found to the right It then repeats with the next element in the list	4.5
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	selection sort is when you pick a data member and put it in a new array then you pick another data member and put it in order with the new array then pick another and insert it in the correct place in the new array etc etc	3
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	it searches through the entire data set for the best element to go in the current position then it moves up a position and searches through the remainder of the set for the best element for the new position	4
Briefly how does selection sort work	it scans the list and selects the smallest - LRB - largest - RRB - element and places it in the front increment the curPtr by one scan the list again for the next smallest - LRB - largest - RRB - element and place it in with respect with the other sorted elements	selection sort iterates through the array one element a time searching for the right and replacing current value with it	4
What is the advantage of linked lists over arrays	Linked lists are dynamic structures which allow for a variable number of elements to be stored	Inserts into a linked list are far cheaper than an insert into an array With an array all items after the one being inserted must me shifted with a linked list only the pointers are replaced	4.5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	A link list can grow to a infinite size as a array has a fixes size	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	The advantage of linked lists is that they are not limited in size like arrays	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	link lists dont have a fixed size	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	Linked Lists can be of variable size where arrays have fixed size	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	Linked lists do not have a definite size They can be as big or as small as needed and they do not have to allocate extra memory for elements you do not need Arrays size must be defined	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	a linked list has a dynamic size but an array only has a fixed size and takes allot of extra operations to increase its size	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	You do not have to predetermine your list size as you do with arrays Linked list have the ability to be as large as you want them adding memory as needed	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	The main advantage to a linked list is that it can have it is size adjusted during runtime	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	Linked lists are able to grow in size So elements can be added to the list	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	Linked lists are not confined to a specific size and can have elements added and removed far easier They are also easier to traverse	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	There is no predetermined length	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	Inserts into a linked list are far cheaper than an insert into an array With an array all items after the one being inserted must me shifted with a linked list only the pointers are replaced	4.5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	Linked lists may be dynamically grown	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	Linked lists are very dynamic in that they can change and be added or subtracted to very easily because they are not linear in memory Arrays are pre - specified in size to be cast over a certain amount of disk space This makes insertion into Arrays difficult because all elements must be shifted and if you reach the end of the array you are done even if you have more data to input Linked Lists do not run into these problems	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	linked lists have an indefinite size whereas arrays are a specific size	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	Linked lists have no predefined length and thus you can have virtually unlimited items in that list	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	They grow dynamically unlike the fixed size array	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	you can add as many nodes as you like without having to specify a list size if an array gets too big you have to copy its entire contents to another larger array to get more room	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	Linkded list does not have a fixed size Arrays have a fixed size	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	Linked lists have a dynamic size where as arrays have a static size	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	linked lists do not have a memory constraint other than total memory	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	The primary advantage of linked lists over arrays is their ability to become larger or smaller as data is added and removed from the list whereas arrays may waste memory for small data sets and run out of space for large data sets	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	Array have fixed size in Link List are flexible for adding or deleting an element	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	they are resizeable	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	Linked lists can be dynamically allocated and their size can change as needed	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	linked lists do not have to have a specified size they are easier to add to and remove from	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	they dont have a fixed size no shiftnig needs to be done for insertion or deletion	5
What is the advantage of linked lists over arrays	A link list can grow to a infinite size as a array has a fixes size	linked list many be dynamically grown It has not limit	5
What is a queue	A data structure that stores elements following the first in first out principle The main operations in a queue are enqueue and dequeue	First in first out	4.5
What is a queue	A data structure that stores elements following the first in first out principle The main operations in a queue are enqueue and dequeue	It is a particular set of entities that are put in to a certain order by the enqueue and the dequeue functions	3.5
What is a queue	A data structure that stores elements following the first in first out principle The main operations in a queue are enqueue and dequeue	A queue is a data type that operates under a FILO - LRB - First In Last Out - RRB - method This means that the first element inserted into the queue is the first element removed	4
What is a queue	A data structure that stores elements following the first in first out principle The main operations in a queue are enqueue and dequeue	like a linked list except it is first in last out	2.5
What is a queue	A data structure that stores elements following the first in first out principle The main operations in a queue are enqueue and dequeue	like a linked list expect first in last out	1.5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	A queue is an abstract data type that performs operations on both ends of the list and exhibits first - in first - out behavior	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	First in first out	4.5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	A queue is an abstract data type that involves putting an element at the back of the list Queues use the FIFO first in first out idea where the first element in the list is the first that comes out	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	A data structure that implements first in first out The element that has been there the longest is the first to get served	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	a data structure that inserts elements at the end of it and removes elements from the front	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	A queue is a collection of elements with the characteristics of first in first out - LRB - FIFO - RRB - The first item in is the first item out All additional items are added to the end of the list	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	A queue is a data structure that inserts data into a FIFO configuration that is data input to the structure is always at it is end and data taken is always from the beginning	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	It is a particular set of entities that are put in to a certain order by the enqueue and the dequeue functions	3.5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	A queue is a data type that operates under a FILO - LRB - First In Last Out - RRB - method This means that the first element inserted into the queue is the first element removed	4
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	like a linked list except it is first in last out	2.5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	A queue is like a stack except it follows FIFO - LRB - First in first out - RRB -	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	A queue is a data structure where the first node in is the first node out	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	A queue is a First in First out data structure much like a line for a movie theatre The first object in line is the first object to be handled or enacted upon	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	its a lot like a stack except that the first item put into the list is the first item to be taken from the list	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	a first in first out list of items like if you put 5 4 3 2 and 1 in the queue it will when you dequeue items remove the items in the same order as put in so thus it will put out 5 4 3 2 and 1 in that exact order	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	A linked list with a First In Out structure dequeue at the head of the list enqueue at the end of the list	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	a list of objects that follow the rule first in first out essentially a linked list that goes in order of the first object in the list is the first to be taken off	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	A queue is an abstract data type that is based off of the priniple of first in first out FIFO The first item inserted into the list will the first item taken out	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	It is a first in first out data structure It can be implemented with either a linked list or an array	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	an ordered list that performs task in the order of first in first out adding items to the queue places items behind the rest of them taking items off the queue takes the one that has waited the longest	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	A queue is a linear first - in first - out data structure Data must be accessed in the same order it was put into the queue so only the oldest item in the queue is accessible at any time Main functions defined are enqueue and dequeue	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	Queue is a buffer it follows the rule of First In and First out Queue is very useful in computer science for scheduleing	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	a queue is a set of elements where the first element inserted is the first element to be removed	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	Is a list of items where the the user only has access to the first element and each new element is added at the end	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	a queue is a list of data that follows the fifo principle an example of this would be when you get into a line at a movie theater the first one there gets to buy a ticket first	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	A queue is a data structure that holds a set of objects which has a FIFO - LRB - first in first out - RRB - priority	5
What is a queue	A data structure in C plus plus where the the first element in the queue is the first element taken out of the queue	like a linked list expect first in last out	1.5
What are the main operations associated with a stack	push and pop	push pop search isEmpty	4.5
What are the main operations associated with a stack	push and pop	push and pop	5
What are the main operations associated with a stack	push and pop	Pop which removes the head or least recently inserted node from the stack Push which inserts a new node at the head of the stack	5
What are the main operations associated with a stack	push and pop	Push and pop	5
What are the main operations associated with a stack	push and pop	The Push function and the Pop function	5
What are the main operations associated with a stack	push and pop	push and pop	5
What are the main operations associated with a stack	push and pop	push puts an element on the stack pop - takes an element off the stack	5
What are the main operations associated with a stack	push and pop	Push and pop	5
What are the main operations associated with a stack	push and pop	Push and Pop	5
What are the main operations associated with a stack	push and pop	push and pop	5
What are the main operations associated with a stack	push and pop	Push and Pop Push adds an element to the stack while Pop removes the top element from a stack	5
What are the main operations associated with a stack	push and pop	pop and push	5
What are the main operations associated with a stack	push and pop	push pop search isEmpty	4.5
What are the main operations associated with a stack	push and pop	push and pop	5
What are the main operations associated with a stack	push and pop	Push Pop isEmpty isFull Maybe List to show all elements or an operation to count how many elements in the stack	5
What are the main operations associated with a stack	push and pop	pop push	5
What are the main operations associated with a stack	push and pop	isempty push and pop along with usually	5
What are the main operations associated with a stack	push and pop	push and pop	5
What are the main operations associated with a stack	push and pop	push and pop push puts objects into the stack and pop takes them out following the first in last out rule	5
What are the main operations associated with a stack	push and pop	The main operations in a stack are push and pop Push adds an item to the top of the stack pop removes the top item from the stack	5
What are the main operations associated with a stack	push and pop	push and pop	5
What are the main operations associated with a stack	push and pop	push which adds an item to the top of the stack and pop which takes the first item off the top to the stack	5
What are the main operations associated with a stack	push and pop	the main functions defined for a stack are push which puts an element on the top of the stack and pop which removes an item from the top	5
What are the main operations associated with a stack	push and pop	Push - LRB - - RRB - Pop - LRB - - RRB - Full - LRB - - RRB - IsEmpty - LRB - - RRB -	5
What are the main operations associated with a stack	push and pop	pop and push to remove an element and to insert an element	5
What are the main operations associated with a stack	push and pop	Push Pop	5
What are the main operations associated with a stack	push and pop	push and pop	5
What are the main operations associated with a stack	push and pop	push Add an element to the top of the stack pop remove the top element from the stack	5
What are the main operations associated with a stack	push and pop	push and pop	5
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	When you traverse a tree of any size you will visit each node three times Its on the order of 3n or O - LRB - n - RRB - running time	4
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	Where you visit the in order according to its data value	3
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	It is a tree that shows how it functions It contains parents children siblings ancestors and descendents The use of tree type algorithm is also an alternative sorting algorithm	2
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	Start from the root circle around the whole tree naming each node as you see it	4.5
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	it is where you visit the parent then you vistit the children	1.5
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	To start from the root traveling left and visiting ever child along the way till you return to the root from the right	4
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	Traversing a tree down to it is terminal child and then all of it is siblings then it traverses up the terminal child parent and all of it is siblings - LRB - repeating the first step if those siblings have children - RRB - until the root node has been visited	4
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	The Euler tour traversal of a tree the function that iteratively keeps track of the pointer on each node	3
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	You travel the outside edge of the tree clockwise while naming each node	4
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	children to root	2
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	go to the bottom of the left sub tree and visit the parent and then its children	3
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	The Euler tour traverses through the tree in a rubber - band style shape	3.5
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	The Euler tour traversal of a tree is a specific way of navigating a tree that involves following the tree starting at the very top and moving along the left side of the tree first cupping in to visit the parents of children nodes It allows for each node to be visited from the left the right and the bottom The Euler tour first progresses to a left child if there is one then progresses to it is parent then it is next child then it is parent parent	4.5
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	it runs through the parents and the children in order	3
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	it starts node on the left of the root and then proceeds to visits each node in a left to right order visits the root and then proceeds to repeat the previous step on the right side of the tree	3.5
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	Travel from the root to the farthest left child Backup travel the leftmost children in the right side repeat until reaching the rightmost child	4.5
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	has preorder in order and postorder of a tree preorder equals puts the parent node in front of the child node - LRB - s - RRB - in order equals puts the parent node between the left child and right child node - LRB - s - RRB - postorder equals puts the parent node after the child node - LRB - s - RRB -	3.5
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	The Euler traveral is when you go through a tree looking for nodes to put in the order of left root right Like inOrder traversal	4
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	Euler tour traversal of a tree traverses down each branch straight to one leaf then starts again at the root and repeats until all elements have been traversed	4
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	The Euler tour visits every node in a tree starting with the root and working around the tree counterclockwise in - order post - order and pre - order traversals can be seen as variations of the Euler tour traversal	4.5
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	not answered	0
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	traversing a tree level by level	1.5
What is the Euler tour traversal of a tree	A walk around the tree starting with the root where each node is seen three times : from the left from below from the right	The Euler traversal through the tree in a rubber band style shape	3.5
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	When you traverse a tree of any size you will visit each node three times Its on the order of 3n or O - LRB - n - RRB - running time	4
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	5
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	Where you visit the in order according to its data value	3
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	It is a tree that shows how it functions It contains parents children siblings ancestors and descendents The use of tree type algorithm is also an alternative sorting algorithm	2
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	Start from the root circle around the whole tree naming each node as you see it	4.5
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	it is where you visit the parent then you vistit the children	1.5
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	To start from the root traveling left and visiting ever child along the way till you return to the root from the right	4
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	Traversing a tree down to it is terminal child and then all of it is siblings then it traverses up the terminal child parent and all of it is siblings - LRB - repeating the first step if those siblings have children - RRB - until the root node has been visited	4
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	The Euler tour traversal of a tree the function that iteratively keeps track of the pointer on each node	3
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	You travel the outside edge of the tree clockwise while naming each node	4
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	children to root	2
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	go to the bottom of the left sub tree and visit the parent and then its children	3
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	The Euler tour traverses through the tree in a rubber - band style shape	3.5
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	The Euler tour traversal of a tree is a specific way of navigating a tree that involves following the tree starting at the very top and moving along the left side of the tree first cupping in to visit the parents of children nodes It allows for each node to be visited from the left the right and the bottom The Euler tour first progresses to a left child if there is one then progresses to it is parent then it is next child then it is parent parent	4.5
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	it runs through the parents and the children in order	3
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	it starts node on the left of the root and then proceeds to visits each node in a left to right order visits the root and then proceeds to repeat the previous step on the right side of the tree	3.5
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	Travel from the root to the farthest left child Backup travel the leftmost children in the right side repeat until reaching the rightmost child	4.5
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	has preorder in order and postorder of a tree preorder equals puts the parent node in front of the child node - LRB - s - RRB - in order equals puts the parent node between the left child and right child node - LRB - s - RRB - postorder equals puts the parent node after the child node - LRB - s - RRB -	3.5
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	The Euler traveral is when you go through a tree looking for nodes to put in the order of left root right Like inOrder traversal	4
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	An Euler traversal is a traversal that begins with the root and travels around the outside of the tree Each element in the tree is visited 3 times From the left from the bottom and from the right	5
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	Euler tour traversal of a tree traverses down each branch straight to one leaf then starts again at the root and repeats until all elements have been traversed	4
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	The Euler tour visits every node in a tree starting with the root and working around the tree counterclockwise in - order post - order and pre - order traversals can be seen as variations of the Euler tour traversal	4.5
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	not answered	0
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	to traverse going down to the left then go to the right of last children and back to the top kind of like going around the tree	5
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	You recursively visit every node on the list You visit the node from the left the bottom and from the right	5
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	the euler tour is a way to traverse a tree where you come into contact with each node three times from the left from the right and from the bottom	5
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	traversing a tree level by level	1.5
What is the Euler tour traversal of a tree	The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left then bottom then right sides	The Euler traversal through the tree in a rubber band style shape	3.5
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	if root set root to NULL else if deleting right leaf set rightPtr of parent node to NULL else if deleting left leaf set leftPtr of parent node to NULL else if deleting a left or right subtree child node set the max leaf child in the left subtree as the new child node	4.5
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	Traverse the tree and find the node if the node has no children simply delete it; otherwise set the node data equal to the data of one of its children then set the pointer for that child to NULL	3.5
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	first attaching the elements from the node to be deleting to alternate nodes and then deleting that node delete node;	3.5
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	If you delete a node from a tree you have to link that nodes parents to the children of that node	3.5
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	Must delete the information that the node contains - LRB - to free up memory or garbage collect - RRB - and also delete the pointer - LRB - in that node parent - RRB - that points to the node you wish to delete	2
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	You traverse the tree till you find the node you are wanting to delete If the node has no children you delete it If the node has children before you delete you find the left - most of its children and attach it to the root then you can delete the node	4
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	Link the to - be - deleted left child to the to - be - deleted parent left child pointer	4.5
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	The way you delete a node from a binary search tree is first you have take the root and then see the nodes that are coming from the root And delete the nodes and set the root to NULL	2
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	You remove the element from the tree and move the next highest element from the left into its place	4.5
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	delete node;	1.5
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	In a binary search tree you must first establish a proper replacement for the node you are about to delete usually a child from the soon to be deleted node Once that replacement node has been found you simply reassign it to where the node that is going to be deleted is After the deleted node has been usurped you remove the deleted node from memory so it may be used again	4
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	It all depends on where the node is located If its a child it can just be deleted but for a node inside the tree it must be replaced with another node that works in its place	3.5
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	Create a temp Node Set temp values to the Node after head or NULL in the case of only head Node in the list Set head equal to temp Delete temp	2
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	by searching down the tree until you find the node and replacing the link to that node with the greatest child node on the left subtree or the least child node on the right subtree	4.5
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	Set the nodes to NULL where that it does not point to anything and the use the DELETE opertator to clear space from memory	1.5
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	You must first traverse the tree to find the appropriate value Then you must make sure that the node is a leaf node If it is then you can delete the pointer to that specific node	3
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	if the node is a leaf it can simply be deallocated or deleted from memory and its parent reference to it changed to NULL If the node has a single child the pointer to it should be made to point to its child before deleting the node Should the node have two children the easiest solution may be to copy the node entire subtree to a new array or tree delete the node and all descendants then add the elements taken from the subtree back into the main tree	4.5
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	not answered	0
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	you cannot delete a node because that can cause a node to have more than 2 children	1.5
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	You search the tree for the node using recursion When you find the node you determine whether it is a leaf or a internal node If it is a leaf you just delete it and set the parent pointer to that node to NULL If it is a node you replace the node with either of the children nodes	4
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	to delete the node you would have to link the children nodes that are connected to the node to be deleted to the remaining nodes of the tree in such a way that nodes on the right of the parent node are larger than the parent and nodes on the left of the parent node are smaller	4
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	if it has no children you just delete it if it only has one child just replace the node with whichever child it has if it has both children replace it with one of its children and send the other child down along the other side of the new node	4
How do you delete a node from a binary search tree	Find the node then replace it with the leftmost node from its right subtree - LRB - or the rightmost node from its left subtree - RRB -	pointer to the child and delete it has 2 children set the node to the child and delete it the node to th middle will then take its place	3
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	if root set root to NULL else if deleting right leaf set rightPtr of parent node to NULL else if deleting left leaf set leftPtr of parent node to NULL else if deleting a left or right subtree child node set the max leaf child in the left subtree as the new child node	4.5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	Traverse the tree and find the node if the node has no children simply delete it; otherwise set the node data equal to the data of one of its children then set the pointer for that child to NULL	3.5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	first attaching the elements from the node to be deleting to alternate nodes and then deleting that node delete node;	3.5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	If you delete a node from a tree you have to link that nodes parents to the children of that node	3.5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	Must delete the information that the node contains - LRB - to free up memory or garbage collect - RRB - and also delete the pointer - LRB - in that node parent - RRB - that points to the node you wish to delete	2
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	You traverse the tree till you find the node you are wanting to delete If the node has no children you delete it If the node has children before you delete you find the left - most of its children and attach it to the root then you can delete the node	4
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	Link the to - be - deleted left child to the to - be - deleted parent left child pointer	4.5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	The way you delete a node from a binary search tree is first you have take the root and then see the nodes that are coming from the root And delete the nodes and set the root to NULL	2
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	You remove the element from the tree and move the next highest element from the left into its place	4.5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	delete node;	1.5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	the deletion of a node depends upon if it has children and if it is an AVL binary search tree Assuming it is not an AVL tree and the node being deleted has no children you just set its pointer to null If it has a left child or a right child exclusively that child replaces the deleted node if it has two children the left most child of the right sub tree - LRB - or right most child of the left subtree - RRB - will replace it	5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	If the node is a leaf just set it is parent pointer to null and delete it if it has a single child set the parent pointer to the child and delete; if it has two children set the node to one of the middle children and remove that child from its previous position as a leaf - LRB - rightmost child of the left subtree or leftmost child of the right subtree - RRB -	5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	In a binary search tree you must first establish a proper replacement for the node you are about to delete usually a child from the soon to be deleted node Once that replacement node has been found you simply reassign it to where the node that is going to be deleted is After the deleted node has been usurped you remove the deleted node from memory so it may be used again	4
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	It all depends on where the node is located If its a child it can just be deleted but for a node inside the tree it must be replaced with another node that works in its place	3.5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	if the node has no children delete it right away otherwise put either the furthest right node on the left side or the furthest left node on the right side in that place and perform a the above on that node to guarantee that it is children get handled properly	5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	Create a temp Node Set temp values to the Node after head or NULL in the case of only head Node in the list Set head equal to temp Delete temp	2
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	by searching down the tree until you find the node and replacing the link to that node with the greatest child node on the left subtree or the least child node on the right subtree	4.5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	Set the nodes to NULL where that it does not point to anything and the use the DELETE opertator to clear space from memory	1.5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	You must first traverse the tree to find the appropriate value Then you must make sure that the node is a leaf node If it is then you can delete the pointer to that specific node	3
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	if the node is a leaf you set it is parent pointer to null if the node is in the tree you must replace the node with one in the tree : either the largest in the left of the tree or the smallest in the right of the tree this can be done recursively if needed	5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	if the node is a leaf it can simply be deallocated or deleted from memory and its parent reference to it changed to NULL If the node has a single child the pointer to it should be made to point to its child before deleting the node Should the node have two children the easiest solution may be to copy the node entire subtree to a new array or tree delete the node and all descendants then add the elements taken from the subtree back into the main tree	4.5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	not answered	0
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	you cannot delete a node because that can cause a node to have more than 2 children	1.5
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	You search the tree for the node using recursion When you find the node you determine whether it is a leaf or a internal node If it is a leaf you just delete it and set the parent pointer to that node to NULL If it is a node you replace the node with either of the children nodes	4
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	to delete the node you would have to link the children nodes that are connected to the node to be deleted to the remaining nodes of the tree in such a way that nodes on the right of the parent node are larger than the parent and nodes on the left of the parent node are smaller	4
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	if it has no children you just delete it if it only has one child just replace the node with whichever child it has if it has both children replace it with one of its children and send the other child down along the other side of the new node	4
How do you delete a node from a binary search tree	you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree	pointer to the child and delete it has 2 children set the node to the child and delete it the node to th middle will then take its place	3
What is typically included in a class definition	Data members - LRB - attributes - RRB - and member functions	For us it is usually a set get and displayMessge or other messages that tell you what properties a class has but does not reveal its implementations You could have anything you want in your own class definition	2
What is typically included in a class definition	Data members - LRB - attributes - RRB - and member functions	The attributes of said class Also whether or not it is a subclass Also whether it is public private or protected	4
What is typically included in a class definition	Data members - LRB - attributes - RRB - and member functions	An object and data	2
What is typically included in a class definition	Data members - LRB - attributes - RRB - and member functions	It is specific class name includes only information defined by that class implementation details etc	3
What is typically included in a class definition	Data members - LRB - attributes - RRB - and member functions	member functions	3.5
What is typically included in a class definition	Data members - LRB - attributes - RRB - and member functions	a public and private area that includes the functions and variables that are used in the class	4.5
What is typically included in a class definition	Data members - LRB - attributes - RRB - and member functions	the keyword class followed by they class name on the inside you declare public and private declarations of your class	3.5
What is typically included in a class definition	Data members - LRB - attributes - RRB - and member functions	A class definition typically includes function definitions	3
What is typically included in a class definition	Data members - LRB - attributes - RRB - and member functions	the data and methods	4.5
What is typically included in a class definition	Data members - LRB - attributes - RRB - and member functions	A constructor functions and variables that are accessible to by that class and possibly other classes depending on how they are done	4.5
What is typically included in a class definition	Data members - LRB - attributes - RRB - and member functions	public section and private section and there must be a semicolon to set the end	2.5
What is typically included in a class definition	Data members - LRB - attributes - RRB - and member functions	the class name and its public data types such as constructors methods functions	3.5
What is typically included in a class definition	Data members - LRB - attributes - RRB - and member functions	a constructor and several data members and at least one public data member or method	4.5
What is typically included in a class definition	Data members - LRB - attributes - RRB - and member functions	class name two curly prenthesis public and private	2
What is typically included in a class definition	Data members - LRB - attributes - RRB - and member functions	Data and functions	4.5
What is typically included in a class definition	Data members - LRB - attributes - RRB - and member functions	A class is an expanded concept of a data structure it holds both the data and the functions being executed	4.5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	For us it is usually a set get and displayMessge or other messages that tell you what properties a class has but does not reveal its implementations You could have anything you want in your own class definition	2
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	The attributes of said class Also whether or not it is a subclass Also whether it is public private or protected	4
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	Information telling the compiler what data members and member functions belong to the class	5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	Since class is user defined the body of the declaration can contain members that can be either data or function declarations and optionally access specifiers Example for specifiers would be public private and protected There is the keyword Class and the Class body is enclosed with brackets - LRB - - RRB -	5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	An object and data	2
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	It is specific class name includes only information defined by that class implementation details etc	3
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	data members and member functions	5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	A class definition usually contains the function and its data members	5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	Data members and member functions	5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	member functions	3.5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	Member functions and data members belonging to the class	5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	a public and private area that includes the functions and variables that are used in the class	4.5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	the keyword class followed by they class name on the inside you declare public and private declarations of your class	3.5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	A class definition typically includes function definitions	3
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	It begins with Class followed by the class name then usually a constructor data members and member functions that delineates the class is included in any class definition	5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	the data and methods	4.5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	A constructor functions and variables that are accessible to by that class and possibly other classes depending on how they are done	4.5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	Member functions and data members	5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	public section and private section and there must be a semicolon to set the end	2.5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	member funtions and data members	5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	Data members and Member functions	5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	data members and member functions	5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	the class name and its public data types such as constructors methods functions	3.5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	a constructor and several data members and at least one public data member or method	4.5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	class name two curly prenthesis public and private	2
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	data members and member functions	5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	Data and functions	4.5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	functions and data members that belong to the class	5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	class variables function definitions for the class	5
What is typically included in a class definition	Information telling the compiler what data members and member functions belong to the class	A class is an expanded concept of a data structure it holds both the data and the functions being executed	4.5
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	Data members are the data components of a particular class A member function are the functioning components of the class	3
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	A field variable is a variable that is declared as a member of a class A local variable is avariable that isdeclared local to a method	2.5
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	Data members are declared inside the class but outside of any member functions Unlike with local variables each object of the class keeps its own copy of the data members stored in memory	4.5
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	Data member are variables that represent an attribute in a class definition Local variables declared in a function body cannot be used outside of that function body When a function terminates the values of its local variables are lost	4.5
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	A data member is part of a C plus plus class or structure that stores data of a certain type A local variable inside a member function is only available inside that function and can be used to derive a desired outcome	4.5
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	A local variable can only be accessed within the scope of its declaration	3.5
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	Data members are the atributes of the function and can be used outside the function Local variable can not be used outside the function and the value is lost after the function terminates	4.5
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	data members are permanent attributes of the class local variables inside a member function are lost when the scope of the member function ends	4
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	data members are declared in a class definition but outside the bodies of a class member - function definitions Local variables are declared in a function definition body	4
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	A data member is globally accessible while a local variable is only accessible inside the member function	4.5
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	Local variables are used only within the scope of its declaration	4.5
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	A data member is a more general term describing all objects instantiated within a member function Local in local variables refers more to the scope of a variable which may be located in anything from a control structure to a class Local variables whose scope are in a member function are the same as data members of member functions	2
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	A data member exists permanently in that program memory as long as it is run A local variable inside a member function is temporal and only used to operate in the function and exists as long as the function is run	3.5
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	The local variable is lost once it exits the block of code while the data member is not	4.5
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	Every member function can access and modify a data member A local variable can only be used from the line of declaration to the next closing before it is lost from memory	4.5
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	Data members are variables that are declared inside the class definition but outside of the bodies of the class member functions Local variables can only be used within the function declaration	4.5
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	The data member can be accessed outside of the class whereas the local variable cannot	4
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	a local variable in a member function has to be static a data member can change its value freely	2
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	data members local variables are declared in a function definition s body they Cannot be used outside of that function body When a function terminates the values of its local variables are lost	4.5
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	local variable is only available in the function	4.5
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	local variables are accessed inside member functions only while data members can be accessed throughout the class	4.5
What is the difference between a data member and a local variable inside a member function	Data members can be accessed from any member functions inside the class defintion Local variables can only be accessed inside the member function that defines them	a Data member is encapsulated within a class or object it is static and can be shared by all instances of that class however local variable are only used from the function or block in which it is declared and not the whole class other wise they would be called global variables	4
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	Data members are the data components of a particular class A member function are the functioning components of the class	3
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	A field variable is a variable that is declared as a member of a class A local variable is avariable that isdeclared local to a method	2.5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	Data members are declared inside the class but outside of any member functions Unlike with local variables each object of the class keeps its own copy of the data members stored in memory	4.5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	Data member are variables that represent an attribute in a class definition Local variables declared in a function body cannot be used outside of that function body When a function terminates the values of its local variables are lost	4.5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	A data member is part of a C plus plus class or structure that stores data of a certain type A local variable inside a member function is only available inside that function and can be used to derive a desired outcome	4.5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	A local variable can only be accessed within the scope of its declaration	3.5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	Data members are the atributes of the function and can be used outside the function Local variable can not be used outside the function and the value is lost after the function terminates	4.5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	data members are permanent attributes of the class local variables inside a member function are lost when the scope of the member function ends	4
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	data members are declared in a class definition but outside the bodies of a class member - function definitions Local variables are declared in a function definition body	4
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	A data member is globally accessible while a local variable is only accessible inside the member function	4.5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	A variable inside a member function can only be accessed inside that member and a data member can be accessed throughought the program	5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	Local variables are used only within the scope of its declaration	4.5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	A data member is a more general term describing all objects instantiated within a member function Local in local variables refers more to the scope of a variable which may be located in anything from a control structure to a class Local variables whose scope are in a member function are the same as data members of member functions	2
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	A data member exists permanently in that program memory as long as it is run A local variable inside a member function is temporal and only used to operate in the function and exists as long as the function is run	3.5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	local variables can only be used within the function where as data members can be set to public access and can be used throughout	5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	The local variable is lost once it exits the block of code while the data member is not	4.5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	Every member function can access and modify a data member A local variable can only be used from the line of declaration to the next closing before it is lost from memory	4.5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	data member is accessible to all functions in the class where local variable is only available to the member function and value is lost when function closes	5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	Data members are variables that are declared inside the class definition but outside of the bodies of the class member functions Local variables can only be used within the function declaration	4.5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	The data member can be accessed outside of the class whereas the local variable cannot	4
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	Local variables cannot be used outside of that function body When a function terminates the values of its local variables are lost Where as data members are variables in a class definition and they exist throughout the life of the object	5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	a local variable in a member function has to be static a data member can change its value freely	2
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	a local variable is only useable within the function it is defined whereas a data member is available to any method within its class	5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	Variable declared in a function defination body cannot be used outside of that function Data members accessible only to member function of that class	5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	data members local variables are declared in a function definition s body they Cannot be used outside of that function body When a function terminates the values of its local variables are lost	4.5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	local variable is only available in the function	4.5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	local variables are accessed inside member functions only while data members can be accessed throughout the class	4.5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	A data member is accessible anywhere in the class while i local variable in a member function is only accessible in that particular function and is freed after the function exits	5
What is the difference between a data member and a local variable inside a member function	A local variable cannot be accessed outside the function in which it is declared Data members normally are private Variables of functions declared private are accessible only to member functions of the class in which they are declared	a Data member is encapsulated within a class or object it is static and can be shared by all instances of that class however local variable are only used from the function or block in which it is declared and not the whole class other wise they would be called global variables	4
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	A constructor initializes an object or objects of a class A function of a class performs a task such as display a line of text or do some kind of mathematical operations	2.5
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	all constructors are functions but not all functions are constructors Also functions can have nearly infinite purposes while constructors always create an instance of whichever class you are using You can change how a constructor does something but not what it does With functions you can change not only the how but also the what	3
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	A constructor typically used to intialize data members and allocate resources for instance memory files etc Also a constructor cannot return values Functions are operations that maybe globally defined	4.5
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	Constructors cannot return values so they cannot specify a return type Normally constructors are declared public	4
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	A constructor is a method that starts new instances of a class - LRB - Example : Employee employee 1 - LRB - parameters - RRB - starts a new instance of object of type Employee - RRB - A function is simply a module within a program that completes its single desired task	3
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	A constructor is called whenever a new object of that class is made	3.5
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	A constructor does not return any date and has no return type Functions can return date or not return data can have a return type	4
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	A constructor is automatically called whenever an instance of a class is created a function must be explicitly called by the user	4
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	constructors cannot return values so they cannot specify a return type like functions can	4
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	A constructor is a function used to initialize an object data when it is created	3.5
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	a constructor initialises everything so that nothing is left empty or with random varioubles and a function modifies those variables with data	2.5
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	A constructor initialized values at the execution of its instantiation It provides default values	3.5
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	A constructor sets up the default values of variables when an object is instantiated whereas a function allows interaction with that object	4
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	A constructor is used to create an object that can be employed in the main function of a program This may or may not execute code along with it A function is a set of code that executes when called but does not create a new object	3
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	a constructor initializes data members but the functions actually perform tasks Constructors cant return values either	4
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	a constructor does not need a type and it is used to initialize the variables	3.5
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	Constructors do not have a return type	4
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	constructor creates the class object into memory where functions perform actions against that object	3
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	constructors cannot return values	4
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	A constructor initializes values and a function usual performs some sort of operation	2.5
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	A constructor is used to create an instance of a class and has the same name as that class A function cannot have the same name as a class and computes data	4
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	a constructor is a function that initializes a class instance a function performs whatever task it is written for	3
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	A constructor cannot return values not even void but function get a return value	4
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	A constructor initializes an object A function is part of an object	2.5
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	constructors initialize the data that is then used in the calculations of a function	2.5
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	a constructor is called when the class is created a function can be called any time	3.5
What is the difference between a constructor and a function	A constructor is called whenever an object is created whereas a function needs to be called explicitely Constructors do not have return type but functions have to indicate a return type	constructor is a special block of statements called when an object is created either when it is declared statically or constructed on the stack However a function is a portion of code within a larger program which performs a specific task and independent to the rest of the code	4
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	A constructor initializes an object or objects of a class A function of a class performs a task such as display a line of text or do some kind of mathematical operations	2.5
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	all constructors are functions but not all functions are constructors Also functions can have nearly infinite purposes while constructors always create an instance of whichever class you are using You can change how a constructor does something but not what it does With functions you can change not only the how but also the what	3
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	5
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	A constructor typically used to intialize data members and allocate resources for instance memory files etc Also a constructor cannot return values Functions are operations that maybe globally defined	4.5
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	Constructors cannot return values so they cannot specify a return type Normally constructors are declared public	4
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	A constructor is a method that starts new instances of a class - LRB - Example : Employee employee 1 - LRB - parameters - RRB - starts a new instance of object of type Employee - RRB - A function is simply a module within a program that completes its single desired task	3
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	A constructor is called whenever a new object of that class is made	3.5
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	A constructor does not return any date and has no return type Functions can return date or not return data can have a return type	4
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	A constructor is automatically called whenever an instance of a class is created a function must be explicitly called by the user	4
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	constructors cannot return values so they cannot specify a return type like functions can	4
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	A constructor is a function used to initialize an object data when it is created	3.5
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	a constructor initialises everything so that nothing is left empty or with random varioubles and a function modifies those variables with data	2.5
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	A constructor initialized values at the execution of its instantiation It provides default values	3.5
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	A constructor sets up the default values of variables when an object is instantiated whereas a function allows interaction with that object	4
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	A constructor is used to create an object that can be employed in the main function of a program This may or may not execute code along with it A function is a set of code that executes when called but does not create a new object	3
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	a constructor initializes data members but the functions actually perform tasks Constructors cant return values either	4
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	a constructor does not need a type and it is used to initialize the variables	3.5
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	Constructors do not have a return type	4
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	constructor creates the class object into memory where functions perform actions against that object	3
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	constructors cannot return values	4
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	A constructor initializes values and a function usual performs some sort of operation	2.5
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	A constructor is a function used to initialize an object data when it is created It is call is made implicitly when the object is created and must be defined with the same name as the class Constructor also cannot return a value like a function can	5
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	A constructor is used to create an instance of a class and has the same name as that class A function cannot have the same name as a class and computes data	4
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	a constructor is a function that initializes a class instance a function performs whatever task it is written for	3
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	A constructor cannot return values not even void but function get a return value	4
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	a constructor cannot return values its not even void it is used to initialize an object data when it is created whereas a function is created to do a specific task and it can return values	5
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	A constructor initializes an object A function is part of an object	2.5
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	constructors initialize the data that is then used in the calculations of a function	2.5
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	a constructor is called when the class is created a function can be called any time	3.5
What is the difference between a constructor and a function	Unlike regular functions constructors are only used to initialize an object s data when it is created Constructors must also be given the same name as the class and cannot return any values	constructor is a special block of statements called when an object is created either when it is declared statically or constructed on the stack However a function is a portion of code within a larger program which performs a specific task and independent to the rest of the code	4
When does C plus plus create a default constructor	If no constructor is provided the compiler provides one by default If a constructor is defined for a class the compiler does not create a default constructor	during compilation	3.5
When does C plus plus create a default constructor	If no constructor is provided the compiler provides one by default If a constructor is defined for a class the compiler does not create a default constructor	When no parameters are set is when a default constructor is used	3
When does C plus plus create a default constructor	If no constructor is provided the compiler provides one by default If a constructor is defined for a class the compiler does not create a default constructor	When there are no arguments passed	1.5
When does C plus plus create a default constructor	If no constructor is provided the compiler provides one by default If a constructor is defined for a class the compiler does not create a default constructor	When it the programs compiles	3.5
When does C plus plus create a default constructor	If no constructor is provided the compiler provides one by default If a constructor is defined for a class the compiler does not create a default constructor	Before the main function of the code	1
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	The compiler creates a default constructor when we do not define one in our class file	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	during compilation	3.5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	When the class does not explicitly include a constructor	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	When no parameters are set is when a default constructor is used	3
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	When a class does not explicitly include a constructor	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	When there are no arguments passed	1.5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	when there is not one already for a specific class	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	When it the programs compiles	3.5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	when a constructor is not provided by the programmer of the class	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	In any class that does not explicitly include a constructor	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	Before the main function of the code	1
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	whenevery you dont specifiy your own	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	When non are provided	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	C plus plus will create a default constructor when no other constructor is present	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	When no constructor was specified in the constructor class but the class is instantiated in a program	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	When no constructor exists when one is needed a parameterless default constructor is declared	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	The Compiler creates this automatically for you unless you specifically create one	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	In any class that does not explicitly include a constructor	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	when no user - defined constructor exists	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	If a class does not explicitly include a constructor the compiler creates one	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	When you do not provide your own constructor	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	When a class does not explicitly include a constructor	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	C plus plus creates a default constructor during compilation if one is not provided	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	when a class does not explicitly include a constructor	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	The compiler will provide one when class does not explictly include a consructor	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	when the programmer does not explicitly include a constructor	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	When one is not explicitly stated	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	when one is not explicitly included by a class	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	When you dont specify any constructors	5
When does C plus plus create a default constructor	The compiler creates a default constructor when we do not define one in our class file	at the very beginning when you run a complier matter a fact in C plus plus it generates its own default constructor for the class provided if no other constructors have been provided by user	5
How many constructors can be created for a class	Unlimited number	Just one per class	0
How many constructors can be created for a class	Unlimited number	It depends what type of class is being defined Typically you would have a constructor call for each object	1.5
How many constructors can be created for a class	Unlimited number	1	0
How many constructors can be created for a class	Unlimited number	One	0
How many constructors can be created for a class	Unlimited number	It depends on the number of objects Each object should have a constructor	2.5
How many constructors can be created for a class	Unlimited number	several	4.5
How many constructors can be created for a class	Unlimited number	One	0
How many constructors can be created for a class	Unlimited number	one	0
How many constructors can be created for a class	Unlimited number	that depends on the number of data members in the class	1.5
How many constructors can be created for a class	Unlimited number	one	0
How many constructors can be created for a class	Unlimited number	one	0
How many constructors can be created for a class	As many as you want so long as they have different parameters	Just one per class	0
How many constructors can be created for a class	As many as you want so long as they have different parameters	As many as you want so long as they have different parameters	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	There is no limit to the number of constructors in a class because like functions constructors can be overloaded	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	It depends what type of class is being defined Typically you would have a constructor call for each object	1.5
How many constructors can be created for a class	As many as you want so long as they have different parameters	In C plus plus the constructor can be overloaded in that there can be more than one constructor for a class each having different parameters	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	1	0
How many constructors can be created for a class	As many as you want so long as they have different parameters	any number you want	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	One	0
How many constructors can be created for a class	As many as you want so long as they have different parameters	by default just one but they may be overloaded to create as many constructors as necessary	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	as many as you want	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	As many as you want with different parameters	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	infinite	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	as many as you need	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	As many as are needed depending on how many variables one wishes to directly modify or leave as default when instantiating an object	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	A very large amount of constructors can be created for any given class through overloading When two constructors with a different type or number of parameters are created they are said to be overloaded and C plus plus can recognize which constructor to use based on the type of the variables that are passed or returned	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	It depends on the number of objects Each object should have a constructor	2.5
How many constructors can be created for a class	As many as you want so long as they have different parameters	Theoretically unlimited as long as they are defined by the programmer	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	As many as needed	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	as many as wanted or needed	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	several	4.5
How many constructors can be created for a class	As many as you want so long as they have different parameters	One	0
How many constructors can be created for a class	As many as you want so long as they have different parameters	one	0
How many constructors can be created for a class	As many as you want so long as they have different parameters	There can be infinite constructors as long as the signature is different	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	that depends on the number of data members in the class	1.5
How many constructors can be created for a class	As many as you want so long as they have different parameters	one	0
How many constructors can be created for a class	As many as you want so long as they have different parameters	you can overload constructors as you need	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	As many as the programmer wants to create	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	one	0
How many constructors can be created for a class	As many as you want so long as they have different parameters	as many as you want as long as they each have a unique argument list	5
How many constructors can be created for a class	As many as you want so long as they have different parameters	as many as the user decides to use	5
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	A function definition does not require any additional information that needs to be passed inside its parenthesis to execute While a definition prototype requires more than one parameters to be passed in order to complete its task	4
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	The FUNCTION PROTOTYPE is where the programmer declares that he or she is using a function other than main - LRB - - RRB - This is like declaring a variable the programmer knows that he or she will be using in the future but has yet to say where they are going to use it or how This is answers the question who it gives the function a name and character The function prototype by common practice is placed at the beginning of the program after the includes and before main - LRB - - RRB - The FUNCTION DEFINITION is the guts of the function This is where the programmer decides what the function is going to do and tells it how to do it It takes whatever information it is given and performs the operations It works sort of like the brain the brain takes in input and based upon that input performs in some way producing an output The function defintion is placed outside of main - LRB - - RRB - and any other functions A function is its own entity and should be thought of as such	2.5
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	Function prototype is a declaration Function definitions - LRB - with multiple parameters - RRB - often require more than one piece of information to perform their tasks	3
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	A prototype shows only return types and necessary parameters The definition includes names for those parameters and defines what the object is actually capable of doing	4.5
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	prototype only tells the user what data types go into a function and what type is returned	4.5
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	Function prototype is located in the h file and only contains the access function name and paramater type Function definition contains the code for the function to perform its activity	4.5
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	a function prototype is used to reference the compiler to a function that will be defined later on a function definition is the actual function itself complete with return type parameters etc	4
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	A function prototype describes a class public interface without revealing the class member function implementations	4.5
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	Function definitions are just that the definition The prototype is what the compiler uses to check that calls to function are correct	2
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	a prototype does not include any actual code where the function has all the code that is executed in the program	3
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	a prototype declares what will be used in the program and the definition	3
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	A function prototype is just a declaration of the function existing and cant be used as an actual function A function has to be created with a definition within to tell the compiler what the function does	3.5
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	the Prototype creates a framework to call the function definition While a function definition is where the function is actually programmed out and created into a final product	4.5
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	A function prototype describes the class public interface without providing how the function works A function definition contains the inner workings of the function	4.5
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	prototype states all functions in that class before compilation where the definition actually holds the source for the functions	3.5
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	A function prototype just specifies parameters A function definition includes parameters and a code body	4
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	Function prototypes describe the class public interface	4.5
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	A prototype only declares name return type and input type A definition also defines the scope variables process and return function	4.5
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	a function prototype simply declares the functions parameters the function definition includes any necessary variables and the function actual code	4
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	A functgion prototype is a declaration of a function while function definition specifies what a function does	3.5
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	A function definition contains all the code for a function to work A function prototype just shows the output input and function name	4.5
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	function prototype describe the class public interface without revealing the class member function implementations function definitions show what implementations are being done	4.5
What is the difference between a function prototype and a function definition	A function prototype includes the function signature i e the name of the function the return type and the parameters type The function definition includes the actual body of the function	function prototype describes a classes interface without reviling whatever is inside as for the function definition cannot do that	4.5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	A function definition does not require any additional information that needs to be passed inside its parenthesis to execute While a definition prototype requires more than one parameters to be passed in order to complete its task	4
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	The FUNCTION PROTOTYPE is where the programmer declares that he or she is using a function other than main - LRB - - RRB - This is like declaring a variable the programmer knows that he or she will be using in the future but has yet to say where they are going to use it or how This is answers the question who it gives the function a name and character The function prototype by common practice is placed at the beginning of the program after the includes and before main - LRB - - RRB - The FUNCTION DEFINITION is the guts of the function This is where the programmer decides what the function is going to do and tells it how to do it It takes whatever information it is given and performs the operations It works sort of like the brain the brain takes in input and based upon that input performs in some way producing an output The function defintion is placed outside of main - LRB - - RRB - and any other functions A function is its own entity and should be thought of as such	2.5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	Function prototype is a declaration Function definitions - LRB - with multiple parameters - RRB - often require more than one piece of information to perform their tasks	3
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	A function prototype is a declaration of a function that tells the compiler the function name its return type and the types of its parameters	5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	A prototype shows only return types and necessary parameters The definition includes names for those parameters and defines what the object is actually capable of doing	4.5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	prototype only tells the user what data types go into a function and what type is returned	4.5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	Function prototype is located in the h file and only contains the access function name and paramater type Function definition contains the code for the function to perform its activity	4.5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	a function prototype is used to reference the compiler to a function that will be defined later on a function definition is the actual function itself complete with return type parameters etc	4
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	A function prototype describes a class public interface without revealing the class member function implementations	4.5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	Function definitions are just that the definition The prototype is what the compiler uses to check that calls to function are correct	2
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	a prototype does not include any actual code where the function has all the code that is executed in the program	3
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	a prototype declares what will be used in the program and the definition	3
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	A function prototype lays out the name return type and the number and types of parameters the function expects to receive in a certain order The details for function prototypes are in the function definition	5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	A function definition is the code that defines the function placed in the brackets that determines that function operation A function prototype shows the function public interface without exposing implementation It shows name return type and type of paramaters	5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	A function prototype is just a declaration of the function existing and cant be used as an actual function A function has to be created with a definition within to tell the compiler what the function does	3.5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	the Prototype creates a framework to call the function definition While a function definition is where the function is actually programmed out and created into a final product	4.5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	A function prototype describes the class public interface without providing how the function works A function definition contains the inner workings of the function	4.5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	prototype states all functions in that class before compilation where the definition actually holds the source for the functions	3.5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	Function prototypes tell the compiler the function names its return type and the types of its parameters where as function definitions actually implement the member functions	5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	A function prototype just specifies parameters A function definition includes parameters and a code body	4
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	Function prototypes describe the class public interface	4.5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	A prototype only declares name return type and input type A definition also defines the scope variables process and return function	4.5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	a function prototype simply declares the functions parameters the function definition includes any necessary variables and the function actual code	4
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	A functgion prototype is a declaration of a function while function definition specifies what a function does	3.5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	in a function prototype you include the return type the name of the function and its parameters if any are needed in a function definition you write the code of what the function will do	5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	A function definition contains all the code for a function to work A function prototype just shows the output input and function name	4.5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	function prototype describe the class public interface without revealing the class member function implementations function definitions show what implementations are being done	4.5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	A function prototype only names the function its return type and it is argument list while a definition defines the above as well as what the function actually does	5
What is the difference between a function prototype and a function definition	A function prototype tells the compiler the function name return type and the number and type of parameters without revealing the implementations contained in the function definition	function prototype describes a classes interface without reviling whatever is inside as for the function definition cannot do that	4.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	the role of a header file list all the functions a class can do while hiding the inner workings of its functions	4.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	The main role of header file is it is used to share information among various files	3
What is the role of a header - file	To store a class interface including data members and member function prototypes	Header files separate files in which classes are defined and allow the compiler to recognize classes when used elsewhere	3.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	No	0
What is the role of a header - file	To store a class interface including data members and member function prototypes	A header file consists of reusable source code such as a class in a file that by convention has a h filename extension This differs from cpp files that contain source - code	3.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	To provide information about the contents of a library It includes the definition of classes declarations of functions data types and constants	4.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	the header file shows the user what types go into and come out of a function but does not allow a user to manipulate the actual code for the function	4.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	Header files declares the class member functions	3.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	A header file allows for the separation of declaration and implementation into separate files	4
What is the role of a header - file	To store a class interface including data members and member function prototypes	the header file has access to the C plus plus Standard Library and makes certain classes like class string work	1.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	Instruct the compiler on how to interface with library and user - written components	2.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	create a comon area to contain reusable functions	3
What is the role of a header - file	To store a class interface including data members and member function prototypes	to declare the functions being used in the classes	3
What is the role of a header - file	To store a class interface including data members and member function prototypes	include hat h allows the use of the hat container so called from the act of pulling names from a hat The header file for hat includes functions for storage and retrieval of it is contents mainly put - LRB - - RRB - peek - LRB - - RRB - and pull - LRB - - RRB -	1.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	To hold reusable content or modules separate from the actual source - code file that can be easily referenced and employed for different programs	4
What is the role of a header - file	To store a class interface including data members and member function prototypes	A header file is a cross communication method between source files to help limit the size of each individual program Without header files a program will be 1 large lump of code and thus fairly hard to debug and traverse	3.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	It contains reusable source code for use by other classes	3
What is the role of a header - file	To store a class interface including data members and member function prototypes	to separate the source code from the main function allows the methods or classes to be included in the program without direct coding allows re usability	3.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	Header files have reusable source code in a file that a programer can use	2.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	To hide the definition and details of a class Also to help readability of the main C plus plus file	3.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	To allow the compiler to recognize the classes when used elsewhere	3.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	A header file declares a class its data and functions available through that class	4
What is the role of a header - file	To store a class interface including data members and member function prototypes	header files contain code which can be used in multiple files	3
What is the role of a header - file	To store a class interface including data members and member function prototypes	Allow compiler to recognize the classes when used elsewhere	3
What is the role of a header - file	To store a class interface including data members and member function prototypes	Allow compiler to recognize the classes when used elsewhere	3.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	To promote function reusuablitly	3
What is the role of a header - file	To store a class interface including data members and member function prototypes	class definitions are placed here	3
What is the role of a header - file	To store a class interface including data members and member function prototypes	A header file usually contains class and function prototypes	4.5
What is the role of a header - file	To store a class interface including data members and member function prototypes	contains all the standard C plus plus library i e string	1
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	the role of a header file list all the functions a class can do while hiding the inner workings of its functions	4.5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	The main role of header file is it is used to share information among various files	3
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	Header files separate files in which classes are defined and allow the compiler to recognize classes when used elsewhere	3.5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	No	0
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	A header file consists of reusable source code such as a class in a file that by convention has a h filename extension This differs from cpp files that contain source - code	3.5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	To provide information about the contents of a library It includes the definition of classes declarations of functions data types and constants	4.5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	the header file shows the user what types go into and come out of a function but does not allow a user to manipulate the actual code for the function	4.5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	Header files declares the class member functions	3.5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	A header file allows for the separation of declaration and implementation into separate files	4
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	the header file has access to the C plus plus Standard Library and makes certain classes like class string work	1.5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	Instruct the compiler on how to interface with library and user - written components	2.5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	create a comon area to contain reusable functions	3
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	to declare the functions being used in the classes	3
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	include hat h allows the use of the hat container so called from the act of pulling names from a hat The header file for hat includes functions for storage and retrieval of it is contents mainly put - LRB - - RRB - peek - LRB - - RRB - and pull - LRB - - RRB -	1.5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	To hold reusable content or modules separate from the actual source - code file that can be easily referenced and employed for different programs	4
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	a header file is a file used to store a list of prototye functions and data members	5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	A header file is a cross communication method between source files to help limit the size of each individual program Without header files a program will be 1 large lump of code and thus fairly hard to debug and traverse	3.5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	It contains reusable source code for use by other classes	3
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	to separate the source code from the main function allows the methods or classes to be included in the program without direct coding allows re usability	3.5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	Header files have reusable source code in a file that a programer can use	2.5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	To hide the definition and details of a class Also to help readability of the main C plus plus file	3.5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	To allow the compiler to recognize the classes when used elsewhere	3.5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	A header file declares a class its data and functions available through that class	4
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	header files contain code which can be used in multiple files	3
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	Allow compiler to recognize the classes when used elsewhere	3
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	Allow compiler to recognize the classes when used elsewhere	3.5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	To promote function reusuablitly	3
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	class definitions are placed here	3
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	A header file usually contains class and function prototypes	4.5
What is the role of a header - file	a header file is a file used to store a list of prototye functions and data members	contains all the standard C plus plus library i e string	1
What does a function signature include	The name of the function and the types of the parameters	It includes the name of the program the type of parameters it can take It should also include a brief description of what the function does	4.5
What does a function signature include	The name of the function and the types of the parameters	it includes the specific information about the function such as input and output variable types and how many of each	3
What does a function signature include	The name of the function and the types of the parameters	A function signature consists of the function prototype This tells you the general information about a function its name parameters what scope it is in and other miscellaneous information	4.5
What does a function signature include	The name of the function and the types of the parameters	Name paramaters scope and other general function information	4.5
What does a function signature include	The name of the function and the types of the parameters	input parameters and return type	3
What does a function signature include	The name of the function and the types of the parameters	a return type and input parameters	3
What does a function signature include	The name of the function and the types of the parameters	The signature can include a result type and thrown errors	2
What does a function signature include	The name of the function and the types of the parameters	A function signature includes a function return type parameters and semi - colon	3
What does a function signature include	The name of the function and the types of the parameters	a function return type and parameter list	3
What does a function signature include	The function signature includes the name of the function and the types of its arguments	It includes the name of the program the type of parameters it can take It should also include a brief description of what the function does	4.5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	it includes the specific information about the function such as input and output variable types and how many of each	3
What does a function signature include	The function signature includes the name of the function and the types of its arguments	The function signature includes the name of the function and the types of its arguments	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	A function signature consists of the function prototype This tells you the general information about a function its name parameters what scope it is in and other miscellaneous information	4.5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	It includes the name of the function and the types of its arguments	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	Name paramaters scope and other general function information	4.5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	It includes a function name and parameter list Does not include return type Function signatures must be different	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	input parameters and return type	3
What does a function signature include	The function signature includes the name of the function and the types of its arguments	The portion of the function prototyp tha has the function name and the arguments but NOT the return type	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	Name of the function and the types of it is arguments	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	The name of the function and the types of its arguments	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	Includes the name of the function and the types of its arguments	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	identification of a function and the data types of its parameters it has the name and the data type variables	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	a return type and input parameters	3
What does a function signature include	The function signature includes the name of the function and the types of its arguments	The function signature includes the method name and the input types	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	A function signature includes the name of the function and types of arguments but not the return type	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	The signature can include a result type and thrown errors	2
What does a function signature include	The function signature includes the name of the function and the types of its arguments	function name and input paramaters	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	The name of the function and the types of its arguments This includes the number type and order the parameters appear in	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	the name of the function and the types of its arguments	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	A function signature includes the name of the function and the types of its arguments	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	A function signature includes a function return type parameters and semi - colon	3
What does a function signature include	The function signature includes the name of the function and the types of its arguments	the name of the function and the types of its arguments	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	the function name and parameters	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	The name of the function and the types of its arguments	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	The portion of a function prototype that includes the name of the function and the types of its arguments	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	the name of the function and its parameters	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	The function name and parameters	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	name of function and types of arguments	5
What does a function signature include	The function signature includes the name of the function and the types of its arguments	a function return type and parameter list	3
What does a function signature include	The function signature includes the name of the function and the types of its arguments	it includes the name of the function and the types of its arguments it does not specify the function return type Function in the same scope must have unqiue signatures	5
What is the scope of global variables	File scope	they can be accessed by any C plus plus file anywhere	2.5
What is the scope of global variables	File scope	The scope of global variables are created by placing variable declarations outside any class or function definition Global variables retain their values throughout the execution of the program and they can be referenced by any function that follows their declarations or definitions in the source file	2.5
What is the scope of global variables	File scope	Global Variables can be used in any function as long as the appropriate h file that holds the variable is included	4
What is the scope of global variables	File scope	can be accesed by any classes that have and object of that variables class in it	3
What is the scope of global variables	File scope	The entire program	4.5
What is the scope of global variables	File scope	They can be used throughout the program	4.5
What is the scope of global variables	File scope	Global variable can b accessed by any class wit an object in the variables class	3
What is the scope of global variables	File scope	it is accessible by all functions within a program	4.5
What is the scope of global variables	File scope	variables accessible anywhere in the program as long as they are public	4.5
What is the scope of global variables	File scope	globally anywhere in the program	4.5
What is the scope of global variables	File scope	The entire program	4.5
What is the scope of global variables	File scope	throughout the execution of the program	4.5
What is the scope of global variables	File scope	If a variable is declared global any function or class can use that variable	4.5
What is the scope of global variables	File scope	throught the programm	4.5
What is the scope of global variables	File scope	the whole code	4.5
What is the scope of global variables	File scope	global variables have program scope - LRB - accessible anywhere in program - RRB -	4.5
What is the scope of global variables	File scope	variables that exist throught the entire script their values can be changed anytime in the code and fucntions	4.5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	they can be accessed by any C plus plus file anywhere	2.5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	Global variables have file scope	5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	The scope of global variables are created by placing variable declarations outside any class or function definition Global variables retain their values throughout the execution of the program and they can be referenced by any function that follows their declarations or definitions in the source file	2.5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	A global variable is an identifier that retains it is value throughout the execution of the program It has file scope	5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	Global Variables can be used in any function as long as the appropriate h file that holds the variable is included	4
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	They can be accessed by any part of the program It can be referenced by any function that follows the declarations or definitions in the source file	5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	can be accesed by any classes that have and object of that variables class in it	3
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	Global variables have file - scope The variable is know to all functions throught the file	5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	The entire program	4.5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	They have file scope when placed outside a function	5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	File scope	5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	They can be used throughout the program	4.5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	Global variable can b accessed by any class wit an object in the variables class	3
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	The scope of global variables is at the file level	5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	Global variables all have file scope	5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	it is accessible by all functions within a program	4.5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	variables accessible anywhere in the program as long as they are public	4.5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	They can be referenced by any function following their declaration or definition inside the source file	5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	globally anywhere in the program	4.5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	Global variables have a file scope	5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	The entire program	4.5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	throughout the execution of the program	4.5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	If a variable is declared global any function or class can use that variable	4.5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	The entire program or file	5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	throught the programm	4.5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	the whole code	4.5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	File scope	5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	can be referenced by any function that follows their declarations or definitions in the source file	5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	global variables have program scope - LRB - accessible anywhere in program - RRB -	4.5
What is the scope of global variables	Any functions that follows their deceleration that are in the source code file are allowed to have access the variables Also global scope variables retrain their value throughout the execution of the program	variables that exist throught the entire script their values can be changed anytime in the code and fucntions	4.5
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	It expands the function definition in that place Once the functions is called you can use it as many times as you need The compiler just expands on the function	4.5
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	When the compiler inline - expands a function call the function code gets inserted into the caller code stream - LRB - conceptually similar to what happens with a define macro - RRB - This can depending on a zillion other things improve performance because the optimizer can procedurally integrate the called code optimize the called code into the caller	4.5
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	The compiler can ignore the inline qualifier and typically does so for all but the smallest functions	3
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	You declare your inline function in the header or before your int main - LRB - - RRB - You then can call that function at anytime in your main program quickly and easily	2
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	It expands a small function out making your code longer but also makes it run faster	4
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	the function is not treated as a separate unit like other functions	3.5
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	The compiler can ignore the inline qualifier and typically does so for all but the smallest functions	3
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	Ignores the inline qualifier and typically does so for all but the smallest functions	3
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	If the function is small enough it will expand it but it will run faster as it will avoid making so many calls to the function	4.5
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	it treats them as the same function	2
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	not answered	0
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	It generates a copy of the function code by by inserting it in the program	4.5
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	The compiler can ignore the inline qualifier and typically does so for all but the smallest functions	2
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	Multiple copies of the function code are inserted into the program making it bigger	4.5
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	compiler ignores inline qualifier	2.5
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	It generates a copy of the function if it is needed again	3.5
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	Expands the function into the program	4
How does the compiler handle inline functions	It makes a copy of the function code in every place where a function call is made	When the compiler inline - expands a function call the function code gets inserted into the caller code stream - LRB - conceptually similar to what happens with a define macro - RRB - This can depending on a zillion other things improve performance because the optimizer can procedurally integrate the called code optimize the called code into the caller	4.5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	It expands the function definition in that place Once the functions is called you can use it as many times as you need The compiler just expands on the function	4.5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	When the compiler inline - expands a function call the function code gets inserted into the caller code stream - LRB - conceptually similar to what happens with a define macro - RRB - This can depending on a zillion other things improve performance because the optimizer can procedurally integrate the called code optimize the called code into the caller	4.5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	The compiler can ignore the inline qualifier and typically does so for all but the smallest functions	3
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	Placing the qualifier inline before a function return type in the function definition advises the compiler to generate a copy of the function code in place to avoid a function call	5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	You declare your inline function in the header or before your int main - LRB - - RRB - You then can call that function at anytime in your main program quickly and easily	2
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	It expands a small function out making your code longer but also makes it run faster	4
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	the function is not treated as a separate unit like other functions	3.5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	When the program compiles it will copy the function inplace avoiding a function call	5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	It replaces all instances of that function call with the inline code itself resulting in longer but faster programs	5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	The compiler can ignore the inline qualifier and typically does so for all but the smallest functions	3
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	Ignores the inline qualifier and typically does so for all but the smallest functions	3
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	If the function is small enough it will expand it but it will run faster as it will avoid making so many calls to the function	4.5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	it treats them as the same function	2
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	Inline functions are copied in place instead of being referenced	5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	For inline functions the compiler creates a copy of the function code in place so it does not have to make a function call and add to the function call stack	5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	it generates a copy of the function coding which eliminates calling the function	5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	not answered	0
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	It generates a copy of the function code by by inserting it in the program	4.5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	tells the compiler to make a copy of function code in place to avoid a function call it typically ignores it except for the smallest functions	5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	The compiler can ignore the inline qualifier and typically does so for all but the smallest functions	2
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	Multiple copies of the function code are inserted into the program making it bigger	4.5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	compiler ignores inline qualifier	2.5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	It generates a copy of the function if it is needed again	3.5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	The complier includes copies of inline functions instead of making function calls but usually only with very small functions	5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	Compiler generate a copy of the function code in place - LRB - when appropriate - RRB - to avoid a function call	5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	instead of calling the function every time it is invoked the compiler will replace the function call with a copy of the function body	5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	Expands the function into the program	4
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	it generates a copy of the functions code in place to avoid a function call	5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	the function call will be replaced by the code that was defined in the inline function	5
How does the compiler handle inline functions	The inline keyword advises the compiler to copy the function code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions	When the compiler inline - expands a function call the function code gets inserted into the caller code stream - LRB - conceptually similar to what happens with a define macro - RRB - This can depending on a zillion other things improve performance because the optimizer can procedurally integrate the called code optimize the called code into the caller	4.5
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	because you cannot change the original and passing by reference limits memory needed for the program	4.5
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	You do not alter the original value of the variable that was passed	3
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	Do not have to make copies of stuff	4.5
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	The function can change the data stored in a variable passed by reference directly	3.5
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	Gives called function the ability to access and modify the caller s argument data	3.5
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	Gives called function the ability to access and modify the caller s argument data directly	3.5
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	It is more efficient and it changes the variable not online inside the function but outside so that the new value can be used elsewhere	3
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	Gives access to the caller data directly also it allows for modifying the data	3.5
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	less overhead overall and you modify the variable directly	3.5
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	The original variable being referenced can be modified directly by the called function	3
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	gives function ability to access and modify the caller argument data directly	3.5
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	Gives the called function the ability to access and modify the caller argument data directly	3
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	Less overhead than passed by value especially when using large numbers	3.5
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	The data can be modified directly instead of making a copy of the data Improves execution time with large amounts of data	4
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	Functions can directly modify arguments that are passed by reference	3.5
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	it takes less memory thus it would make the program faster	4
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	You are able to modify the variable that is referenced directly	3.5
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	if you pass by reference you can modify the value as opposed to passing by value where you cannot change the value	3.5
What is the main advantage associated with function arguments that are passed by reference	It avoids making copies of large data structures when calling functions	Actual arguments are associated with dummy arguments when a function or subroutine is referenced In a procedure reference the actual argument list identifies the correspondence between the actual arguments provided in the list and the dummy arguments of the subprogram	3
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	because you cannot change the original and passing by reference limits memory needed for the program	4.5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	Passing by reference can eliminate the pass - by - value overhead of copying large amounts of data	5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	It is often more efficient to pass references rather than large objects to functions This allows the compiler to pass the address of the object while maintaining the syntax that would have been used to access the object	5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	Pass by reference is good for performance reasons because it can eliminate the pass by value overhead of copying large amounts of data	5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	You do not alter the original value of the variable that was passed	3
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	Do not have to make copies of stuff	4.5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	you do not use unessesary memory space to copy variables between functions	5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	It elimitates the need to copy large amonts of data	5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	The function can change the data stored in a variable passed by reference directly	3.5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	Gives called function the ability to access and modify the caller s argument data	3.5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	Gives called function the ability to access and modify the caller s argument data directly	3.5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	It is more efficient and it changes the variable not online inside the function but outside so that the new value can be used elsewhere	3
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	you do not make another copy and waste memory	5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	Passing by reference eliminates the copying of large amounts of data typical with pass by value	5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	If a function arguments are large in size computing time and memory space is not wasted copying down the argument and passing it to the function Also pass by reference gives the function called the permission to read edit the argument directly	5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	Gives access to the caller data directly also it allows for modifying the data	3.5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	less overhead overall and you modify the variable directly	3.5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	The original variable being referenced can be modified directly by the called function	3
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	gives function ability to access and modify the caller argument data directly	3.5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	Gives the called function the ability to access and modify the caller argument data directly	3
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	Less overhead than passed by value especially when using large numbers	3.5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	large data items can be passed without copying the entire data point reducing execution time and the amout of memory space needed	5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	The data can be modified directly instead of making a copy of the data Improves execution time with large amounts of data	4
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	Functions can directly modify arguments that are passed by reference	3.5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	It gives access and modify the caller argument data directly It eliminate the pass by value overhead of copying large amounts ofdata	5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	it takes less memory thus it would make the program faster	4
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	You are able to modify the variable that is referenced directly	3.5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	if you pass by reference you can modify the value as opposed to passing by value where you cannot change the value	3.5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	only the memory address is sent to the function so no copy of the object sent needs to be made It makes the function run faster and saves memory	5
What is the main advantage associated with function arguments that are passed by reference	Overall the program has better performance - LRB - means it is faster - RRB - because it does not have to copy large amounts of data	Actual arguments are associated with dummy arguments when a function or subroutine is referenced In a procedure reference the actual argument list identifies the correspondence between the actual arguments provided in the list and the dummy arguments of the subprogram	3
How are overloaded functions differentiated by the compiler	Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call	They differentiated by the compiler by the conditions or inputs used for one of the overloaded functions	3
How are overloaded functions differentiated by the compiler	Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call	By the type they are initilized with - LRB - int char etc - RRB -	3
How are overloaded functions differentiated by the compiler	Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call	overloaded functions must have the same return type but different input parameters	3
How are overloaded functions differentiated by the compiler	Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call	not answered	0
How are overloaded functions differentiated by the compiler	Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call	they have to have same return type but different input parameters	3
How are overloaded functions differentiated by the compiler	Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call	Overloaded functions are differentiated by their parameters	4.5
How are overloaded functions differentiated by the compiler	Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call	it creates a set of candidate functions then a set of viable functions	3
How are overloaded functions differentiated by the compiler	Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call	They have the same name just different parameters	3.5
How are overloaded functions differentiated by the compiler	Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call	paremeters	4.5
How are overloaded functions differentiated by the compiler	Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call	by their signature - LRB - return type argument list - RRB -	4
How are overloaded functions differentiated by the compiler	Based on the function signature When an overloaded function is called the compiler will find the function whose signature is closest to the given function call	overloaded function simply invovles haing a method with the same name within the class is used to implement a method for subclass which overrides in other words replaces the implementation of the super class Overloading the concept of providing different meaning to a object based on the context of its presence Overloading is one type of polymorphism and this is also a feature in programing	3
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	They differentiated by the compiler by the conditions or inputs used for one of the overloaded functions	3
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	The compiler distinguishes overloaded functions by their signatures It encodes each function identifier with the number and types of its parameters to generate type - safe linkage which ensures the proper overloaded function is called	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	Overloaded functions are distinguished by their signatures Name mangling or name decoration and type - safe linkage ensures that proper overloaded functions is called and types of the arguments conform to tpes to the parameters	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	The compiler selects proper function to execute based on number types and order of arguments in the function call	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	By the type they are initilized with - LRB - int char etc - RRB -	3
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	It selects the proper function to execute based on number types and order of arguments in the function call	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	overloaded functions must have the same return type but different input parameters	3
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	It examines the names types and order of arguments on each function	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	unique function signatures	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	Is based on number types and order of arguments in the function call	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	Compiler selects proper function to execute based on number types and order of arguments in the function call	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	not answered	0
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	they have to have same return type but different input parameters	3
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	Overloaded functions are differentiated by their parameters	4.5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	The compiler selects the right function to execute from the number types and order of arguments in the function call	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	it creates a set of candidate functions then a set of viable functions	3
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	their function signature	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	The number and type of its parameters	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	by their function signature	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	They have the same name just different parameters	3.5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	They are differntiated by number types and order of arguments in the function call	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	it looks at the number types and order of arguments in the function call	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	The compiler differentiates overloaded functions by their signature	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	By the number types and order of their arguments	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	Compiler selects proper function to execute based on number types and order of arguments in the function call	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	paremeters	4.5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	By the number and the types and order of the parameters	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	by the number and type of arguments	5
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	by their signature - LRB - return type argument list - RRB -	4
How are overloaded functions differentiated by the compiler	The compiler selects the proper functions to execute based on number types and order of arguments in the function call	overloaded function simply invovles haing a method with the same name within the class is used to implement a method for subclass which overrides in other words replaces the implementation of the super class Overloading the concept of providing different meaning to a object based on the context of its presence Overloading is one type of polymorphism and this is also a feature in programing	3
When defining a recursive function what are possible causes for infinite recursion	If the recursion step is defined incorrectly or if the base case is not included	badly designed algorithyms using recursion for a non recursive problem	2.5
When defining a recursive function what are possible causes for infinite recursion	If the recursion step is defined incorrectly or if the base case is not included	Not having a base case that returns a base value	4
When defining a recursive function what are possible causes for infinite recursion	If the recursion step is defined incorrectly or if the base case is not included	no base case no change in values	4.5
When defining a recursive function what are possible causes for infinite recursion	If the recursion step is defined incorrectly or if the base case is not included	The recursive problem cannot be reduced to reach the base case	4.5
When defining a recursive function what are possible causes for infinite recursion	If the recursion step is defined incorrectly or if the base case is not included	Not having the proper case to leave the recursion	4
When defining a recursive function what are possible causes for infinite recursion	If the recursion step is defined incorrectly or if the base case is not included	improper handling of cases such that not all possible values are able to be handled	3.5
When defining a recursive function what are possible causes for infinite recursion	If the recursion step is defined incorrectly or if the base case is not included	There is no base case The recursion step does not reduce the problem during each recursive call	4.5
When defining a recursive function what are possible causes for infinite recursion	If the recursion step is defined incorrectly or if the base case is not included	no base case as in a single return that does not include calling the function again a static value to end at	3.5
When defining a recursive function what are possible causes for infinite recursion	If the recursion step is defined incorrectly or if the base case is not included	Infinite recursion may occur if no base case is defined or if the call is not varied	4.5
When defining a recursive function what are possible causes for infinite recursion	If the recursion step is defined incorrectly or if the base case is not included	recursion refers to situations in which functions call themselves These types of functions are known as recursive functions That being said Infinite recursion occurs when the function is designed in such a way as to call it self forever without stopping possible causes	3
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	badly designed algorithyms using recursion for a non recursive problem	2.5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	Infinite recursion can occur when the base case is omitted or the recursion step is written incorrectly so that it never converges on the base case	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	Infinite recursion is an infinite loop if the condition is not met Either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case causes indefinite recursion eventually exhausting memory	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	Either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case can cause an infinite recursion	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	Not having a base case that returns a base value	4
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	Incorrect or missing base case Must reduce to the base case The function must get simpler each time it is run - LRB - converge to the base case - RRB -	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	no base case no change in values	4.5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	If at each recursive call the problem does not diminish or if it does not diminish to a base case can cause infinite recursion	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	Omitting the base case or incorrectly calling the recursive step	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	The recursive problem cannot be reduced to reach the base case	4.5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	Lack of defining a base case or writing the recursion step incorrectly so that it does not converge on the base case	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	Not having the proper case to leave the recursion	4
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	no base case or the recursive calls do not converge to the base case	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	No base case or an incorrectly written recursion step that does not converge on the base case will lead to infinite recursion	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	If the recursion function never reaches or successfully defines the base case it will recurse forever This happens many ways such as the function does not progress towards the base case or the function is coded poorly and does not even contain a base case	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	not creating a base case or in the case where the base case will never be met	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	improper handling of cases such that not all possible values are able to be handled	3.5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	There is no base case The recursion step does not reduce the problem during each recursive call	4.5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	no base case as in a single return that does not include calling the function again a static value to end at	3.5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	Either omitting the base case or writing the recursion step incorrectly so the it does not reach the base case can cause infinite recursion	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	omitting the base case or writing the recursive call so that it does not converge upon the base case	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	Either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	Infinite recursion may occur if no base case is defined or if the call is not varied	4.5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	Not having a base case or building a recursion process that does not converge on the base case	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	Either omitting the base case or writing the recursion step incorerectly	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	no base case or if the programmar does not define the base case as the simplest case and it never gets reached	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	No easily reached base case and no base case at all	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	function is never allowed to reach the base case	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	it has no base case or the base case is never met	5
When defining a recursive function what are possible causes for infinite recursion	A base case that is the simplest case for a problem so that the function will lead to it if this does not happen then it will end up as an infinite loop And a condition to know when to terminate	recursion refers to situations in which functions call themselves These types of functions are known as recursive functions That being said Infinite recursion occurs when the function is designed in such a way as to call it self forever without stopping possible causes	3
What are the similarities between iteration and recursion	They both involve repetition; they both have termination tests; they can both occur infinitely	As discussed earlier recursion may be used to process iterative actions Recursion is used for calculations where the answer can be described in a function that relates to itself	2
What are the similarities between iteration and recursion	They both involve repetition; they both have termination tests; they can both occur infinitely	Both will repeat - LRB - loop - RRB - until a condition is met and exit the loop Both are capable of entering an infinite loop	4
What are the similarities between iteration and recursion	They both involve repetition; they both have termination tests; they can both occur infinitely	anything you can do iterativly you can do recursively	3
What are the similarities between iteration and recursion	They both involve repetition; they both have termination tests; they can both occur infinitely	Both are repetative and both have a end test	4.5
What are the similarities between iteration and recursion	They both involve repetition; they both have termination tests; they can both occur infinitely	Incorrectly writing either can result in infinite loops both perform the same task over and over	3.5
What are the similarities between iteration and recursion	They both involve repetition; they both have termination tests; they can both occur infinitely	not answered	0
What are the similarities between iteration and recursion	They both involve repetition; they both have termination tests; they can both occur infinitely	anything you can do recursively you can do iteratively	3
What are the similarities between iteration and recursion	They both involve repetition; they both have termination tests; they can both occur infinitely	Many problems can be solved by both iteration and recursion and either may go into a condition of infinite execution if a termination test is omitted	3.5
What are the similarities between iteration and recursion	They both involve repetition; they both have termination tests; they can both occur infinitely	they are methods of repeating the same task	2
What are the similarities between iteration and recursion	They both involve repetition; they both have termination tests; they can both occur infinitely	they are used to solve the same type of problems they do a task over and over again until a cirtain conditional statement is reached - LRB - its called the base case in recursion - RRB -	3.5
What are the similarities between iteration and recursion	They both involve repetition; they both have termination tests; they can both occur infinitely	both need to have some kind of base case to tell when the loop needs to stop	3
What are the similarities between iteration and recursion	They both involve repetition; they both have termination tests; they can both occur infinitely	they both are able to do repetiive tasks however recurisve calls itself with different parameters and defines and exit clause that is guaranteeed to be reached Iterative includes a loop which iterates a pre - determined number of times or checks for an exit clause every time through	3.5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	As discussed earlier recursion may be used to process iterative actions Recursion is used for calculations where the answer can be described in a function that relates to itself	2
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	Both iteration and recursion are based on control statements and involve repetition They can both also occur indefinitely	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	Both are based on a control statement Iteration - repetition structure Recursion - selection structure Both involve repetition Iteration - explicitly uses repetition structure Recursion - repeated function calls Both involve a termination test Iteration - loop - termination test Recursion - base case Both gradually approach termination Iteration - modifies counter until loop - termination test fails Recursion - produces progressively simpler versions of problem Both can occur indefinitely Iteration - if loop - continuation condition never fails Recursion - if recursion step does not simplify the problem	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	Iteration and recursion have many similarities : both are based on a control statement involve repetition involve a termination test gradually approach termination and can occur infinitely	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	Both rely on repetition both have a base case both can become an infinite loop Anything recursive can also be solved with iteration	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	Both will repeat - LRB - loop - RRB - until a condition is met and exit the loop Both are capable of entering an infinite loop	4
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	anything you can do iterativly you can do recursively	3
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	Both are repetative and both have a end test	4.5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	Incorrectly writing either can result in infinite loops both perform the same task over and over	3.5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	Both are based on a control statement Both involve repetition Both involve a termination test Both gradually approach termination Both can occur infinitely	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	Both are based on a control statement Both involve repetition Both involve a termination test Both gradually approach termination Both can occur infinitely	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	not answered	0
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	anything you can do recursively you can do iteratively	3
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	Many problems can be solved by both iteration and recursion and either may go into a condition of infinite execution if a termination test is omitted	3.5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	Iteration and recursion both use repetition and perform several simple operations and algorithms successively until they reach a certain limit So both involve a termination test to find that limit and both slowly approach that termination limit Both are based on a control statement as well If coded poorly both can continue on for forever until the compiler or the computer either locks up shuts down or halts the operation	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	both based on control statement involve repetition and involve a termination test within loops	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	they are methods of repeating the same task	2
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	Both involve a termination test They use a control statement and repition to solve the problem They can also result in an infinite loop	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	based on a control statement involve repetition involve a termination test	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	Both are bases on a control statement Both involve repetition Both involve a termination test Both gradually approach termination Both can occur infinitely	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	both based on a control statement both involve repitition both involve a termination test both gradually approach termination both can potentially occur infinetly	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	they are both based on a control statement both involve repetition both involve a termination case both graduatlly approach that termination case and both can occur infinitely	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	They both use repetition a control or test to terminate and both can infinitely repeat if not defined correctly	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	Both are based on a control statement; both gradually approach termination ending with a termination test; both involve repetition and can both repeat infinitely if their termination requirements are not met	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	both are based on a control statement involve repetition and involve a termination test both gradually approach termination both can occur infinitely	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	they are used to solve the same type of problems they do a task over and over again until a cirtain conditional statement is reached - LRB - its called the base case in recursion - RRB -	3.5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	Based on control statement; involve repetition; involve a terminal test; both can occur infinitly	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	repetition termination test eventually terminate occur infinately	5
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	both need to have some kind of base case to tell when the loop needs to stop	3
What are the similarities between iteration and recursion	Both involve a controlled repetition structures and they both have a termination test Also both of them can loop forever	they both are able to do repetiive tasks however recurisve calls itself with different parameters and defines and exit clause that is guaranteeed to be reached Iterative includes a loop which iterates a pre - determined number of times or checks for an exit clause every time through	3.5
What are the two different ways of specifying the length of an array	In the array declaration or by using an initializer list	int n 10 ; or or array of 10 integers and int n arraySize or or where arraySize is some positive integer defined by the user	4
What are the two different ways of specifying the length of an array	In the array declaration or by using an initializer list	by either inputing the different elements in the array at coding or giving the array specifacations as to the size of the array it is also possible when giving it specifacations to tell the array to grow as needed	4
What are the two different ways of specifying the length of an array	In the array declaration or by using an initializer list	Pass the length along with the array or use a vector	3
What are the two different ways of specifying the length of an array	In the array declaration or by using an initializer list	statically and dynamically	2.5
What are the two different ways of specifying the length of an array	In the array declaration or by using an initializer list	Explicitly int array 10 ; or by variable const int size equals 10; int array size ;	4
What are the two different ways of specifying the length of an array	In the array declaration or by using an initializer list	Specify an array s size with a constant variable And setting array elements with calculations	3.5
What are the two different ways of specifying the length of an array	In the array declaration or by using an initializer list	statically using and dynamically using	4
What are the two different ways of specifying the length of an array	In the array declaration or by using an initializer list	define it as array 5 or array 1 2 3 4 5	4.5
What are the two different ways of specifying the length of an array	In the array declaration or by using an initializer list	Static and dynamic	2.5
What are the two different ways of specifying the length of an array	In the array declaration or by using an initializer list	In a string you can specify with the strlen - LRB - arrayname - RRB - command This gets the length of the string Another way is with integers where you initiate the size from the start ex array 40 specifying a possible length of up to 40 Then it is passed by an object the actual ammout in the array Another way is to declare it in an initializing program	4.5
What are the two different ways of specifying the length of an array	In the array declaration or by using an initializer list	specify the number of elements in the array declaration with a constant or using a constant variable for future scalability	4
What are the two different ways of specifying the length of an array	In the array declaration or by using an initializer list	with a number and with a variable	3
What are the two different ways of specifying the length of an array	In the array declaration or by using an initializer list	one way of specifying of array is A 10 ; other way of specifying array is a arraysize equals 1 2 3 4 5 6 7 8 9 10	4.5
What are the two different ways of specifying the length of an array	In the array declaration or by using an initializer list	use an arraylist or have your program ask the array how many elements it has As an obj it it should have member length that is the number of slots it has	4
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	int n 10 ; or or array of 10 integers and int n arraySize or or where arraySize is some positive integer defined by the user	4
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	by either inputing the different elements in the array at coding or giving the array specifacations as to the size of the array it is also possible when giving it specifacations to tell the array to grow as needed	4
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	Pass the length along with the array or use a vector	3
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	One way is to declare a size of the array using a variable that is equal to an integer The other way if the size is omitted in the declaration the compiler determines the size of the array based on the size of the initializer list	5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	In the declaration - LRB - int array x - RRB - or with an initilizer - LRB - int array equals 0 1 2 etc	5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	1 Declare the length of the array - LRB - int array 10 ; - RRB - 2 Initialize the array - LRB - int array equals 0 1 2 3; or or compiler will assume size of 4 - RRB -	5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	statically and dynamically	2.5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	Explicitly int array 10 ; or by variable const int size equals 10; int array size ;	4
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	Array lengths can be explicitly specified by inputing the number of elements between the brackets during declaration or implicitly by including an initializer list WITHOUT specifying a number between the compiler will automatically declare the array with the proper number of elements needed for the list	5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	Specify an array s size with a constant variable And setting array elements with calculations	3.5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	statically using and dynamically using	4
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	define it as array 5 or array 1 2 3 4 5	4.5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	Static and dynamic	2.5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	manually inside the brackets or automatically via an initializer list	5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	You can use an initializer list or simply tell the compiler how many elements you want in the array For an Initializer list : int a equals 10 2 3 4 5; For an elemental declaration : int b 5 ; Both arrays have 5 elements in them but array a is already initialized	5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	In a string you can specify with the strlen - LRB - arrayname - RRB - command This gets the length of the string Another way is with integers where you initiate the size from the start ex array 40 specifying a possible length of up to 40 Then it is passed by an object the actual ammout in the array Another way is to declare it in an initializing program	4.5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	Implicit namely when you give it values like 1 2 3 4 5 6 7 8 9 at which the compiler will automatically give this a size Static during the declaration	5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	Supply an integer inside the brackets or the compiler counts the number of elements in the initializer list int n 5 ; int n equals 1 2 3 4 5	5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	either initializing the array with a specific length or initializing an array while declaring its contents	5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	within the brackets or by using an initializer list	5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	specify the number of elements in the array declaration with a constant or using a constant variable for future scalability	4
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	with a number and with a variable	3
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	explicitly by declaring it in brackets - LRB - i e int array 50 ; - RRB - and implicitly by initializing several values - LRB - i e int array equals 1 2 3; - RRB -	5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	one way of specifying of array is A 10 ; other way of specifying array is a arraysize equals 1 2 3 4 5 6 7 8 9 10	4.5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	1 - Initializing an array in a declaration with an initializer list 2 - Specifying an array s size with a constant variable	5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	Initializing the size in the brackets : int a 100 ; Initializing the length by assigning variables : int a equals 1 2 3;	5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	user defined value or by the number of elements in initializer list	5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	you can assign the size of it inside the brackets when you declare the array 3 or you can have it set by how many items you set the array equal to 1 2 3	5
What are the two different ways of specifying the length of an array	You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable	use an arraylist or have your program ask the array how many elements it has As an obj it it should have member length that is the number of slots it has	4
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	strings that are used in an char array are much easier to manipulate than as a string object because each character is stored separately rather than as a whole	2.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	the type string uses less storage and you have to change the string all at once with an array of characters you can make permutations of words using the characters stored in the array without needing to actually access and change the variables with an array of characters you can just change how they are accessed	3
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	By using an array of characters one can store and manipulate the strings rather than just having a type string variable	2.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	type string is an array of chars that will make an array of single letter characters while an array of strings will be an actual array of words - LRB - or an array of char arrays - RRB -	2
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	They are basically the same however a string ends with a null character denoting the end of the string - LRB - and the size - RRB - A char array has potential to be any size so it must be declared or limited	3.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	string is a class in the standard library and has method that modify it Whereas the char array is on able to be modifie by the user	4
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	By using an array of characters you are limited to the size of the array of characters By declaring by type the end of the string is acknowledged by white space	3.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	A char array reads a string as each individual character A string literal array reads the entire string	3
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	array of characters can only hold as many characters as the array size and strings are not that limited	4
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	Stings can only be modified by functions of the String class an array of characters can be modified by the user	3.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	if by type string the array contains an additional terminating null character	4
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	strings with type string are just that Strings They are not part of an array list at all where as one declared by an array is actually an array of characters able to be pointed and detected	3
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	the array of characters has a set length while the type string has virtually unlimited length	4
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	Char array Individual letters can be accessed directly with array subscript notation String array array subscript will return the entire string	2
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	when using an array individual characters can be accessed and manipulated	2.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	strings declared using an array of characters could result in data loss if character array not initialized large enough	4
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	an array is passed by reference therefore if an array of characters is changed the memory is changed not just the variable	3.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	the type string has several built - in functions not available when using a char array but the individual characters in an array or more directly accessible than the characters in a string type string	3.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	declaring a string it includes white spaces but declaring a array of character does not include white spaces	1.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	Strings declared using the type string can vary in length Strings declared using an array of characters can not extend past the array length	4
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	cant modify individual characters of a type string array character type array can modify individual characters	2.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	the type string is a class and is safer while the other is just an array of characters	3.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	The strings declared using an array of characters have a null element added at the end of the array	array it is the collection of similar data types ex : int a 10 ten indicates the size of array is index of array we can give only integer values to array of a where as string mean collection of group of characters string declarations have a datatype usually causes storage to be allocated in memory that is capable of holding some predetermined number of symbols However Arrays can be declared to contain values of any non reference data type Multiple arrarys of the same type	2.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	strings that are used in an char array are much easier to manipulate than as a string object because each character is stored separately rather than as a whole	2.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	the type string uses less storage and you have to change the string all at once with an array of characters you can make permutations of words using the characters stored in the array without needing to actually access and change the variables with an array of characters you can just change how they are accessed	3
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	All strings represented by character arrays end with the null character You declare an object of type string just like any other type for example : string s;	5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	By using an array of characters one can store and manipulate the strings rather than just having a type string variable	2.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	type string is an array of chars that will make an array of single letter characters while an array of strings will be an actual array of words - LRB - or an array of char arrays - RRB -	2
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	They are basically the same however a string ends with a null character denoting the end of the string - LRB - and the size - RRB - A char array has potential to be any size so it must be declared or limited	3.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	string is a class in the standard library and has method that modify it Whereas the char array is on able to be modifie by the user	4
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	By using an array of characters you are limited to the size of the array of characters By declaring by type the end of the string is acknowledged by white space	3.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	The data class type string are designed to handle character data and has many functions built into the class library to deal with them An array of characters however is subject to all the same rules of any other array with no real additional functionality Another difference is that the string class deals with the null character implicitly unlike an array of characters which must handle the null character explicitly	5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	string declared used in an array of characters contains each character in the array and a special string - termination character called the null character versus the type string	5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	A char array reads a string as each individual character A string literal array reads the entire string	3
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	array of characters can only hold as many characters as the array size and strings are not that limited	4
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	Stings can only be modified by functions of the String class an array of characters can be modified by the user	3.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	if by type string the array contains an additional terminating null character	4
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	The array of characters has a null character 0 at the end of the array to signify the array end The string does not have this	5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	strings with type string are just that Strings They are not part of an array list at all where as one declared by an array is actually an array of characters able to be pointed and detected	3
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	the array of characters has a set length while the type string has virtually unlimited length	4
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	Char array Individual letters can be accessed directly with array subscript notation String array array subscript will return the entire string	2
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	array of characters need a termination character as well as size specification whether its explicit or implicit	5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	when using an array individual characters can be accessed and manipulated	2.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	strings declared using an array of characters could result in data loss if character array not initialized large enough	4
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	an array is passed by reference therefore if an array of characters is changed the memory is changed not just the variable	3.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	the type string has several built - in functions not available when using a char array but the individual characters in an array or more directly accessible than the characters in a string type string	3.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	declaring a string it includes white spaces but declaring a array of character does not include white spaces	1.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	an array of characters has one element a string doesnt have it is the termination element or null	5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	Strings declared using the type string can vary in length Strings declared using an array of characters can not extend past the array length	4
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	cant modify individual characters of a type string array character type array can modify individual characters	2.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	the type string is a class and is safer while the other is just an array of characters	3.5
What is the main difference between strings declared using the type string versus strings declared using an array of characters	Unlike in a string declared using type string in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character	array it is the collection of similar data types ex : int a 10 ten indicates the size of array is index of array we can give only integer values to array of a where as string mean collection of group of characters string declarations have a datatype usually causes storage to be allocated in memory that is capable of holding some predetermined number of symbols However Arrays can be declared to contain values of any non reference data type Multiple arrarys of the same type	2.5
How are arrays passed to functions	by reference	a reference pointer to an element in the array	4.5
How are arrays passed to functions	by reference	you must pass the array and its size to the function Ex function - LRB - array size - RRB - ;	4
How are arrays passed to functions	by reference	Usually the same way you pass anything else you do not have to specify the length of a char array just pass it to the function by sending the name of the array Example : char str 20 ; isPalindrome - LRB - str - RRB - ; or or this sends the char array to the function isPalindrome Otherwise would need to send the length of the array as well	3.5
How are arrays passed to functions	by reference	you pass a pointer to the first item and also pass the size	3.5
How are arrays passed to functions	by reference	In two parts the array itself and it is size so that the function it is being passed to can avoid out of bounds errors	4
How are arrays passed to functions	by reference	the same way but with at the declaration and the actual function	3
How are arrays passed to functions	by reference	specify the array name without brackets	3
How are arrays passed to functions	by reference	They are called by the function then the function must loop through the array to get the set of characters	2
How are arrays passed to functions	by reference	The function recieves both the array and the array size as parameters function - LRB - arrayName arraySize - RRB -	4
How are arrays passed to functions	by reference	1st you must specify the array name without brackets and then the array name and size are passed as two arguments in the function call	4
How are arrays passed to functions	by reference	function - LRB - int int length - RRB -	4
How are arrays passed to functions	by reference	The function reads the variables stores them then returns the what ever the variable reads The function then prints the content of the array	2.5
How are arrays passed to functions	by reference only	by reference only	5
How are arrays passed to functions	by reference only	a reference pointer to an element in the array	4.5
How are arrays passed to functions	by reference only	Arrays are passed to functions by reference	5
How are arrays passed to functions	by reference only	Arrays are passed by reference Individual array elements passed by value Functions that take arrays as arguments Function prototypes may include parameter names const array parameters	5
How are arrays passed to functions	by reference only	Arrays are passed by reference	5
How are arrays passed to functions	by reference only	you must pass the array and its size to the function Ex function - LRB - array size - RRB - ;	4
How are arrays passed to functions	by reference only	Usually the same way you pass anything else you do not have to specify the length of a char array just pass it to the function by sending the name of the array Example : char str 20 ; isPalindrome - LRB - str - RRB - ; or or this sends the char array to the function isPalindrome Otherwise would need to send the length of the array as well	3.5
How are arrays passed to functions	by reference only	you pass a pointer to the first item and also pass the size	3.5
How are arrays passed to functions	by reference only	By reference	5
How are arrays passed to functions	by reference only	In two parts the array itself and it is size so that the function it is being passed to can avoid out of bounds errors	4
How are arrays passed to functions	by reference only	Specify array name without brackets Array size is normally passed as another argument so the function can process the specific number of elements in the array Arrays are passed by reference Individual array elements passed by value Functions that take arrays as arguments	5
How are arrays passed to functions	by reference only	Arrays are passed by reference	5
How are arrays passed to functions	by reference only	the same way but with at the declaration and the actual function	3
How are arrays passed to functions	by reference only	specify the array name without brackets	3
How are arrays passed to functions	by reference only	by reference	5
How are arrays passed to functions	by reference only	You pass the name of the array to the function So for : int bin 10 ; you pass it to an array like so : jingle - LRB - bin - RRB - ; but jingle must be declared correctly in order to receive an array either with prototype void jingle - LRB - int - RRB - ; or with the definition in its initialization : void jingle - LRB - int array - RRB - ; It is also worth noting that arrays are passed to function by reference so as to not copy large arrays over and over and burn memory This gives the function complete control over the array however	5
How are arrays passed to functions	by reference only	They are called by the function then the function must loop through the array to get the set of characters	2
How are arrays passed to functions	by reference only	by reference by default unless you specify const at which the later will make the array unmodifiable	5
How are arrays passed to functions	by reference only	The function recieves both the array and the array size as parameters function - LRB - arrayName arraySize - RRB -	4
How are arrays passed to functions	by reference only	specifying array name and passing as reference in an argument into the function	5
How are arrays passed to functions	by reference only	1st you must specify the array name without brackets and then the array name and size are passed as two arguments in the function call	4
How are arrays passed to functions	by reference only	arrays are passed by reference passing the starting address of array programmer specifies the array name without brackets and passes the array size as another argument so the function can process the specific number of elements in the array	5
How are arrays passed to functions	by reference only	by reference only	5
How are arrays passed to functions	by reference only	by reference	5
How are arrays passed to functions	by reference only	by reference	5
How are arrays passed to functions	by reference only	by refrence	5
How are arrays passed to functions	by reference only	function - LRB - int int length - RRB -	4
How are arrays passed to functions	by reference only	by reference	5
How are arrays passed to functions	by reference only	by reference	5
How are arrays passed to functions	by reference only	The function reads the variables stores them then returns the what ever the variable reads The function then prints the content of the array	2.5
What is the difference between an array declared as static and one that is not	The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called	a static array can only be referenced not accessed Also static arrays can be used without creating an object	4
What is the difference between an array declared as static and one that is not	The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called	A program intializes static local arrays when their declarations are first encountered If a static array is not initialized explicityly by the programmer earch element of that array is intialized to zero by the compiler when the array is created Non - static array members cannot be initialized at all in C plus plus	4
What is the difference between an array declared as static and one that is not	The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called	Arrays that are static remain the same size throughout the program execution	4
What is the difference between an array declared as static and one that is not	The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called	An array declared as static is available from beginning of program to end One with o static declaration disappears if it is not accessed within the right scope	4.5
What is the difference between an array declared as static and one that is not	The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called	a static array has pre - runtime size and that size cannot be changed A dynamic array gets its size at runtime	3
What is the difference between an array declared as static and one that is not	The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called	All elements are initialized to zero if not explicitly initialized this does not happen for automatic local arrays	4.5
What is the difference between an array declared as static and one that is not	The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called	All elements are initialized to zero if not explicitly initialized for a static array while a non - static array is not initialized to zero	4.5
What is the difference between an array declared as static and one that is not	The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called	static cannot be changed	3
What is the difference between an array declared as static and one that is not	The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called	A static array has a set size that cannot change The data may not need all of the space assigned or could go beyond the size	4
What is the difference between an array declared as static and one that is not	The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called	A static member prevents naming conflicts - LRB - not put into global namespace - RRB - while allowing for information hiding - LRB - private public - RRB -	3
What is the difference between an array declared as static and one that is not	The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called	Static arrays are those with a declared size that is known to the program whereas non - static arrays leave the size undeclared and open so it can be assigned later Usually used for input purposes	3
What is the difference between an array declared as static and one that is not	The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called	the static array exists for the duration of the program	4.5
What is the difference between an array declared as static and one that is not	The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called	an array declared as static can only be declared once	3.5
What is the difference between an array declared as static and one that is not	The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called	not answered	0
What is the difference between an array declared as static and one that is not	The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called	A static array cannot be changed in the program	3
What is the difference between an array declared as static and one that is not	The arrays declared as static live throughout the life of the program; that is they are initialized only once when the function that declares the array it is first called	if they are declared fixed or static that means they cannot change size once their storage has been allocated however one that is not or dynamic arrarys can be resized	3
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	a static array can only be referenced not accessed Also static arrays can be used without creating an object	4
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	An array declared as static is not created and and initialized each time the function and it is also not destroyed when the function terminates	5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	A program intializes static local arrays when their declarations are first encountered If a static array is not initialized explicityly by the programmer earch element of that array is intialized to zero by the compiler when the array is created Non - static array members cannot be initialized at all in C plus plus	4
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	Arrays that are static remain the same size throughout the program execution	4
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	a static array will only be initilized once a non static array will be re - initilized once the program reaches the initilization line again	5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	An array declared as static is available from beginning of program to end One with o static declaration disappears if it is not accessed within the right scope	4.5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	a static array has pre - runtime size and that size cannot be changed A dynamic array gets its size at runtime	3
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	If an array is declared as static it is not created each time the array is called	5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	An array that is not declared as static will re - initialize every time the function declaring it is called A static array will initialize only once at the declaration and will store the values in it is elements throughout the duration of the program even if the same function is called multiple times a static array will only initialize once	5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	All elements are initialized to zero if not explicitly initialized this does not happen for automatic local arrays	4.5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	All elements are initialized to zero if not explicitly initialized for a static array while a non - static array is not initialized to zero	4.5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	static cannot be changed	3
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	A static array has a set size that cannot change The data may not need all of the space assigned or could go beyond the size	4
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	A static member prevents naming conflicts - LRB - not put into global namespace - RRB - while allowing for information hiding - LRB - private public - RRB -	3
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	A static local array exists for the duration of the program and its elements are initialized to 0 if not explicitly initialized So a static local array elements will still be the same when called later unless specifically initialized to something else This does not happen for automatic arrays	5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	Static arrays are those with a declared size that is known to the program whereas non - static arrays leave the size undeclared and open so it can be assigned later Usually used for input purposes	3
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	static arrays keep the values after the end of a function while non static reinitialize every time	5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	Static arrays are created and initialized only once and the values are not destroyed when the function terminates in the program Automatic arrays reset everytime the function is called	5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	its not created and initialized each time program calls the function and is not destroyed every time the function ends in the program	5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	When we declare it static the array is not destroyed after the function is over When an array is not declared as static the array is created and initialized every time a function calls it	5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	the static array exists for the duration of the program	4.5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	an array declared as static can only be declared once	3.5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	A static array exists in memory until the program terminates whereas an automatic - LRB - or normal - RRB - array is removed when the function that created it terminates	5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	not answered	0
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	Only constants can be used to declare the size of automatic and static arrays Exists for the duration of the program Is initialized when its declaration is first encountered All elements are initialized to zero if not explicitly initialized	5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	A static array cannot be changed in the program	3
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	static arrays are available throughout the program	5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	a static array is allocated when the program starts and is freed when the program exits but has limited scope while an array that is not declared static is allocated and freed when it comes into and out of scope	5
What is the difference between an array declared as static and one that is not	a static array will store the new values that were assigned to each of its elements meaning if you call a function twice it will use the last values that were returned the first time if you do not declare it static then the new values will not be stored and will be reset to their original value	if they are declared fixed or static that means they cannot change size once their storage has been allocated however one that is not or dynamic arrarys can be resized	3
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	at least 2 depending on how many arrays are being used	2.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	all of them	3.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	It depends what parameters you are passing in a multidimensional A multideminsional can have more than two dimensions	3.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	All of the dimensions must be specified	3.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	just the first one at least	2
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	Two paramaters the array and how many columns array - LRB - a 3 - RRB -	4
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	The size of the first dimension can be omitted same as a regular array However for every dimension outside the first the size of those dimensions must be specified when passed for example a multi - dimensional array of 2 4 6 with the name MultiArray would be passed as : MultiArray 4 6 2	4.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	Size of subsequent dimensions are required Compiler must know how many elements to skip to move to the second element in the first dimension	4.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	both	2.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	when passing - LRB - in main - RRB - a multidimensional array to a function no dimensions need be specified	2
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	as many as there are dimensions Most commonly just rows and columns	3.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	at least 2 but it should always equal the number of dimensions that the argument is expecting like blah will require 4 dimensional array input blah will require a 3 dimensional array blah will require a 2 dimensional array	3
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	None just pass the array name	2
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	the first needs to be specified by size and the rest need only be stated - LRB - first like this 3 then - RRB -	3
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	one less than the number of dimensions the array contains	4.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	not answered	0
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	one	2
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	two or more	2.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	1 less than the total number of dimensions	4.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	All the dimensions except the first one	Multi dimensional arrays are accessed using more than 1 index one for each dimension at least	3.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	at least 2 depending on how many arrays are being used	2.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	all of them	3.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	It depends what parameters you are passing in a multidimensional A multideminsional can have more than two dimensions	3.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	The first dimension is not required however the subsequent dimension - LRB - s - RRB - are needed for the compiler	5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	all but the first	5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	All of the dimensions must be specified	3.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	just the first one at least	2
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	Two paramaters the array and how many columns array - LRB - a 3 - RRB -	4
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	The size of the first dimension can be omitted same as a regular array However for every dimension outside the first the size of those dimensions must be specified when passed for example a multi - dimensional array of 2 4 6 with the name MultiArray would be passed as : MultiArray 4 6 2	4.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	Size of subsequent dimensions are required Compiler must know how many elements to skip to move to the second element in the first dimension	4.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	Every dimension after the first	5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	both	2.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	the size of the first dimension does not need to be specified but all other dimensions do	5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	when passing - LRB - in main - RRB - a multidimensional array to a function no dimensions need be specified	2
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	All dimensions except for the first one need to be specified when passing an array to a function the compiler needs to know how many memory addresses to skip to make it back to the 2nd element in the first dimension The size of the first dimension does not need to be specified	5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	as many as there are dimensions Most commonly just rows and columns	3.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	at least 2 but it should always equal the number of dimensions that the argument is expecting like blah will require 4 dimensional array input blah will require a 3 dimensional array blah will require a 2 dimensional array	3
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	None just pass the array name	2
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	all subsequent dimensions after the first dimension first is not needed to be specified	5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	all dimensions excluding the first one	5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	all dimensions but the first	5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	the first needs to be specified by size and the rest need only be stated - LRB - first like this 3 then - RRB -	3
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	one less than the number of dimensions the array contains	4.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	not answered	0
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	one	2
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	All subsequent dimensions after the first one	5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	two or more	2.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	1 less than the total number of dimensions	4.5
How many dimensions need to be specified when passing a multi - dimensional array as an argument to a function	When passing a multi - dimensional array all dimensions must be specified except for the first dimension	Multi dimensional arrays are accessed using more than 1 index one for each dimension at least	3.5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Run - time error	compilation error	1
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Run - time error	compilation error	1
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Run - time error	compilation error	1
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Run - time error	Generates a compilation error The compiler will complain that the variable you are referring to was never declared	1
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Run - time error	Compilation error	1
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Run - time error	compilation error	1
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Run - time error	not answered	0
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Run - time error	compilation error	1
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Run - time error	compilation error	1
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	compilation error	1
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	compilation error	1
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	Using an index outside the bounds of the array generates a run - time error	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	run - time error	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	Its a run - time error	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	run time error	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	Run - time error	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	run - time error	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	compilation error	1
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	This is a run - time error The program will compile AND execute so these errors can be difficult to debug	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	this is a run - time error or execution - time error	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	Run - time	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	run time	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	Generates a compilation error The compiler will complain that the variable you are referring to was never declared	1
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	run - time	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	Run - time error	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	run time error	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	runtime error	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	Compilation error	1
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	run - time error	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	run - time error	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	run - time error	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	compilation error	1
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	run - time error	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	not answered	0
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	run - time error	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	compilation error	1
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	compilation error	1
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	It will NOT cause a compilation error It will either give a run - time error or will give the value at that actual location in memory causing a logic error	5
Using an index outside the bounds of the array generates an error Is this a compilation error or a run - time error	Using an index outside the bounds of the array generates a run - time error	it is a run - time error	5
How are bi - dimensional arrays stored in memory by rows or by columns	By rows	usually it is by rows then followed by the column but it is up to the programmer to determine how values are stored in bi - dimensional arrays	2.5
How are bi - dimensional arrays stored in memory by rows or by columns	By rows	A bi - dimensional or two - dimensional array is stored in a row - column matrix Where the first index indicates the row and the second indicates the column This means that when array elements are accessed in the order in which they are actually stored in memory the right index changes faster than the left	4.5
How are bi - dimensional arrays stored in memory by rows or by columns	By rows	m - by - n by row - column	4
How are bi - dimensional arrays stored in memory by rows or by columns	By rows	By column	1
How are bi - dimensional arrays stored in memory by rows or by columns	By rows	columns	1
How are bi - dimensional arrays stored in memory by rows or by columns	By rows	Both they are stored in seperate sections	2.5
How are bi - dimensional arrays stored in memory by rows or by columns	By rows	by rows then columns	4.5
How are bi - dimensional arrays stored in memory by rows or by columns	By rows	by row and column	2.5
How are bi - dimensional arrays stored in memory by rows or by columns	By rows	No answer	1
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	usually it is by rows then followed by the column but it is up to the programmer to determine how values are stored in bi - dimensional arrays	2.5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	by rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	Multi - dimensional arrays are stored in memory by rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	A bi - dimensional or two - dimensional array is stored in a row - column matrix Where the first index indicates the row and the second indicates the column This means that when array elements are accessed in the order in which they are actually stored in memory the right index changes faster than the left	4.5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	They are stored in memory in rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	By rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	by rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	m - by - n by row - column	4
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	bi - dimensional arrays are stored by rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	By rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	By column	1
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	columns	1
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	By rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	by - dimensional arrays are stored by row	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	x by y is row by column So x is rows and y is columns Since the length of the row is not needed when passing the array to the function this leads me to believe that bi - dimensional arrays are stored by rows at a time	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	Both they are stored in seperate sections	2.5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	by rows then columns	4.5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	Rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	by rows of rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	by rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	stored by rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	by rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	by rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	by rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	by row and column	2.5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	by rows	5
How are bi - dimensional arrays stored in memory by rows or by columns	by rows	No answer	1
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	Takes an element of an array and compares it with the next element depending on the values of the two elements they will switch and then the program will compare the new switched element with the next one in the array	3
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	The sorted array or list is built one entry at a time	3.5
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	Compare two numbers at a time and swap until the entire list is sorted	2
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	insertion sort is were after k iterations the first k items in the array are sorted it take the k plus 1 item and inserts it into the correct position in the already sorted k elements	4.5
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	Looking at the 2nd element move forward and place the element in the correct spot	4.5
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	Take a number and choose a pivot point and insert the number in the correct position from the pivot point	3
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	have a marker and sort everything to the left of the value for every new value when moving to the right	3
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	The main idea behind insertion sort is to take a random variable from the right and insert it in order to the left	4.5
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	Insertion sort progresses through a list of elements and determines where the next element should be inserted into an already sorted array starting with sorting and using the first two elements	4.5
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	it goes through the list only once picking each integer and putting it in its desired position then continuing	4
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	Inserting array items in to their appropriate positions from smallest to largest at a pivot which starts on the second element of the array	3.5
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	Insert the item into its proper position by shifting larger sorted array values to the right	3
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	a comparison sort in which the sorted array is built one entry at a time	4
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	Insertion sort is an algorithm where the first element of the array is in the sorted list all the other pick one by one and taken from the unsorted array to the sorted array	4.5
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	the insertion sort creates a new array and inserts each item in its place with respect to the new array	4
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	Starting with the first element in the array each following element is put in place by determining if it is smaller or larger than the starting element	4
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	one by one each item is taken and placed into the correct place in the sorted portion of the array until there are no more items	4.5
In one sentence what is the main idea implemented by insertion sort	Taking one array element at a time from left to right it inserts it in the right position among the already sorted elements on its left	Insertion sort is a simple sorting algorithm a comparison sort in which the sorted array - LRB - or list - RRB - is built one entry at a time	4
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	Takes an element of an array and compares it with the next element depending on the values of the two elements they will switch and then the program will compare the new switched element with the next one in the array	3
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	The sorted array or list is built one entry at a time	3.5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	It starts with the second element and checks it to see if it is less than the element - LRB - s - RRB - to the left of it and if it is it inserts it into its corrected position	5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	Compare two numbers at a time and swap until the entire list is sorted	2
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	Assume the first number is sorted then move down the list and insert the numbers you come across into the corresponding place on the sorted side of the list	5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	insertion sort is were after k iterations the first k items in the array are sorted it take the k plus 1 item and inserts it into the correct position in the already sorted k elements	4.5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	Looking at the 2nd element move forward and place the element in the correct spot	4.5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	Starting at the beginning of an array take each element in order and place it in it is correct position relative to all previously sorted elements	5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	To sort the elements in an array by removing an element from the input data and inserting it at the correct position	5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	Insertion sort removes an element from the data and inserts it at the correct position in the already sorted list	5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	Take a number and choose a pivot point and insert the number in the correct position from the pivot point	3
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	have a marker and sort everything to the left of the value for every new value when moving to the right	3
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	The main idea behind insertion sort is to take a random variable from the right and insert it in order to the left	4.5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	Insertion sort progresses through a list of elements and determines where the next element should be inserted into an already sorted array starting with sorting and using the first two elements	4.5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	it goes through the list only once picking each integer and putting it in its desired position then continuing	4
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	Inserting array items in to their appropriate positions from smallest to largest at a pivot which starts on the second element of the array	3.5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	Insert the item into its proper position by shifting larger sorted array values to the right	3
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	a comparison sort in which the sorted array is built one entry at a time	4
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	Insertion sort is an algorithm where the first element of the array is in the sorted list all the other pick one by one and taken from the unsorted array to the sorted array	4.5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	Every iteration of an insertion sort takes away an element from the input data inserting it at the right position in the sorted list	5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	the insertion sort creates a new array and inserts each item in its place with respect to the new array	4
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	Insertion sort takes each entitity of an unsorted array in order and sorts it into the correct position between the entities it has sorted	5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	it takes the second element and swaps it with the 1st if it is less and keeps it there if its larger then it goes to the third element and inserts it in the right places with respect to the first 2 elements and so on	5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	Starting with the first element in the array each following element is put in place by determining if it is smaller or larger than the starting element	4
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	one by one each item is taken and placed into the correct place in the sorted portion of the array until there are no more items	4.5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	you take each element and insert it in the correct position with respect to all the elements before it	5
In one sentence what is the main idea implemented by insertion sort	Insertion sort divides the list into sorted and unsorted regions then takes each item from the unsorted region and inserts it into its correct order in the sorted region	Insertion sort is a simple sorting algorithm a comparison sort in which the sorted array - LRB - or list - RRB - is built one entry at a time	4
In one sentence what is the main idea implemented by selection sort	Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element	Selection sort searches the whole array for the largest item and puts it at the end of the array then searches for the second largest item and puts it at the second to last spot and so on	4.5
In one sentence what is the main idea implemented by selection sort	Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element	Find the lowest value and place it at the front then find the next lowest and place it in front of the last value etc	4.5
In one sentence what is the main idea implemented by selection sort	Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element	Cycle through the unsorted list place the minimum in the next slot in the sorted list and repeat	4.5
In one sentence what is the main idea implemented by selection sort	Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element	To sort the elements by comparing two elements and swapping the smaller one to sort the elements in the array	3.5
In one sentence what is the main idea implemented by selection sort	Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element	Selection sort finds the minimum value in the list swaps it with the first value in the list and repeats throughout the list	4.5
In one sentence what is the main idea implemented by selection sort	Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element	The main idea behind selection sort is to take the least variable from the right and put it directly to the left	4.5
In one sentence what is the main idea implemented by selection sort	Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element	It runs through and finds the lowest - LRB - or highest - RRB - value and puts it in its desired position	4.5
In one sentence what is the main idea implemented by selection sort	Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element	Search for the largest item in an array and swap it with the last unsorted item	4.5
In one sentence what is the main idea implemented by selection sort	Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element	Selection sort is an algorithm that selects the larges item the array and puts it in its place; then select the next largest until the array is sorted	4.5
In one sentence what is the main idea implemented by selection sort	Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element	the selection sort chooses the largest or smallest value in an unsorted list and creates a new list using the selection depending on how it is sorted	4.5
In one sentence what is the main idea implemented by selection sort	Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element	Selection sort finds the smallest number left unsorted in an array and puts it at the end of what it has sorted	4.5
In one sentence what is the main idea implemented by selection sort	Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element	To put the biggest element at the end of the list and place the next highest element behind it and so on	3.5
In one sentence what is the main idea implemented by selection sort	Taking one array element at a time from left to right it identifies the minimum from the remaining elements and swaps it with the current element	the sort finds the largest item and places it at the end then then next largest is found and placed next to last continue until there is only one number left this is the beginning of the sorted array	4.5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Selection sort searches the whole array for the largest item and puts it at the end of the array then searches for the second largest item and puts it at the second to last spot and so on	4.5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Finds the minimum value and swap it with the value in the first position	5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	It finds the minimum element in the array and swaps it with the first element then repeats this step swapping the minimum element with nth positions in the array	5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Find the lowest value and place it at the front then find the next lowest and place it in front of the last value etc	4.5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Cycle through the unsorted list place the minimum in the next slot in the sorted list and repeat	4.5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	find the minimum value in the list swap it with the first element in the list the find the second largest and swap it with the second element in the array continue like this until the array is sorted	5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Find the smallest and put it in the current position till you get to the end	5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Find the lowest unsorted value in the array and place it at the current position - LRB - starting at the first element in the array - RRB - and advance the current position by one	5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	To sort the elements by comparing two elements and swapping the smaller one to sort the elements in the array	3.5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Selection sort finds the minimum value in the list swaps it with the first value in the list and repeats throughout the list	4.5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Select the minimum number from the array and put it in the current position then move on	5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Find the lowest value and place it in the front of the list and swap it with that value Continue moving right	5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	The main idea behind selection sort is to take the least variable from the right and put it directly to the left	4.5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Find the smallest value in the list and make it the first element then find the smallest value of the leftover list and make it the first element of the leftover list and continue until the list is sorted	5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	It runs through and finds the lowest - LRB - or highest - RRB - value and puts it in its desired position	4.5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Places the smallest item in the list at position 1 and then proceeds to each value until the last position of the ray is reached	5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Search for the largest item in an array and swap it with the last unsorted item	4.5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	finds the smallest element and places in 1st position then the process is repeated on the rest of the array	5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Selection sort is an algorithm that selects the larges item the array and puts it in its place; then select the next largest until the array is sorted	4.5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Select the smallest number in the list and move it to the front of the list and then advance to the next number	5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	the selection sort chooses the largest or smallest value in an unsorted list and creates a new list using the selection depending on how it is sorted	4.5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Selection sort finds the smallest number left unsorted in an array and puts it at the end of what it has sorted	4.5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	selects the minimum from the remaining elements of the array and palces the miminum in the current position and moves to the next position	5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	To put the biggest element at the end of the list and place the next highest element behind it and so on	3.5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	the sort finds the largest item and places it at the end then then next largest is found and placed next to last continue until there is only one number left this is the beginning of the sorted array	4.5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	you loop through the entire list and for each iteration you find the smallest element and move it to the current position	5
In one sentence what is the main idea implemented by selection sort	Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front	Find the minimum value in the list swap it with the value in the first position; repeat the steps above for remainder of the list - LRB - starting in the second position	5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	The run time for this sorting program is n to the power of 2 Best case is the list is already sorted worst case is the list is sorted but in reverse	3.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	Insertion sort is O - LRB - n - RRB - and performs n minus 1 operations in the best - case scenario which is when the list or array is already sorted	4.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	The number of operations for insertions sort under best - case is n - LRB - n minus 1 - RRB - divided by 2 The best case for insertion sort is on a sorted list where it runs is O - LRB - n - RRB -	3
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	Best case would be O - LRB - n - RRB - or n minus 1 because that is what it takes to scan the array and make one swap The array would then be sorted and would take only 1 operation	4
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	Best case - 1 Worst Case - N	2
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	O - LRB - n - RRB -	3.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	Best case is all elements sorted n minus 1	4
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	1 operation the best case scenario s where it is already sorted and does one comparision	3
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	n operations where n is the number of items	4
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	n minus 1	3.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	O - LRB - n - RRB - the list is already sorted	4.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	Insertion sort will take n minus 1 operations if the array is in reverse order	4
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	1 where there is a list of two ints and only one must be moved	2.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	Best case is N while the worst case is N factorial	3
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	n minus 1 The best case is when the array is already sorted	4.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	worst case its equals O - LRB - n - RRB - time best case its equals O - LRB - n to the power of 2 - RRB - time	3
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	O - LRB - n - RRB -	3.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	insertion sort will make zero operations - LRB - and length 1 comparisons - RRB - in the best case scenario that is when the array its given is already in order	3.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	theta - LRB - n - RRB - the best case senario is that everything is already sorted	4.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	it could be considered that having only one item would be the easiest to sort but this could also be a trivial result as nothing is moved having two items allows the algorithm to sort the items into the correct order	2.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	the best case is if it only has to look through the list once The best case scenario is when it goes through the list and does not have to make any changes - LRB - the list is already sorted - RRB -	4
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	N - LRB - the length of the array - RRB - operations achieved for a sorted array	very simplistic it moves one element from the list by one and inserting them in their correct position into a new slot then starting over best case is - LRB - 0 - RRB - 1	2.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	The run time for this sorting program is n to the power of 2 Best case is the list is already sorted worst case is the list is sorted but in reverse	3.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	Insertion sort is O - LRB - n - RRB - and performs n minus 1 operations in the best - case scenario which is when the list or array is already sorted	4.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	The number of operations for insertions sort under best - case is n - LRB - n minus 1 - RRB - divided by 2 The best case for insertion sort is on a sorted list where it runs is O - LRB - n - RRB -	3
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	Best case would be O - LRB - n - RRB - or n minus 1 because that is what it takes to scan the array and make one swap The array would then be sorted and would take only 1 operation	4
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	Best case - 1 Worst Case - N	2
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	O - LRB - n - RRB -	3.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	Best case is all elements sorted n minus 1	4
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	The best case scenario for an insertion sort where all the elements of the array have been already sorted will cause the for loop to iterate x times - LRB - x being the number of elements in the array - RRB - and the while loop to never have to iterate resulting in the insertion sort to require x operations	5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	1 operation the best case scenario s where it is already sorted and does one comparision	3
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	n operations where n is the number of items	4
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	n minus 1	3.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	O - LRB - n - RRB - the list is already sorted	4.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	Insertion sort will take n minus 1 operations if the array is in reverse order	4
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	In the best case scenario of an already sorted list insertion sort will progress once through the list So the number of operations is directly proportional to the number of elements in the list Also noted as O - LRB - n - RRB - in big o notation	5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	1 where there is a list of two ints and only one must be moved	2.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	Best case is N while the worst case is N factorial	3
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	n minus 1 The best case is when the array is already sorted	4.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	worst case its equals O - LRB - n - RRB - time best case its equals O - LRB - n to the power of 2 - RRB - time	3
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	O - LRB - n - RRB -	3.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	N number of times Where N equals the number of elements in the list Best - case scenario is that the elements in the list are already sorted	5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	the best case scenario for insertion sort is a list that is already sorted the number of operations would be the same as the number of elements	5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	insertion sort will make zero operations - LRB - and length 1 comparisons - RRB - in the best case scenario that is when the array its given is already in order	3.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	theta - LRB - n - RRB - the best case senario is that everything is already sorted	4.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	n operations The best case scenario is when all the numbers are in increasing order	5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	it could be considered that having only one item would be the easiest to sort but this could also be a trivial result as nothing is moved having two items allows the algorithm to sort the items into the correct order	2.5
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	the best case is if it only has to look through the list once The best case scenario is when it goes through the list and does not have to make any changes - LRB - the list is already sorted - RRB -	4
What is the number of operations for insertion sort under a best - case scenario and what is the best - case scenario	It will do - LRB - n - RRB - operations where - LRB - n - RRB - is the number of elements in the array Best case is when all the elements are already sorted	very simplistic it moves one element from the list by one and inserting them in their correct position into a new slot then starting over best case is - LRB - 0 - RRB - 1	2.5
What is the base case for a recursive implementation of merge sort	When the size of the array to be sorted is 1 - LRB - or 2 - RRB -	The best case is the same as the worst case O - LRB - n log n - RRB - for a recursive merge sort	2
What is the base case for a recursive implementation of merge sort	When the size of the array to be sorted is 1 - LRB - or 2 - RRB -	O - LRB - nlog - LRB - n - RRB - - RRB -	2.5
What is the base case for a recursive implementation of merge sort	When the size of the array to be sorted is 1 - LRB - or 2 - RRB -	If the array being sorted has 0 or 1 elements	4.5
What is the base case for a recursive implementation of merge sort	When the size of the array to be sorted is 1 - LRB - or 2 - RRB -	T - LRB - n - RRB - equals 0 if n is less than 2	4
What is the base case for a recursive implementation of merge sort	When the size of the array to be sorted is 1 - LRB - or 2 - RRB -	O - LRB - nlog - LRB - n - RRB - - RRB -	2
What is the base case for a recursive implementation of merge sort	When the size of the array to be sorted is 1 - LRB - or 2 - RRB -	n multiplied by log - LRB - n - RRB -	2
What is the base case for a recursive implementation of merge sort	When the size of the array to be sorted is 1 - LRB - or 2 - RRB -	where you only must merge sort once	3.5
What is the base case for a recursive implementation of merge sort	When the size of the array to be sorted is 1 - LRB - or 2 - RRB -	if the array length is less than or equal to 1 then that array is returned to the other array and merged together	4.5
What is the base case for a recursive implementation of merge sort	When the size of the array to be sorted is 1 - LRB - or 2 - RRB -	if - LRB - right is greater than left - RRB - mid equals - LRB - right plus left - RRB - divided by 2; m sort - LRB - numbers temp left mid - RRB - ; m sort - LRB - numbers temp mid plus 1 right - RRB - ; merge - LRB - numbers temp left mid plus 1 right - RRB - ;	2
What is the base case for a recursive implementation of merge sort	When the size of the array to be sorted is 1 - LRB - or 2 - RRB -	When there is only one element in the array or when the starting element in the array is the same as the ending element	4.5
What is the base case for a recursive implementation of merge sort	When the size of the array to be sorted is 1 - LRB - or 2 - RRB -	when each half or the original array has nothing else to sort and puts the halfs back together	2.5
What is the base case for a recursive implementation of merge sort	When the size of the array to be sorted is 1 - LRB - or 2 - RRB -	the size of the list being sent is is less than or equal to 1	4.5
What is the base case for a recursive implementation of merge sort	When the size of the array to be sorted is 1 - LRB - or 2 - RRB -	O - LRB - n log n - RRB -	2
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	The base case for a recursive implementation of merge sort is when the sequence being passed to merge sort has less than 2 elements	5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	The base case for a recursive implementation of merge sort is one	5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	The best case is the same as the worst case O - LRB - n log n - RRB - for a recursive merge sort	2
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	there is one object in the split array to sort	5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	The base case is when the length of the current array is 1	5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	O - LRB - nlog - LRB - n - RRB - - RRB -	2.5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	Best case is one element One element is sorted	5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	If the array being sorted has 0 or 1 elements	4.5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	T - LRB - n - RRB - equals 0 if n is less than 2	4
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	A list size of 1 where it is already sorted	5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	Single element in the array	5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	O - LRB - nlog - LRB - n - RRB - - RRB -	2
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	n multiplied by log - LRB - n - RRB -	2
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	A list or array of only 1 element	5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	where you only must merge sort once	3.5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	A single Element on the Array	5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	There is only one element in the subarray	5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	if the array length is less than or equal to 1 then that array is returned to the other array and merged together	4.5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	if - LRB - right is greater than left - RRB - mid equals - LRB - right plus left - RRB - divided by 2; m sort - LRB - numbers temp left mid - RRB - ; m sort - LRB - numbers temp mid plus 1 right - RRB - ; merge - LRB - numbers temp left mid plus 1 right - RRB - ;	2
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	The sequence of numbers has zero or one elements	5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	one element in an array	5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	array of length 1	5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	the array has one element	5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	When there is only one element in the array or when the starting element in the array is the same as the ending element	4.5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	when each half or the original array has nothing else to sort and puts the halfs back together	2.5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	the size of the list being sent is is less than or equal to 1	4.5
What is the base case for a recursive implementation of merge sort	The base case for a recursive merge sort is one number One number by itself is a sorted list regardless of what number it is	O - LRB - n log n - RRB -	2
What is a pointer	A variable that contains the address in memory of another variable	A data type whose value refers to another value stored elsewhere in the computer memory using its address	4.5
What is a pointer	A variable that contains the address in memory of another variable	a pointer holds a memory location	4.5
What is a pointer	A variable that contains the address in memory of another variable	a name that represents actual location or value of a data type int star of bPtr points to an integer value	4.5
What is a pointer	A variable that contains the address in memory of another variable	It is like a variable however instead of holding data it holds a location in memory	4.5
What is a pointer	A variable that contains the address in memory of another variable	A pointer is a reference to the memory location of an object	4.5
What is a pointer	A variable that contains the address in memory of another variable	It is a variable that contains not only a star of value but has a memory address associated with it and can be moved along a string or an array by jumping up one memory address	3.5
What is a pointer	A variable that contains the address in memory of another variable	Is a reference call to the place in memory where the object is stored	4
What is a pointer	A variable that contains the address in memory of another variable	a variable with a memory address as the value	4.5
What is a pointer	A variable that contains the address in memory of another variable	it is a type that points to something else It is the memory address of something else	4.5
What is a pointer	A variable that contains the address in memory of another variable	A pointer is a way to get at another object Essentially it is a way to grab an instance of an object and then either pass that instance a message or retreive some data from that object A pointer is actually just an address of where an instance is held in memory	4.5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	Its a location in memory that contains the memory address of another location in memory that contains information	5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	A pointer is a variable that contains a memory address as its value	5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	A pointer is a variable which stores the address of another variable	5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	Pointers are variables that contain as their values memory addresses of other variables	5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	A data type whose value refers to another value stored elsewhere in the computer memory using its address	4.5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	a pointer holds a memory location	4.5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	a name that represents actual location or value of a data type int star of bPtr points to an integer value	4.5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	A variable that stores the address of another variable	5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	a pointer is a programming language data type whose value refers directly to - LRB - or points to - RRB - another value stored elsewhere in the computer memory using its address	5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	A data type whose value refers to another value stored somewhere else in the computer memory using its address	5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	It is like a variable however instead of holding data it holds a location in memory	4.5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	A pointer is a reference to a location in memory	5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	A pointer is a reference to the memory location of an object	4.5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	A pointer is a variable that contains the memory address of a variable that has a value	5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	It is a variable that contains not only a star of value but has a memory address associated with it and can be moved along a string or an array by jumping up one memory address	3.5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	Contains a variable memory address as a value	5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	variable that points to the memory address of another variable and it is type specific	5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	An element that references a memory cell	5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	Is a reference call to the place in memory where the object is stored	4
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	a variable that contains the address of another variable	5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	A pointer variable contains the number of a memory address as its value which may be null or 0 or the address of some value stored in memory	5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	A pointer is a variable that contains a memory address of anther variable	5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	A variable that contains the memory address of another variable that contains a specific value	5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	a variable with a memory address as the value	4.5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	it is a type that points to something else It is the memory address of something else	4.5
What is a pointer	Its a location in memory that contains the memory address of another location in memory that contains information	A pointer is a way to get at another object Essentially it is a way to grab an instance of an object and then either pass that instance a message or retreive some data from that object A pointer is actually just an address of where an instance is held in memory	4.5
What does the address - LRB - ADDRESS - RRB - operator return	The memory address of its operand	returns the place in memory of that element	4
What does the address - LRB - ADDRESS - RRB - operator return	The memory address of its operand	The address of the where the data is stored : address of b will return the address of b	4.5
What does the address - LRB - ADDRESS - RRB - operator return	The memory address of its operand	the ampersand - LRB - ADDRESS - RRB - means pass by reference When the function is called a pointer to the variable instead of the variable itself will be passed into the function	3
What does the address - LRB - ADDRESS - RRB - operator return	The memory address of its operand	Returns the address location in memory of the item	4.5
What does the address - LRB - ADDRESS - RRB - operator return	The memory address of its operand	The memory address of operand 0x 000000 or something along those lines	4.5
What does the address - LRB - ADDRESS - RRB - operator return	The memory address of its operand	The object memory address	4.5
What does the address - LRB - ADDRESS - RRB - operator return	The memory address of its operand	the reference to a variable	4.5
What does the address - LRB - ADDRESS - RRB - operator return	The memory address of its operand	returns the address number of the specified variable	4.5
What does the address - LRB - ADDRESS - RRB - operator return	The memory address of its operand	It returns the memory address of it is operand That is if applied to a normal variable it gives the variable memory address just as a pointer variable might	4.5
What does the address - LRB - ADDRESS - RRB - operator return	The memory address of its operand	the address of the variable it is attached to	4
What does the address - LRB - ADDRESS - RRB - operator return	The memory address of its operand	returns the address of what it is put in front of	4.5
What does the address - LRB - ADDRESS - RRB - operator return	The memory address of its operand	returns a pointer	3.5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	This operator returns the memory address of its operand	5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	The address operator returns the memory address of its operand	5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	Returns memory address of its operand	5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	The address - LRB - ADDRESS - RRB - operator returns the memory address of its operand	5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	Returns the memory address of its operand	5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	returns the place in memory of that element	4
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	The address of the where the data is stored : address of b will return the address of b	4.5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	The ADDRESS operator returns the address of a variable	5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	the ampersand - LRB - ADDRESS - RRB - means pass by reference When the function is called a pointer to the variable instead of the variable itself will be passed into the function	3
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	ADDRESS returns the memory address of its operand	5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	the address of the variable in memory	5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	Returns the address location in memory of the item	4.5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	The address operator returns the memory address of its operand	5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	The ADDRESS operator returns the memory address of the variable it precedes	5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	The memory address of operand 0x 000000 or something along those lines	4.5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	The object memory address	4.5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	the reference to a variable	4.5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	returns the memory address of its operand	5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	memory address of its operand	5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	returns the address number of the specified variable	4.5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	It returns the memory address of it is operand That is if applied to a normal variable it gives the variable memory address just as a pointer variable might	4.5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	The ADDRESS is a unary operator that returns the memory address of its operand	5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	the address of the variable it is attached to	4
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	the memory address of its operand	5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	returns the address of what it is put in front of	4.5
What does the address - LRB - ADDRESS - RRB - operator return	This operator returns the memory address of its operand	returns a pointer	3.5
What does the star - LRB - STAR - RRB - operator return	An alias - LRB - synonym - RRB - for the name of the object that its operand points to in memory It is the dereferencing operator	the STAR operator returns the value in the memory address the element points to	4
What does the star - LRB - STAR - RRB - operator return	An alias - LRB - synonym - RRB - for the name of the object that its operand points to in memory It is the dereferencing operator	The STAR returns the value	4
What does the star - LRB - STAR - RRB - operator return	An alias - LRB - synonym - RRB - for the name of the object that its operand points to in memory It is the dereferencing operator	The dereferencing operator returns the dereferenced object	4.5
What does the star - LRB - STAR - RRB - operator return	An alias - LRB - synonym - RRB - for the name of the object that its operand points to in memory It is the dereferencing operator	it returns the information in the address the pointer points to	4
What does the star - LRB - STAR - RRB - operator return	An alias - LRB - synonym - RRB - for the name of the object that its operand points to in memory It is the dereferencing operator	the star operator returns the value at the memory address the pointer is pointing at	4.5
What does the star - LRB - STAR - RRB - operator return	An alias - LRB - synonym - RRB - for the name of the object that its operand points to in memory It is the dereferencing operator	The star operator returns the object at that memory location	4
What does the star - LRB - STAR - RRB - operator return	An alias - LRB - synonym - RRB - for the name of the object that its operand points to in memory It is the dereferencing operator	The STAR operator returns the value of the object memory address it precedes	3.5
What does the star - LRB - STAR - RRB - operator return	An alias - LRB - synonym - RRB - for the name of the object that its operand points to in memory It is the dereferencing operator	The value of the object that the operand points to	4.5
What does the star - LRB - STAR - RRB - operator return	An alias - LRB - synonym - RRB - for the name of the object that its operand points to in memory It is the dereferencing operator	The value stored in the object being pointed to	4
What does the star - LRB - STAR - RRB - operator return	An alias - LRB - synonym - RRB - for the name of the object that its operand points to in memory It is the dereferencing operator	the value of the variable the pointer points to	4
What does the star - LRB - STAR - RRB - operator return	An alias - LRB - synonym - RRB - for the name of the object that its operand points to in memory It is the dereferencing operator	It dereferences a pointer meaning it returns the value stored in the memory address a pointer refers to	4.5
What does the star - LRB - STAR - RRB - operator return	An alias - LRB - synonym - RRB - for the name of the object that its operand points to in memory It is the dereferencing operator	It is unary operator that returns the value of the variable located at the address	4
What does the star - LRB - STAR - RRB - operator return	An alias - LRB - synonym - RRB - for the name of the object that its operand points to in memory It is the dereferencing operator	a reference to a equals variable	2
What does the star - LRB - STAR - RRB - operator return	An alias - LRB - synonym - RRB - for the name of the object that its operand points to in memory It is the dereferencing operator	it returns the actual data at the address pointed to	3.5
What does the star - LRB - STAR - RRB - operator return	An alias - LRB - synonym - RRB - for the name of the object that its operand points to in memory It is the dereferencing operator	will return zero or many characters placed before the operator	2
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	returns a synonym for the object to which its pointer operand points	5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	The star operator returns a synonym for the object to which its pointer operand points	5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	Returns synonym for the object its operand points to	5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	It returns a synonym alias or nickname of the name of the object that its operand points to in memory - LRB - dereferencing the pointer - RRB -	5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	Returns an alias or nickname for the object to which the pointer operand points	5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	the STAR operator returns the value in the memory address the element points to	4
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	The STAR returns the value	4
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	The STAR operator returns the dereferenced pointer variable - LRB - ie : it returns the value of whatever variable the pointer is pointing to - RRB -	5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	The dereferencing operator returns the dereferenced object	4.5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	multiplied by returns the synonym for the object its operand points to	5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	it returns the information in the address the pointer points to	4
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	the star operator returns the value at the memory address the pointer is pointing at	4.5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	The star operator returns the object at that memory location	4
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	The STAR operator returns the value of the object memory address it precedes	3.5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	The value of the object that the operand points to	4.5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	The value stored in the object being pointed to	4
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	the value of the variable the pointer points to	4
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	returns synonym for the object its operand points to	5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	synonym for the object its operand points to	5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	Returns synonym for the object its operand points to	5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	It dereferences a pointer meaning it returns the value stored in the memory address a pointer refers to	4.5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	It is unary operator that returns the value of the variable located at the address	4
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	a reference to a equals variable	2
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	a synonym for the object to which its pointer operand points	5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	it returns the actual data at the address pointed to	3.5
What does the star - LRB - STAR - RRB - operator return	returns a synonym for the object to which its pointer operand points	will return zero or many characters placed before the operator	2
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	The array itself can be signed to a pointer or each element of the array can be assigned to a pointer	3
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	An array can be addressed in pointer or offset notation by setting a pointer variable equal to the variable name of the array Elements of the array can then be accessed by adding an offset value to the pointer variable	4.5
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	Element b n can be accessed by multiplied by - LRB - bPtr plus n - RRB -	4
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	Using either the name of the array as a pointer or using a separate pointer that points to the array	3
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	An element b 3 can be referenced by using multiplied by - LRB - bPtr plus 3 - RRB - instead	4
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	yes multiplied by - LRB - array plus offset - RRB -	4
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	The name of an array is considered to be a pointer in C plus plus and can be passed as such in functions parameters Declaring int a 10 ; creates a pointer a which stores the address of a 0	3.5
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	Element b n can be accessed by multiplied by - LRB - bPtr plus n - RRB - is an example of how an array can be addressed as pointer or offset notation	4.5
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	multiplied by - LRB - array plus element - RRB -	4
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	multiplied by f 3	2.5
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	The pointer to the array will initially point to the first element of that array When the pointer is incremented it will point to the next element and so on	3.5
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	With int x 10 ; int star of xPtr; xPtr equals x; Address address of x 1 is the same as xPtr plus 1	4
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	Takes the number of array elements and points to each at a time	2
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	The array can act as a pointer or be referenced by a pointer multiplied by - LRB - arrayPtr plus 3 - RRB - or multiplied by - LRB - array plus 3 - RRB -	4
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	by using the multiplied by - LRB - pointer plus element - index - RRB -	4
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	using the star operator array : b n can be accessed by multiplied by - LRB - bpointer plus n - RRB -	4.5
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	Element A n can be accessed by multiplied by - LRB - APtr plus n - RRB -	4
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	by referencing a pointer and referring to other pointers relative to the first pointer - LRB - pointer plus 1 pointer plus 2 etc - RRB -	3
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	ADDRESS b 3 is as bptr plus 3 Array can be treated as pointer	3.5
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	a i equals multiplied by - LRB - a plus i - RRB -	4
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	address of b 3 bPtr plus 3	4
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	multiplied by - LRB - arrayName plus index - RRB -	4
How can an array be addressed in pointer or offset notation	By initializing a pointer to point to the first element of the array and then incrementing this pointer with the index of the array element	multi - dimensional array	1
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	The array itself can be signed to a pointer or each element of the array can be assigned to a pointer	3
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	An array can be addressed in pointer or offset notation by setting a pointer variable equal to the variable name of the array Elements of the array can then be accessed by adding an offset value to the pointer variable	4.5
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	Element b n can be accessed by multiplied by - LRB - bPtr plus n - RRB -	4
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	Using either the name of the array as a pointer or using a separate pointer that points to the array	3
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	An element b 3 can be referenced by using multiplied by - LRB - bPtr plus 3 - RRB - instead	4
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	you get the memory location of the first element and the you add an offset to it to get other elements	5
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	yes multiplied by - LRB - array plus offset - RRB -	4
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	The name of an array is considered to be a pointer in C plus plus and can be passed as such in functions parameters Declaring int a 10 ; creates a pointer a which stores the address of a 0	3.5
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	Element b n can be accessed by multiplied by - LRB - bPtr plus n - RRB - is an example of how an array can be addressed as pointer or offset notation	4.5
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	multiplied by - LRB - array plus element - RRB -	4
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	multiplied by f 3	2.5
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	you can have a pointer to the front of the array and add to the memory location - LRB - or offset from the initial value - RRB -	5
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	The pointer to the array will initially point to the first element of that array When the pointer is incremented it will point to the next element and so on	3.5
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	With int x 10 ; int star of xPtr; xPtr equals x; Address address of x 1 is the same as xPtr plus 1	4
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	Takes the number of array elements and points to each at a time	2
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	The array can act as a pointer or be referenced by a pointer multiplied by - LRB - arrayPtr plus 3 - RRB - or multiplied by - LRB - array plus 3 - RRB -	4
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	by using the multiplied by - LRB - pointer plus element - index - RRB -	4
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	using the star operator array : b n can be accessed by multiplied by - LRB - bpointer plus n - RRB -	4.5
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	Element A n can be accessed by multiplied by - LRB - APtr plus n - RRB -	4
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	by referencing a pointer and referring to other pointers relative to the first pointer - LRB - pointer plus 1 pointer plus 2 etc - RRB -	3
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	First some pointer variable must reference the first entity in the array Any variable in the array can then be accessed by referring to that first entity address plus some offset i e ptrToArray equals array; nthEntity equals multiplied by - LRB - ptrToArray plus n - RRB - ;	5
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	ADDRESS b 3 is as bptr plus 3 Array can be treated as pointer	3.5
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	a i equals multiplied by - LRB - a plus i - RRB -	4
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	address of b 3 bPtr plus 3	4
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	multiplied by - LRB - arrayName plus index - RRB -	4
How can an array be addressed in pointer or offset notation	you get the memory location of the first element and the you add an offset to it to get other elements	multi - dimensional array	1
What does the sizeof operator return	The size in bytes of its operand	the number of bytes of an array during program compilation	4.5
What does the sizeof operator return	The size in bytes of its operand	The sizeof operator returns the size of the operand	4
What does the sizeof operator return	The size in bytes of its operand	It returns the size of an array in bytes	4.5
What does the sizeof operator return	The size in bytes of its operand	Returns the size of the array in bytes during the program compilation	4.5
What does the sizeof operator return	The size in bytes of its operand	it returns the size of the argument passed in	4
What does the sizeof operator return	The size in bytes of its operand	The byte size of the date stored ina variable	4.5
What does the sizeof operator return	The size in bytes of its operand	The amount of memory required for a specific parameter such as ints doubles	3.5
What does the sizeof operator return	The size in bytes of its operand	the size of the information in bits	2.5
What does the sizeof operator return	The size in bytes of its operand	the size of the string	3
What does the sizeof operator return	The size in bytes of its operand	sizeof returns the size in bytes of the respective object	4.5
What does the sizeof operator return	The size in bytes of its operand	the size in bytes needed to store the object in memory	4.5
What does the sizeof operator return	The size in bytes of its operand	the size of the list object	3
What does the sizeof operator return	The size in bytes of its operand	the sizeof operator returns the size in bytes of an array parameter	4
What does the sizeof operator return	The size in bytes of its operand	returns the size in bytes of the specified data	4.5
What does the sizeof operator return	The size in bytes of its operand	It returns the size of an operand in memory which is checked at compiler - time	4
What does the sizeof operator return	The size in bytes of its operand	the total number of bytes of an object	4.5
What does the sizeof operator return	The size in bytes of its operand	total number of bytes in the array	4.5
What does the sizeof operator return	The size in bytes of its operand	it returns the size in bytes of a certain variable type	4.5
What does the sizeof operator return	The size in bytes of its operand	it yields the size in bytes of the operand which can be an expression or the parenthesized name of a type	4
What does the sizeof operator return	Returns size of operand in bytes	the number of bytes of an array during program compilation	4.5
What does the sizeof operator return	Returns size of operand in bytes	The sizeof operator returns the size of the operand	4
What does the sizeof operator return	Returns size of operand in bytes	Returns size of operand in bytes	5
What does the sizeof operator return	Returns size of operand in bytes	It returns the size of an array in bytes	4.5
What does the sizeof operator return	Returns size of operand in bytes	Returns the size of the array in bytes during the program compilation	4.5
What does the sizeof operator return	Returns size of operand in bytes	it returns the size of the argument passed in	4
What does the sizeof operator return	Returns size of operand in bytes	The byte size of the date stored ina variable	4.5
What does the sizeof operator return	Returns size of operand in bytes	sizeof returns the size of the operand in bytes	5
What does the sizeof operator return	Returns size of operand in bytes	The amount of memory required for a specific parameter such as ints doubles	3.5
What does the sizeof operator return	Returns size of operand in bytes	sizeof returns the size of the operand in bytes	5
What does the sizeof operator return	Returns size of operand in bytes	the size of the information in bits	2.5
What does the sizeof operator return	Returns size of operand in bytes	the size of the string	3
What does the sizeof operator return	Returns size of operand in bytes	sizeof returns the size in bytes of the respective object	4.5
What does the sizeof operator return	Returns size of operand in bytes	The sizeof operator returns the total number of bytes of its operand	5
What does the sizeof operator return	Returns size of operand in bytes	The size of an operand in bytes Used with variable names type names and constant values	5
What does the sizeof operator return	Returns size of operand in bytes	the size in bytes needed to store the object in memory	4.5
What does the sizeof operator return	Returns size of operand in bytes	the size of the list object	3
What does the sizeof operator return	Returns size of operand in bytes	the sizeof operator returns the size in bytes of an array parameter	4
What does the sizeof operator return	Returns size of operand in bytes	the size of operand in bytes	5
What does the sizeof operator return	Returns size of operand in bytes	returns the size in bytes of the specified data	4.5
What does the sizeof operator return	Returns size of operand in bytes	It returns the size of an operand in memory which is checked at compiler - time	4
What does the sizeof operator return	Returns size of operand in bytes	Return size of operand in bytes	5
What does the sizeof operator return	Returns size of operand in bytes	the total number of bytes of an object	4.5
What does the sizeof operator return	Returns size of operand in bytes	total number of bytes in the array	4.5
What does the sizeof operator return	Returns size of operand in bytes	it returns the size in bytes of a certain variable type	4.5
What does the sizeof operator return	Returns size of operand in bytes	it yields the size in bytes of the operand which can be an expression or the parenthesized name of a type	4
What are the different ways to pass a pointer to a function	There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data	They can be passed by value or by reference	2.5
What are the different ways to pass a pointer to a function	There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data	Pass - by - value or pass - by - reference	2.5
What are the different ways to pass a pointer to a function	There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data	you can pass a pointer to a pointer or pass a reference to pointer	2.5
What are the different ways to pass a pointer to a function	There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data	by address address of bPtr or directly bPtr	2.5
What are the different ways to pass a pointer to a function	There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data	By argument and reference	2
What are the different ways to pass a pointer to a function	There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data	pass by value and pass by reference with reference or pointer arguments	2.5
What are the different ways to pass a pointer to a function	There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data	you can pass them with the pointer - LRB - STAR - RRB - or the memory address - LRB - ADDRESS - RRB -	2.5
What are the different ways to pass a pointer to a function	There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data	Pass by reference with reference arguments function - LRB - int ADDRESS - RRB - Pass by reference with pointer arguments function - LRB - int STAR - RRB -	2.5
What are the different ways to pass a pointer to a function	There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data	you can pass the reference or the dereference in a function	2
What are the different ways to pass a pointer to a function	There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data	Pointers may be passed to functions by value by reference with reference arguments or by reference with pointer arguments	2.5
What are the different ways to pass a pointer to a function	There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data	pass by value pass by reference with reference arguments pass by reference with pointer arguments	2.5
What are the different ways to pass a pointer to a function	There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data	you can pass it where either the pointer cant be moved the data pointed to cant be changed or both or neither	4
What are the different ways to pass a pointer to a function	There are four ways : nonconstant pointer to constant data nonconstant pointer to nonconstant data constant pointer to constant data constant pointer to nonconstant data	there are only two ways to pass something by value and by reference Use of dot or pointer operators within the receiving function and use of ADDRESS operator inside the passing function	2.5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	They can be passed by value or by reference	2.5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	Nonconstant pointer to nonconstant data Nonconstant pointer to constant data Constant pointer to nonconstant data Constant pointer to constant data	5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	Four different ways : Nonconstant pointer to nonconstant data a nonconstant pointer to constant data a constant pointer to nonconstant data and a constant pointer to constant data	5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	Pass - by - value or pass - by - reference	2.5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	you can pass a pointer to a pointer or pass a reference to pointer	2.5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	by address address of bPtr or directly bPtr	2.5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	Nonconstant pointer to nonconstant data constant pointer to nonconstant data nonconstant pointer to constant data constant pointer to constant data	5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	By argument and reference	2
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data and constant pointer to constant data	5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	pass by value and pass by reference with reference or pointer arguments	2.5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	you can pass them with the pointer - LRB - STAR - RRB - or the memory address - LRB - ADDRESS - RRB -	2.5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	nonconst implies nonconst const implies nonconst nonconst implies const const implies const	5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	Nonconstant pointer to nonconstant data Constant pointer to nonconstant data Nonconstant pointer to constant data Constant point to constant data	5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	Non - constant pointer to non - constant data non - constant pointer to constant data constant pointer to constant data constant pointer to non - constant data	5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	Pass by reference with reference arguments function - LRB - int ADDRESS - RRB - Pass by reference with pointer arguments function - LRB - int STAR - RRB -	2.5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	you can pass the reference or the dereference in a function	2
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	1 nonconstant pointer to nonconstant data Its delcaration does no include const qualifier 2 nonconstant pointer to constant data Provides the performance of pass - by - reference and the protection of pass - by - value 3 Constant pointer to nonconstant data 4 Constant pointer to constant date	5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	constant pointer to constant data constant pointer to nonconstant data nonconstant pointer to constant data nonconstant pointer to nonconstant data	5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	Nonconstant pointer to nonconstant data Nonconstant pointer to constant data Constant pointer to nonconstant data Constant pointer to constant data	5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	Pointers may be passed to functions by value by reference with reference arguments or by reference with pointer arguments	2.5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	There are four way to pass pointer to a function 1 non constant pointer to non constant data 2 non constant pointer to constant data 3 constant pointer to non constant data 4 constant pointer to constant data	5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	pass by value pass by reference with reference arguments pass by reference with pointer arguments	2.5
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	you can pass it where either the pointer cant be moved the data pointed to cant be changed or both or neither	4
What are the different ways to pass a pointer to a function	Nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data	there are only two ways to pass something by value and by reference Use of dot or pointer operators within the receiving function and use of ADDRESS operator inside the passing function	2.5
What is a function pointer	The address of the location in memory where the function code resides	when it is dereferenced a function pointer calls its function with zero or more arguments	3.5
What is a function pointer	The address of the location in memory where the function code resides	a pointer to a function	3.5
What is a function pointer	The address of the location in memory where the function code resides	a pointer that points to a function itself which allows passing a function as a parameter to another function	4
What is a function pointer	The address of the location in memory where the function code resides	a pointer that contains the address of the function definition	4.5
What is a function pointer	The address of the location in memory where the function code resides	When dereferenced a function pointer invokes a function passing it zero or more arguments just like a normal function In programming languages like C function pointers can be used to simplify code such as replacing large switch statements	4
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	A function pointer is a pointer that contains the address of the function in memory	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	Function Pointers are pointers i e variables which point to the address of a function	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	A pointer to a function is the address where the code for the function resides They can be passed to functions returned from functions stored in arrays and assigned to other pointers	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	It contains the address of the function in memory	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	when it is dereferenced a function pointer calls its function with zero or more arguments	3.5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	a pointer to a function	3.5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	A pointer to a function itself contains the address of the function and can be used to call that function	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	Function Pointers are pointers i e variables which point to the address of a function	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	A pointer to a function that contains the addresses of the function	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	a pointer that contains the address of a function	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	a function pointer is a pointer to a function It can be used in substitution for calling a function	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	Points to the memory address of a function Kind of like breaking a branch off of a tree object and hitting other objects with it	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	They are pointers that contain the addresses to functions they can be passed and returned from functions as well as stored in arrays and assigned to other function pointers	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	Pointer variables that point to function addresses	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	Contains the address of the function in memory	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	a pointer that points to a function itself which allows passing a function as a parameter to another function	4
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	pointers that contain the addresses of functions	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	is a pointer that contains the address of a function	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	a pointer that contains the address of the function definition	4.5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	A function pointer contains the memory address of a function Using a function pointer a function can be passed to or returned by another function Function pointers can also be stored in arrays	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	Function pointer is a pointer to a function function pointer contains address of functions	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	a pointer that contains the address of a function in memory	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	it contains the address of the function in memory	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	it is a pointer that points to the address of a function	5
What is a function pointer	A pointer that points to the memory address of the beginning part of a functions pretty much the pointer points to the function so it can be called to execute	When dereferenced a function pointer invokes a function passing it zero or more arguments just like a normal function In programming languages like C function pointers can be used to simplify code such as replacing large switch statements	4
What is a linked list	A collection of elements that can be allocated dynamically	Consists of sequence of nodes each containing a number of data fields and one or two links called pointers that point to the next or previous nodes	4.5
What is a linked list	A collection of elements that can be allocated dynamically	A linked list is a list in which each item in the list points to the next item in the list	4.5
What is a linked list	A collection of elements that can be allocated dynamically	A linked list is a chain of structs or records called nodes and you have the ability to add delete or retrieve items	4.5
What is a linked list	A collection of elements that can be allocated dynamically	A list of elements or nodes that are linked to one another such that each element points to the next element	4.5
What is a linked list	A collection of elements that can be allocated dynamically	A sequence of nodes each containing data fields - LRB - specified by programmer - RRB - and pointer - LRB - s - RRB - which can point to the next or previous nodes	4.5
What is a linked list	A collection of elements that can be allocated dynamically	a list of nodes where each node contains a data member and also a pointer to the next node	4.5
What is a linked list	A collection of elements that can be allocated dynamically	A list of items linked together Each item is linked to its successor	4.5
What is a linked list	A collection of elements that can be allocated dynamically	A linked list is a chain of nodes that each store a single piece of data and pointer variables that point to other nodes in the list	4.5
What is a linked list	A collection of elements that can be allocated dynamically	one of the fundamental data structures and can be used to implement other data structures It consists of a sequence of nodes each containing arbitrary data fields and one or two references - LRB - links - RRB - pointing to the next and previous nodes	4.5
What is a linked list	A collection of elements that can be allocated dynamically	A data structure in a sequence of nodes each containing arbitrary data fields and one or two references - LRB - links - RRB - pointing to the next and previous nodes	4.5
What is a linked list	A collection of elements that can be allocated dynamically	Information in memory linked to the next piece of information and can only be linked forwards and not backwards	3.5
What is a linked list	A collection of elements that can be allocated dynamically	A linked list is a data structure containing one or more data elements with a pointer to the next node	4.5
What is a linked list	A collection of elements that can be allocated dynamically	A series of Nodes structures with a value and a pointer that point to a similar Node Not quite an array but still can carry a list of values	4.5
What is a linked list	A collection of elements that can be allocated dynamically	A data type that contains a pointer to at least the next element in a list	4.5
What is a linked list	A collection of elements that can be allocated dynamically	Each component contains a Node a data item and a pointer to the next item in the list	4.5
What is a linked list	A collection of elements that can be allocated dynamically	A linked list is a chain of structs or records called nodes Each node has at least two members one of which points to the next item or node in the list	4.5
What is a linked list	A collection of elements that can be allocated dynamically	An array based list that uses an implicit ordering scheme often using pointers	2.5
What is a linked list	A collection of elements that can be allocated dynamically	a series of structures containing data items and a pointer that links the structure to the next structure	4.5
What is a linked list	A collection of elements that can be allocated dynamically	A linked list is a collection of Objects each containing at least one data member and a pointer to the next object in the list - LRB - and the previous object in the case of a doubly linked list - RRB -	4.5
What is a linked list	A collection of elements that can be allocated dynamically	A link list is a data structure which is built from structures and pointers It forms a chain of nodes with pointers representing the links of the chain and holding the entire thing together	4
What is a linked list	A collection of elements that can be allocated dynamically	its a list of pointers that are linked 2 each other every pointer points to the next pointer which has the next element	4.5
What is a linked list	A collection of elements that can be allocated dynamically	linear collection of self - referential nodes connected by pointers	4
What is a linked list	A collection of elements that can be allocated dynamically	the items of a data structure are linked to each other using pointers	4.5
What is a linked list	A collection of elements that can be allocated dynamically	A list of objects where each object contains a link to the next item in the list	4.5
What is a linked list	A collection of elements that can be allocated dynamically	A linked list is one of the fundamental data structures and can be used to implement other data structures It consists of a sequence of nodes each containing arbitrary data fields and one or two references - LRB - links - RRB - pointing to the next and previous nodes	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	Consists of sequence of nodes each containing a number of data fields and one or two links called pointers that point to the next or previous nodes	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	A linked list is a list in which each item in the list points to the next item in the list	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	A linked list is a chain of structs or records called nodes and you have the ability to add delete or retrieve items	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	A list of elements or nodes that are linked to one another such that each element points to the next element	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	A sequence of nodes each containing data fields - LRB - specified by programmer - RRB - and pointer - LRB - s - RRB - which can point to the next or previous nodes	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	a list of nodes where each node contains a data member and also a pointer to the next node	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	A list of items linked together Each item is linked to its successor	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	A linked list is a chain of nodes that each store a single piece of data and pointer variables that point to other nodes in the list	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	one of the fundamental data structures and can be used to implement other data structures It consists of a sequence of nodes each containing arbitrary data fields and one or two references - LRB - links - RRB - pointing to the next and previous nodes	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	A data structure in a sequence of nodes each containing arbitrary data fields and one or two references - LRB - links - RRB - pointing to the next and previous nodes	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	Information in memory linked to the next piece of information and can only be linked forwards and not backwards	3.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	A linked list is a data structure containing one or more data elements with a pointer to the next node	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	A series of Nodes structures with a value and a pointer that point to a similar Node Not quite an array but still can carry a list of values	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	A data type that contains a pointer to at least the next element in a list	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	Each component contains a Node a data item and a pointer to the next item in the list	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	A linked list is a chain of structs or records called nodes Each node has at least two members one of which points to the next item or node in the list	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	An array based list that uses an implicit ordering scheme often using pointers	2.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	a series of structures containing data items and a pointer that links the structure to the next structure	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	A linked list is a collection of Objects each containing at least one data member and a pointer to the next object in the list - LRB - and the previous object in the case of a doubly linked list - RRB -	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	A link list is a data structure which is built from structures and pointers It forms a chain of nodes with pointers representing the links of the chain and holding the entire thing together	4
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	its a list of pointers that are linked 2 each other every pointer points to the next pointer which has the next element	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	linear collection of self - referential nodes connected by pointers	4
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	the items of a data structure are linked to each other using pointers	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	A list of objects where each object contains a link to the next item in the list	4.5
What is a linked list	A linked list is a data structure that is not necessarily in the same contiguous memory space - LRB - such as arrays - RRB - It holds the data type and points to the next data item in the list or in a doubly linked list also to the previous item	A linked list is one of the fundamental data structures and can be used to implement other data structures It consists of a sequence of nodes each containing arbitrary data fields and one or two references - LRB - links - RRB - pointing to the next and previous nodes	4.5
What is the main advantage of linked lists over arrays	The linked lists can be of variable length	You can insert into and delete items from a pointer - based linked list without shifting data	4.5
What is the main advantage of linked lists over arrays	The linked lists can be of variable length	The principal benefit of a linked list over a conventional array is that the order of the linked items may be different from the order that the data items are stored in memory or on disk allowing the list of items to be traversed in a different order A linked list is a self - referential datatype because it contains a pointer or link to another datum of the same type Linked lists permit insertion and removal of nodes at any point in the list in constant time	4
What is the main advantage of linked lists over arrays	The linked lists can be of variable length	There is no limit as to how many you create where an array can only hold a given amount of information	3
What is the main advantage of linked lists over arrays	The linked lists can be of variable length	Linked lists have constant time insertion and deletion	3.5
What is the main advantage of linked lists over arrays	The linked lists can be of variable length	more memory can be allocated on the fly for more items	4.5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	Unlike arrays linked lists can insert and delete without shifting data and change in size easily	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	Array size is fixed but Linked is not fixed	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	You can insert into and delete items from a pointer - based linked list without shifting data	4.5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	Arrays must be of a defined size elements can be added to a linked list with o defining any size	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	The principal benefit of a linked list over a conventional array is that the order of the linked items may be different from the order that the data items are stored in memory or on disk allowing the list of items to be traversed in a different order A linked list is a self - referential datatype because it contains a pointer or link to another datum of the same type Linked lists permit insertion and removal of nodes at any point in the list in constant time	4
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	You can expand when you need it You do not have to predetermine the size	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	Linked lists are able to grow and shrink in size as needed	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	Linked list is able to grow in size as needed Does not require the shifting of items during insertions and deletions	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	A linked list is not fixed in size and does not require the shifting of items during insertions and deletions	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	There is no limit as to how many you create where an array can only hold a given amount of information	3
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	Linked lists have constant time insertion and deletion	3.5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	Linked lists can be grown dynamically items do not require shifting and they have a greater awesome factor than that of arrays	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	Linked lists have an indefinite size They can be added to and taken away from very easily with little difficulty in the shifting of data	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	Nearly infinite size limited only by system memory and also the ability to expand the size dynamically	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	They grow as needed while arrays are of fixed size	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	Does not have a fixed size Linked list is able to grow as needed The time to access an array bases list takes a contant amount of time where as an linked - base like depends on i	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	Linked lists can grow and shrink as you need them to Arrays have a fixed size	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	more memory can be allocated on the fly for more items	4.5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	A linked list may be increased in size as needed while an array size is set when it is created	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	Array has a fixed size but linked list is able to grow in size as needed	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	its resizeable	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	Linked lists do not have a set size and can grow or shrink as needed	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	linked lists are abe to grow as needed to a new size	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	The size is not fixed easier sorting because of no shifting easier to insert items into the list	5
What is the main advantage of linked lists over arrays	Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be	The size of array is restricted to declaration Insertion or Deletion of values in middle of array is not possible	5
What is the main advantage of arrays over linked lists	The elements in an array can be accessed directly - LRB - as opposed to linked lists which require iterative traversal - RRB -	Arrays require less memory than linked lists and allow direct access to a specified item Also insertion and deletion in arrays does not require a list traversal	4.5
What is the main advantage of arrays over linked lists	The elements in an array can be accessed directly - LRB - as opposed to linked lists which require iterative traversal - RRB -	You have to keep up with the head of the list	2
What is the main advantage of arrays over linked lists	The elements in an array can be accessed directly - LRB - as opposed to linked lists which require iterative traversal - RRB -	Arrays are easier to implement and require less memory	3.5
What is the main advantage of arrays over linked lists	The elements in an array can be accessed directly - LRB - as opposed to linked lists which require iterative traversal - RRB -	Linked list has an increase complexity of the implementation The linked list has an array that keeps growing which leads to a increase in memory	2.5
What is the main advantage of arrays over linked lists	The elements in an array can be accessed directly - LRB - as opposed to linked lists which require iterative traversal - RRB -	You do not have to iterate through the entire list to access elements	4.5
What is the main advantage of arrays over linked lists	The elements in an array can be accessed directly - LRB - as opposed to linked lists which require iterative traversal - RRB -	you can go forwards and backwards and point to any piece of data at any given time where linked lists have to point to the next piece of data	3
What is the main advantage of arrays over linked lists	The elements in an array can be accessed directly - LRB - as opposed to linked lists which require iterative traversal - RRB -	Take up less memory and are contiguously stored	4
What is the main advantage of arrays over linked lists	The elements in an array can be accessed directly - LRB - as opposed to linked lists which require iterative traversal - RRB -	Arrays being fixed are less error prone	2
What is the main advantage of arrays over linked lists	The elements in an array can be accessed directly - LRB - as opposed to linked lists which require iterative traversal - RRB -	direct access to elements and speed linked lists have increased search times to access elements even if the list is sorted - LRB - like getting the last element without a pointer directly to the end of the list - RRB -	4.5
What is the main advantage of arrays over linked lists	The elements in an array can be accessed directly - LRB - as opposed to linked lists which require iterative traversal - RRB -	Array - bases implementations require less memory than a pointer - bases one	3.5
What is the main advantage of arrays over linked lists	The elements in an array can be accessed directly - LRB - as opposed to linked lists which require iterative traversal - RRB -	link lists only allow sequential access where arrays allow random access	4.5
What is the main advantage of arrays over linked lists	The elements in an array can be accessed directly - LRB - as opposed to linked lists which require iterative traversal - RRB -	Array based implementation requires less memory than lined lists based implementation	3.5
What is the main advantage of arrays over linked lists	The elements in an array can be accessed directly - LRB - as opposed to linked lists which require iterative traversal - RRB -	Array - based implementations require less memory than a pointer - based ones	3.5
What is the main advantage of arrays over linked lists	The elements in an array can be accessed directly - LRB - as opposed to linked lists which require iterative traversal - RRB -	You can go up and down an array but you can only go one direction while traversing a linked list	3
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	Arrays require less memory than linked lists and allow direct access to a specified item Also insertion and deletion in arrays does not require a list traversal	4.5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	Access to a particular element is very fast because its location in memory can be determined mathematically and accessed directly	5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	Arrays are good for random access and good for sequential access which are both in constant time Where linked lists are linear for random access Arrays are faster in this case	5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	An array is capable of accessing any part of that array based on the index The link list must be traversed from the beginning or the end that is data can only be accessed if it is adjacent to the previous or next nodes	5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	On the other hand arrays allow random access while linked lists allow only sequential access to elements Singly - linked lists in fact can only be traversed in one direction	5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	You have to keep up with the head of the list	2
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	Arrays are easier to implement and require less memory	3.5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	Linked list has an increase complexity of the implementation The linked list has an array that keeps growing which leads to a increase in memory	2.5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	You do not have to iterate through the entire list to access elements	4.5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	you can go forwards and backwards and point to any piece of data at any given time where linked lists have to point to the next piece of data	3
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	Take up less memory and are contiguously stored	4
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	Arrays being fixed are less error prone	2
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	Arrays have a set list of values Meaning you can pick a spot in the array such as a 7 picks the 8th spot in the array With linked lists you have to keep track with pointers if you want to take specific nodes out otherwise you must traverse the entire list	5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	direct access to elements and speed linked lists have increased search times to access elements even if the list is sorted - LRB - like getting the last element without a pointer directly to the end of the list - RRB -	4.5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	Array items are accessed directly with equal access time	5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	Array - bases implementations require less memory than a pointer - bases one	3.5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	You can access specific elements quickly in an array In a linked list you must traverse the list to get access the same element	5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	link lists only allow sequential access where arrays allow random access	4.5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	Any entitiy in an array may accessed immediately whereas a linked list must be traversed one item at a time because each object only points adjacent objects	5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	Array based implementation requires less memory than lined lists based implementation	3.5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	Array - based implementations require less memory than a pointer - based ones	3.5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	You can go up and down an array but you can only go one direction while traversing a linked list	3
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	arrays allow for the random access of any item cotained a any time linked lists must be gone through toget to the desired item	5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	In arrays you have direct access to each element but in linked lists you have to traverse the list up to the element that you need	5
What is the main advantage of arrays over linked lists	Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node	Array size is fixed But Linked is not fixed data is also accessed quicker in array list also memory requirement is less and no pointers required Arrays have random access and less overheads compared to Linked list have sequential access only with too much overheads and no cache memory support On the other hand arrays allow random access while linked lists allow only sequential access to elements Singly - linked lists in fact can only be traversed in one direction	5
How are linked lists passed as arguments to a function	By reference	They are passed by reference because you want the function to change the pointer	4.5
How are linked lists passed as arguments to a function	By reference	By using a node	2.5
How are linked lists passed as arguments to a function	By reference	you send a pointer to an object of the LinkedList class	2.5
How are linked lists passed as arguments to a function	By reference	Passed as a pointer to the head	4
How are linked lists passed as arguments to a function	By reference	Passing the head pointer of a linked list to a function gives that function access to all nodes of that linked list	4.5
How are linked lists passed as arguments to a function	By reference	You have to pass the head pointer to a function since it has access to the entire list	4
How are linked lists passed as arguments to a function	By reference	not answered	0
How are linked lists passed as arguments to a function	By reference	passes a pointer to a linked list object	2.5
How are linked lists passed as arguments to a function	By reference	The linked list object contains the head through which the other elements are accessible	3.5
How are linked lists passed as arguments to a function	By reference	By the head of the list It takes the head address and traverses from there on in	4
How are linked lists passed as arguments to a function	By reference	as a pointer node	3
How are linked lists passed as arguments to a function	By reference	A method with access to a linked list head pointer as access to the entire list	4
How are linked lists passed as arguments to a function	By reference	the pointer to the first element is passed to a function	4
How are linked lists passed as arguments to a function	By reference	By passing the head pointer and going through the list as needed inside the function	4
How are linked lists passed as arguments to a function	By reference	linked lists are passed by using pointers	3
How are linked lists passed as arguments to a function	By reference	the head object is passed to the function	3.5
How are linked lists passed as arguments to a function	By reference	Linked lists permit insertion and removal of nodes at any point in the list in constant time 1 but do not allow random access	1.5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	They are passed by reference because you want the function to change the pointer	4.5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	minus A function with access to a linked list head pointer has access to the entire list Pass the head ponter to a function as a reference argument	5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	By using a node	2.5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	Pass - by - reference	5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	you send a pointer to an object of the LinkedList class	2.5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	Passed as a pointer to the head	4
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	Passing the head pointer of a linked list to a function gives that function access to all nodes of that linked list	4.5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	You have to pass the head pointer to a function since it has access to the entire list	4
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	You pass the head pointer to a function as a reference argument	5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	not answered	0
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	passes a pointer to a linked list object	2.5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	The linked list object contains the head through which the other elements are accessible	3.5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	By the head of the list It takes the head address and traverses from there on in	4
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	as a pointer node	3
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	A method with access to a linked list head pointer as access to the entire list	4
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	A function with access to a linked list head pointer has access to the entire list Pass the head pointer to a function as a reference argument	5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	the head pointer is passed to a function as a reference argument	5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	the pointer to the first element is passed to a function	4
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	linked lists are passed by reference specificly the Head pointer	5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	Pass the head pointer to a function as a reference argument	5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	by refrenece	5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	By passing the head pointer and going through the list as needed inside the function	4
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	linked lists are passed by using pointers	3
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	the head object is passed to the function	3.5
How are linked lists passed as arguments to a function	Linked lists are passed as arguments to a function by passing the head pointer of the list by reference	Linked lists permit insertion and removal of nodes at any point in the list in constant time 1 but do not allow random access	1.5
What is the difference between a circular linked list and a basic linked list	The last element in a circular linked list points to the head of the list	They are passed by reference because you want the function to change the pointer	0.5
What is the difference between a circular linked list and a basic linked list	The last element in a circular linked list points to the head of the list	A circular linked list is a linked list that links items in a continuous circle This allows the full list to be traversed by starting at any item in the list; a fixed head or tail is not required	4.5
What is the difference between a circular linked list and a basic linked list	The last element in a circular linked list points to the head of the list	Circular linked lists are most useful for describing naturally circular structures and have the advantage of regular structure and being able to traverse the list starting at any point	2.5
What is the difference between a circular linked list and a basic linked list	The last element in a circular linked list points to the head of the list	No node in a circular linked list contains NULL	3.5
What is the difference between a circular linked list and a basic linked list	The last element in a circular linked list points to the head of the list	In circular linked list each node has successor no node contains NULL while in basic linked list last node contain NULL	3
What is the difference between a circular linked list and a basic linked list	The last element in a circular linked list points to the head of the list	In the case of a non circular link list if you are at the last node of the list and u want to move to first u need to go to one step back till u reach to first But in circular link list from last to first you need to make only one move In a single link list u can move only in one direction but in double link list u can move in any direction back or forward or forward	3.5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	They are passed by reference because you want the function to change the pointer	0.5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	In a circular linked list every node has a successor which means that the last node successor is the head or first node	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	A circular linked list is a linked list that links items in a continuous circle This allows the full list to be traversed by starting at any item in the list; a fixed head or tail is not required	4.5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	In a circular linked list the last node points to the first node	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	On a circular linked list the end element points to the head thus making the circle A basic link list has nothing pointing to the head and the last element points to null	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	the circular linked list last node points to the begining of the list while a standard linked list points to NULL	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	The last item in the list points to the head	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	In a circular linked list the last node points back to the first node there is no NULL	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	Circular linked lists are most useful for describing naturally circular structures and have the advantage of regular structure and being able to traverse the list starting at any point	2.5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	A circular linked list has the last node point back to the head of the linked list	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	Basic linked list points to a NULL at the end and circular points to the head at the end	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	in a circular linked list the the last item points to the first item	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	The circular linked list tail points to the head whereas the basic linked list tail points to a NULL	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	a basic linked list has an end with a null value where a circular linked list has a pointer from the end to the beginning	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	how to determine the end of the list in basic linked lists the last element links to a null pointer while circular linked lists link to the head element at the end	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	No Node in a circular linked list contains NULL the last Node points pack to a Node within the list	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	The difference between a circular linked list and a basic linked list is that a circular linked list the last node references the first node Every node in a circular linked list has a successor and no node in a circular linked list contains NULL	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	No node in a circular linked list contains NULL	3.5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	in a circular linked list the last element points to the head of the list	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	In a regular linked list the last object points to NULL In a circular linked list the last object points back to the beginning of the list	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	In circular linked list each node has successor no node contains NULL while in basic linked list last node contain NULL	3
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	in a circular linked lists the last element points to the first	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	A circular linked list does not have a last element Instead it is last item points to the head of the list	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	in a circular linked list the last node contains a pointer that goes back to the first node; in a basic linked list the last node contains a null pointer	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	in a circular linked list the last object is linked back to the first object	5
What is the difference between a circular linked list and a basic linked list	In a circular linked list every node has a successor which means that the last node successor is the head or first node	In the case of a non circular link list if you are at the last node of the list and u want to move to first u need to go to one step back till u reach to first But in circular link list from last to first you need to make only one move In a single link list u can move only in one direction but in double link list u can move in any direction back or forward or forward	3.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	they can traverse in both directions	3.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	In a doubly linked list you can delete a node without having to traverse the list	4.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	A doubly - linked list allows you to delete a node without traversing the list to establish a trailing pointer	4.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	A doubly linked list allows you to traverse the list in either direction Each node points to its successor as well as to its predecessor	3.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	Doubly - linked lists can traverse backwards though they still cannot access data at any point in the list it can be shorter to traverse backwards	3.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	you can traverse the list from front to back and back to front	3.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	You can traverse the list in reverse	3.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	Doubly linked lists can be traversed in both directions	3.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	Double - linked lists require more space per node and their elementary operations are more expensive; but they are often easier to manipulate because they allow sequential access to the list in both directions	3.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	You can traverse forwards and backwards through nodes	3.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	You can point both forwards and backwards	3.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	You can go backwards in the linked list and access previous data easier without having to keep track of the previous item	4
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	Doubly linked lists allow backward movement through the nodes	3.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	they have double pointers so each node can point forwards or backwards Making it a little easer to get to where you need	3.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	ability to backtrack through a list	3
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	You can move forwards and backwards in the double - linked list Basic only moves forwards	3.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	The advantage is that each node points to bothe its predecessor and its successor There are no special cases for insertion and deletion	4.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	each node points to both its predecessor and its successor	3.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	a doubly linked list has pointers in both directions this allows for access from back to front as well as front to back	4
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	A doubly linked list can be traversed either direction while a normal linked list can only be traversed from start to finish	3.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	Double Linked list are often easier to manipulate because they allow sequential access to the list in both direction	4
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	given a node in the list one can navigate easily in either direction	4
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	You can traverse the list both forward and backwards	3.5
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	a doubly linked list allows you to back up from a node rather than having to go through the entire list again	4
What is the main advantage of a doubly - linked list over a basic linked list	All the deletion and insertion operations can be performed in constant time including those operations performed before a given location in the list or at the end of the list	The primary disadvantage of doubly linked lists are that - LRB - 1 - RRB - each node requires an extra pointer requiring more space and - LRB - 2 - RRB - the insertion or deletion of a node takes a bit longer - LRB - more pointer operations - RRB -	2
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	they can traverse in both directions	3.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	In a doubly linked list you can delete a node without having to traverse the list	4.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	A doubly - linked list allows you to delete a node without traversing the list to establish a trailing pointer	4.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	A doubly linked list allows you to traverse the list in either direction Each node points to its successor as well as to its predecessor	3.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	Doubly - linked lists can traverse backwards though they still cannot access data at any point in the list it can be shorter to traverse backwards	3.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	you can traverse the list from front to back and back to front	3.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	You can traverse the list in reverse	3.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	Doubly linked lists can be traversed in both directions	3.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	Double - linked lists require more space per node and their elementary operations are more expensive; but they are often easier to manipulate because they allow sequential access to the list in both directions	3.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	You can traverse forwards and backwards through nodes	3.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	You can point both forwards and backwards	3.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	You can go backwards in the linked list and access previous data easier without having to keep track of the previous item	4
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	Doubly linked lists allow backward movement through the nodes	3.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	they have double pointers so each node can point forwards or backwards Making it a little easer to get to where you need	3.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	ability to backtrack through a list	3
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	You can move forwards and backwards in the double - linked list Basic only moves forwards	3.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	The advantage is that each node points to bothe its predecessor and its successor There are no special cases for insertion and deletion	4.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	each node points to both its predecessor and its successor	3.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	a doubly linked list has pointers in both directions this allows for access from back to front as well as front to back	4
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	A doubly linked list can be traversed either direction while a normal linked list can only be traversed from start to finish	3.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	Double Linked list are often easier to manipulate because they allow sequential access to the list in both direction	4
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	given a node in the list one can navigate easily in either direction	4
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	You can traverse the list both forward and backwards	3.5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	a doubly linked list allows you to back up from a node rather than having to go through the entire list again	4
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	Gives faster times for some operations such as insertion and deletion	5
What is the main advantage of a doubly - linked list over a basic linked list	Gives faster times for some operations such as insertion and deletion	The primary disadvantage of doubly linked lists are that - LRB - 1 - RRB - each node requires an extra pointer requiring more space and - LRB - 2 - RRB - the insertion or deletion of a node takes a bit longer - LRB - more pointer operations - RRB -	2
What is the main disadvantage of a doubly - linked list over a basic linked list	Extra space required to store the back pointers	In a doubly linked list there are more pointers to set and the mechanics of inserting and deleting are more difficult Also the special cases at the beginning or end of the list are more complicated	3.5
What is the main disadvantage of a doubly - linked list over a basic linked list	Extra space required to store the back pointers	There are more pointers to set the mechanics of inserting into and deleting from a doubly linked list are a bit more involved than for a singly linked list	4
What is the main disadvantage of a doubly - linked list over a basic linked list	Extra space required to store the back pointers	Insertion and deletion with a doubly linked list are more involved than with a singly linked list leaving more room for error and complex algorithms	3
What is the main disadvantage of a doubly - linked list over a basic linked list	Extra space required to store the back pointers	You have to keep up with where you are and you have to consider the predecessor and successor connections when inserting or deleting	3
What is the main disadvantage of a doubly - linked list over a basic linked list	Extra space required to store the back pointers	More difficult to delete and create nodes	3
What is the main disadvantage of a doubly - linked list over a basic linked list	Extra space required to store the back pointers	its a little more confusing The special cases at the end and beginning become more difficult to do	3
What is the main disadvantage of a doubly - linked list over a basic linked list	Extra space required to store the back pointers	increased actions to add and remove elements to the linked list	3
What is the main disadvantage of a doubly - linked list over a basic linked list	Extra space required to store the back pointers	Inserting and deleting in a double - linked list is more involved and has special cases at the beginning and end	3
What is the main disadvantage of a doubly - linked list over a basic linked list	Extra space required to store the back pointers	The main disadvanate is that if hard to remove all items in the list	2
What is the main disadvantage of a doubly - linked list over a basic linked list	Extra space required to store the back pointers	The process of adding and removing Nodes in a Doubly linked list is more complex than in a basic linked list	3.5
What is the main disadvantage of a doubly - linked list over a basic linked list	Extra space required to store the back pointers	not answered	0
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	they take up twice as much memory for each node	5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	In a doubly linked list there are more pointers to set and the mechanics of inserting and deleting are more difficult Also the special cases at the beginning or end of the list are more complicated	3.5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	There are more pointers to set the mechanics of inserting into and deleting from a doubly linked list are a bit more involved than for a singly linked list	4
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	Insertion and deletion with a doubly linked list are more involved than with a singly linked list leaving more room for error and complex algorithms	3
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	Need more memory to store previous pointers	5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	a node in a doubly linked list takes up more memory than a node in a singly linked list	5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	You have to keep up with where you are and you have to consider the predecessor and successor connections when inserting or deleting	3
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	Each node requires an extra node requires more memory and is more difficult to insert and remove individual nodes	5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	Double - linked lists require more space per node and their elementary operations are more expensive	5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	More difficult to delete and create nodes	3
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	They use more memory and you have to make 2 pointers and update 2 pointers each time you change the list	5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	nodes take up more memory	5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	Each node requires an extra pointer - LRB - space requirements increased - RRB - Insertion or deletion of a node takes a longer - LRB - more pointer operations - RRB -	5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	its a little more confusing The special cases at the end and beginning become more difficult to do	3
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	increased actions to add and remove elements to the linked list	3
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	Inserting and deleting in a double - linked list is more involved and has special cases at the beginning and end	3
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	The main disadvanate is that if hard to remove all items in the list	2
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	each node requires an extra pointer taking up more storage insertions and deletions require more pointer operations	5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	in a doubly linked list there are twice as many pointers for each element therefore more memory is used	5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	The process of adding and removing Nodes in a Doubly linked list is more complex than in a basic linked list	3.5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	Double linked lists require more space per node and their elementary operation are more expensive	5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	1 - each node requires an extra pointer requiring more space 2 - the insertion or deletion of a node takes a bit longer more pointer operations	5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	It takes up twice the storage needed	5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	using more pointers to enable the backward movement takes up more memory having more pointers make it slightly more work to add or remove a node from the list	5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	increased memory requirements slightly more complicated when modifying elements in the list	5
What is the main disadvantage of a doubly - linked list over a basic linked list	they take up twice as much memory for each node	not answered	0
What is a stack	A data structure that can store elements which has the property that the last item added will be the first to be removed - LRB - or last - in - first - out - RRB -	Stores a set of elements in a particular order	2
What is a stack	A data structure that can store elements which has the property that the last item added will be the first to be removed - LRB - or last - in - first - out - RRB -	A list in which only the top - LRB - or last item added - RRB - can be modified	4.5
What is a stack	A data structure that can store elements which has the property that the last item added will be the first to be removed - LRB - or last - in - first - out - RRB -	A stack is an ADT that stores a set of elements in a particular order	2.5
What is a stack	A data structure that can store elements which has the property that the last item added will be the first to be removed - LRB - or last - in - first - out - RRB -	An abstract data type that stores a set of elements in a particular order	2.5
What is a stack	A data structure that can store elements which has the property that the last item added will be the first to be removed - LRB - or last - in - first - out - RRB -	Stores a set of element in a particular order	2
What is a stack	A data structure that can store elements which has the property that the last item added will be the first to be removed - LRB - or last - in - first - out - RRB -	A data structure that puts elements in a list and only allows the user access to the last element	4.5
What is a stack	A data structure that can store elements which has the property that the last item added will be the first to be removed - LRB - or last - in - first - out - RRB -	a finite ordered list with zero or more elements	2
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	A stack is an abstract data type that is based on the principle that the last element inserted into the stack will be the first element removed from the stack	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	Stores a set of elements in a particular order	2
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	An ADT whose most recently inserted item is the first item removed or retrieved This property is called last in first out - LRB - LIFO - RRB - Items enter and leave a stack at its top	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	A list in which only the top - LRB - or last item added - RRB - can be modified	4.5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	a stack is a data structure that uses push to insert an item and pop to remove ad item The stack use a last in first out structure for inserting and removing items	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	A data structure that stores data using LIFO	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	A stack is similar to an array but does not allow for random access Stacks only allow a user to retrieve the last item put into the stack Last in fist out	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	Stores a set of elements in a particular order Stack principle : LAST IN FIRST OUT It means : the last element inserted is the first one to be removed	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	A stack is an ADT that stores a set of elements in a particular order	2.5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	a data type that stores a set of elements in a certain order last in first out	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	a data structure that moves elements in last in first out	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	Stores a set of elements in a last in first out order	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	A list that can be added to or removed from only from the top	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	a stack is an Abstract data type which operates on a last in first out basis for storing a list of objects and does not support - LRB - at least in the pure stack - RRB - peeking at a element without removing the rest of the stack first	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	Stores a set of elements in a particular order based on the principle of Last In First Out - LRB - LIFO - RRB -	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	an object list that stores elements in a particular order the first object inserted is at the bottom with the last object at the top so the first object in is the last object out	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	An ADT that stores a set of elements in a particular order The stack principles are LIFO The last item inserted in the list is the first out	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	An abstract data type that stores a set of elements in a particular order	2.5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	a collection of data to be executed in the order of last in first out	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	A stack is a data structure that allows data members to be added or removed one at a time and in order They are a Last in First Out structure	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	Stores a set of element in a particular order	2
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	is a list of element where the first one to be removed is the last one inserted	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	A data structure that puts elements in a list and only allows the user access to the last element	4.5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	a finite ordered list with zero or more elements	2
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	A storage container that holds objects in a certain order which has a LIFO priority	5
What is a stack	A data structure for storing items which are to be accessed in last - in first - out order that can be implemented in three ways	Stacks are a type of container adaptors specifically designed to operate in a LIFO context - LRB - last - in first - out - RRB - where elements are inserted and extracted only from the end of the container	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	Push and pop are two main functions defined in a stack	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	Push which inserts an element on the top of the stack and pop which removes the last inserted element from the stack	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	Push and pop	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	Pop function and Push function	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	push and pop	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	push - LRB - insert an item - RRB - pop - LRB - remove an item - RRB -	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	Adding a new item and removing the item	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	Push - LRB - insert - RRB - and pop - LRB - retrieve - RRB -	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	push and pop	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	Push and Pop	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	pop and push	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	push - LRB - add an element - RRB - pop - LRB - remove an element - RRB -	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	Push and pop	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	pop and push	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	push - LRB - to add to a item the Stack - RRB - Pop - LRB - to pull the last item added from an array - RRB -	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	pop and push	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	push and pop push puts an object into the list and pop takes the last object off	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	Push and Pop are the two main functions of a stack	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	Push and Pop	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	push which adds an element to the stack and pop which takes an element off the stack	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	Push and Pop which add and remove data from the stack respectively	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	push and pop	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	pop to remove item push to insert an element	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	Pop and push	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	pop and push	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	push adds an item to the top of the stack pop removes the top item from the stack	5
What are the two main functions defined by a stack	Push and pop are two main functions defined in a stack	push and pop Push adds a given node to the top of the stack leaving previous nodes below Pop removes and returns the current top node of the stack	5
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	If you use a dynamically allocated array you must provide a destructor and copy constructor	3
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	Use a pointer that always points to the end of the array list for push or pop modifications	4.5
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	if you used an array to implement a stack when you add an element just add it to the end of an array and remove items from end of array also	4.5
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	You predetermine the size of the stack as you would an array This type can not grow	2.5
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	Allocate an array of some size The bottom stack element is stored at some element Last index in the array is the top Increment top when one element is pushed decrement after pop	4.5
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	You allocate an pre - defined array the bottom element is stored at element 0 and the last index is the head	4
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	Make an array make the bottom at spot 0 make the last spot in the array the top and increment top when you ad	4.5
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	treat the beginning of the array as the beginning of the stack	4
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	Use an index value called top to keep track of the last element in the array	4.5
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	create an array and implement pointers that point to the next list item down and stack them up	2
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	for efficiency it is easiest to implement the left to right method with the right most item being the one that is retrieved when a pop is performed and a push places an object on the furthest element	3.5
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	Create an array based on a pre - defined size N There cannot be more elements than N Bottom stack element stored at element 0 last index in the array is the top Increment top when one element is pushed decrement after pop	4.5
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	with the element added to the array so that the last element added is at the end and when the element is popped it takes the last element off the array	4
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	Allocate an array of some pre - defined size Bottom stack element stored at element 0 The last index in the array is the top Increment top when one element is pushed	4.5
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	Create an array size N N plus plus when one element is pushed N - - when one element is popped	4
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	define an array and keep track of a pointer to the last element as items are added	4
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	By allocating an array of predetermined size and an integer to track the top element of the stack The bottom member of the stack will go in element 0 of the array and for each element pushed the top tracking integer is incremented	4.5
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	Allocate an array of some size bottom stack element stored at element 0	4
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	you store the stack in the array but you have to keep in mind the first element	3
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	You keep track of the last item entered into the array and do not allow the user access to the other parts of the array	4
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	using arrays you are pushing one int at a time into the stack until you get to the end of your array	4
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	by having a max number of elements allocating an array with that number of elements storing the elements starting at 0 and keeping track of how many elements are currently in the list	4
How can you implement a stack with an array	Keep the top of the stack toward the end of the array so the push and pop operations will add or remove elements from the right side of the array	Stack usually holds a bunch of items with the same type therefore u can use an array to hold the content of the stack and an integer top that holds the index of the element at the top of the stack u Choose an array size Then the sequence of operations used u have to decide what data types are needed for this stack data structure	3
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	5
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	By implementing an array of a pre - defined size with the bottom stack element stored at element 0 and the last element stored in the array is the top You increment top when an element is pushed and you decrement it when an item is popped	5
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	If you use a dynamically allocated array you must provide a destructor and copy constructor	3
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	Create a int value that stores the head of the stack Increment the top when one element is pushed and decrement after it is popped	5
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	Use a pointer that always points to the end of the array list for push or pop modifications	4.5
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	if you used an array to implement a stack when you add an element just add it to the end of an array and remove items from end of array also	4.5
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	You predetermine the size of the stack as you would an array This type can not grow	2.5
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	Declare a variable that points the last item in the array which increases - LRB - plus plus - RRB - when items are pushed onto the stack and decreases - LRB - - - - RRB - when an item is popped off the top	5
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	Allocate an array of some size The bottom stack element is stored at some element Last index in the array is the top Increment top when one element is pushed decrement after pop	4.5
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	You allocate an pre - defined array the bottom element is stored at element 0 and the last index is the head	4
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	Make an array make the bottom at spot 0 make the last spot in the array the top and increment top when you ad	4.5
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	treat the beginning of the array as the beginning of the stack	4
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	Use an index value called top to keep track of the last element in the array	4.5
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	create an array and implement pointers that point to the next list item down and stack them up	2
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	for efficiency it is easiest to implement the left to right method with the right most item being the one that is retrieved when a pop is performed and a push places an object on the furthest element	3.5
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	Create an array based on a pre - defined size N There cannot be more elements than N Bottom stack element stored at element 0 last index in the array is the top Increment top when one element is pushed decrement after pop	4.5
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	with the element added to the array so that the last element added is at the end and when the element is popped it takes the last element off the array	4
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	Allocate an array of some pre - defined size Bottom stack element stored at element 0 The last index in the array is the top Increment top when one element is pushed	4.5
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	Create an array size N N plus plus when one element is pushed N - - when one element is popped	4
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	define an array and keep track of a pointer to the last element as items are added	4
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	By allocating an array of predetermined size and an integer to track the top element of the stack The bottom member of the stack will go in element 0 of the array and for each element pushed the top tracking integer is incremented	4.5
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	Allocate an array of some size bottom stack element stored at element 0	4
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	you store the stack in the array but you have to keep in mind the first element	3
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	You keep track of the last item entered into the array and do not allow the user access to the other parts of the array	4
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	using arrays you are pushing one int at a time into the stack until you get to the end of your array	4
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	by having a max number of elements allocating an array with that number of elements storing the elements starting at 0 and keeping track of how many elements are currently in the list	4
How can you implement a stack with an array	An array has a fixed size You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array	Stack usually holds a bunch of items with the same type therefore u can use an array to hold the content of the stack and an integer top that holds the index of the element at the top of the stack u Choose an array size Then the sequence of operations used u have to decide what data types are needed for this stack data structure	3
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	You can add an element to the end of the linked list and update a pointer called top each time you modify the list	3
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	This is the implementation of the stack using single linked list The operations performed on a stack are 1 - RRB - push - LRB - - RRB - : This is the function which is for insertion - LRB - pushing - RRB - of an element into stack It is similar to the insertion of an element at the end of a single linked list see the function insert end - LRB - - RRB - in the program for operations of single linked list 2 - RRB - pop - LRB - - RRB - : This is the function which is for deletion - LRB - popping up - RRB - of an element from the stack It is similar to the deletion of an element at the end of a single linked list see the function delete end - LRB - - RRB - in the program for operations of single linked list 3 - RRB - stack display - LRB - - RRB - : This is the function which is for displaying the elements of a stack	4
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	Using nodes to keep track of the head of the stack Then using Push - LRB - - RRB - and Pop - LRB - - RRB - to create the stack as needed	4
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	Use the head as the top of the stack only modify the head when you push or pop push would add a new item to the head pop would remove the item from the head	4.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	you implement a stack with a list by changing the pointer to the first element of the list to the new item and move the pointer from the top of the stack to the next item when removing an item	4.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	You dynamicly create space as the stack grows The stack can be as long as you need	2.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	Creating a linked list Add an element to the top of the stack when pushing and deleting an element when popping	4
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	A singly - linked list is already a lot like a stack it just depends on the way you address moving the head	3.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	make a list make the bottom the head add on the end and make the end top	3.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	use the add function with a list as the beginning of the stack and remove for pop	4.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	Use head as the top and push and pop nodes from the head	4.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	create a node based list that points to the next list item down	1.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	have the head of the list be the last item added and a push just adds a new head	4.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	Create a new list Pop elements in the stack as needed Push the stack to remove items unless the stack is empty The top item is at the head of the list The last item is at the end	4.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	adding the element to the end of the list so that it links to the element before it when popping the element it takes the last element in the list and sets the previous one as the end of the list	3.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	You can implement a stack using arrays or and linked list By the use of pointers that point element - LRB - node - RRB - to the next element in the stack By the use of pointers the stack becomes a linked list	2.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	Elements are only inserted and removed from the head of the list There is no header node or current pointer	4.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	use a linked list and keep track of a pointer that points to the first item	4
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	A singly linked list can already be easily used for LIFO data storage Members of a stack can simply be pushed and popped from a list the first item in will be the last out	4.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	using pointer	1.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	the top is the first pointer	3
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	Keep a pointer pointing to the last element entered at the front of the array and move the pointer back when you delete an element	2.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	using linked list you are pushing the node that contains each int to the stack until you get to the end of your linked list	2.5
How can you implement a stack with a list	Keep the top of the stack pointing to the head of the linked list so the push and pop operations will add or remove elements at the beginning of the list	Using a linked list is one way to implement a stack so that it can handle essentially any number of elements It is usually convenient to put a data structure in its own module thus you will want to create files stack h and a stack c	2
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	You can add an element to the end of the linked list and update a pointer called top each time you modify the list	3
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	This is the implementation of the stack using single linked list The operations performed on a stack are 1 - RRB - push - LRB - - RRB - : This is the function which is for insertion - LRB - pushing - RRB - of an element into stack It is similar to the insertion of an element at the end of a single linked list see the function insert end - LRB - - RRB - in the program for operations of single linked list 2 - RRB - pop - LRB - - RRB - : This is the function which is for deletion - LRB - popping up - RRB - of an element from the stack It is similar to the deletion of an element at the end of a single linked list see the function delete end - LRB - - RRB - in the program for operations of single linked list 3 - RRB - stack display - LRB - - RRB - : This is the function which is for displaying the elements of a stack	4
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	Using nodes to keep track of the head of the stack Then using Push - LRB - - RRB - and Pop - LRB - - RRB - to create the stack as needed	4
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	Use the head as the top of the stack only modify the head when you push or pop push would add a new item to the head pop would remove the item from the head	4.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	you implement a stack with a list by changing the pointer to the first element of the list to the new item and move the pointer from the top of the stack to the next item when removing an item	4.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	You dynamicly create space as the stack grows The stack can be as long as you need	2.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	Declare a pointer that points to the head of the linked list only add and remove nodes from the beginning of the list	5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	Creating a linked list Add an element to the top of the stack when pushing and deleting an element when popping	4
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	A singly - linked list is already a lot like a stack it just depends on the way you address moving the head	3.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	make a list make the bottom the head add on the end and make the end top	3.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	use the add function with a list as the beginning of the stack and remove for pop	4.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	Use head as the top and push and pop nodes from the head	4.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	create a node based list that points to the next list item down	1.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	have the head of the list be the last item added and a push just adds a new head	4.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	Create a new list Pop elements in the stack as needed Push the stack to remove items unless the stack is empty The top item is at the head of the list The last item is at the end	4.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	adding the element to the end of the list so that it links to the element before it when popping the element it takes the last element in the list and sets the previous one as the end of the list	3.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	You can implement a stack using arrays or and linked list By the use of pointers that point element - LRB - node - RRB - to the next element in the stack By the use of pointers the stack becomes a linked list	2.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	Elements are only inserted and removed from the head of the list There is no header node or current pointer	4.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	use a linked list and keep track of a pointer that points to the first item	4
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	A singly linked list can already be easily used for LIFO data storage Members of a stack can simply be pushed and popped from a list the first item in will be the last out	4.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	using pointer	1.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	the top is the first pointer	3
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	Keep a pointer pointing to the last element entered at the front of the array and move the pointer back when you delete an element	2.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	using linked list you are pushing the node that contains each int to the stack until you get to the end of your linked list	2.5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	have a linked list and for each push add an item onto beginning of the list and for each pop remove the first element in the list	5
How can you implement a stack with a list	You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to	Using a linked list is one way to implement a stack so that it can handle essentially any number of elements It is usually convenient to put a data structure in its own module thus you will want to create files stack h and a stack c	2
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	Array based because they are faster easier to keep track of and less complexity in code	2.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	The list - based implementation is preferred since the big O - LRB - 1 - RRB - is very efficient	3
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	Linked list implementation is preferred That way the list can be moved along without iteration	3
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	Linked list because it takes up less memory and is scalable	3
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	list based because the nodes are easier to work with and can be traversed easier	3
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	Array is preferred Linked list implementation requires extra space to store pointers Space is allocated dynamically in the list - based which takes more time	2.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	Array based implementation requires less memory than a list based inceasing the size of a resizeable array can waste storage and time	3.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	i would think a list based would be better because you can change the pointers of the nodes to add or remove things from your stack	4
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	array based list is preferred because it can hold any size as long as u specify it	1
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	List based is preferred because the stack you create is not limited in size and can increase or decrease in size as needed	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	Array - based prevents the push operation from adding an item to the stack if the stack size limit which is the size of the array has been reached List - base much simpler to write and does not have a fixed size	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	Array based because they are faster easier to keep track of and less complexity in code	2.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	list - based because it does not use a fixed size like an array would	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	usually linked list because it does not have a fixed size But if you know or want to set a max size array is better	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	List - based Allows more flexablity with size of the stack	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	Linked lists are preferred for implementing stacks because they are not limited to a set number of elements	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	The list - based implementation is preferred since the big O - LRB - 1 - RRB - is very efficient	3
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	Linked list implementation is preferred That way the list can be moved along without iteration	3
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	list because it its size is not determined	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	Linked list because it takes up less memory and is scalable	3
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	List - based as the list can be grown dynamically and as the head node is easily accessible	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	list based because the nodes are easier to work with and can be traversed easier	3
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	list based because of the lower processing overhead and nearly unlimited space due to linked list design	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	list - based It can grow and shrink dynamically unlike the fixed size array	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	list based because arrays can become full lists can grow or shrink as needed	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	List - bases implentation is preferred One of the main reasons is because of that the list has no fixed size	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	Array is preferred Linked list implementation requires extra space to store pointers Space is allocated dynamically in the list - based which takes more time	2.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	link list is preferred because it makes pushing elements easier because there is no limit other than memory to the number of elements	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	List - based implementation is much easier to implement and allows the stack to scale as necessary It is therefore the preferred implementation	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	Array based implementation requires less memory than a list based inceasing the size of a resizeable array can waste storage and time	3.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	in an array based stack you would need to pre - determine a size where in a list you can increase or decrease the size however you want	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	A list - based implementation is preferred because the list is more flexible than a array	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	i would think a list based would be better because you can change the pointers of the nodes to add or remove things from your stack	4
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	list based because it is much more flexible easier to use and doesnt need to have a max size defined when it is made	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred and why	List based is preferred because it is not constrained to a fix size The down fall is that it takes up more memory because each node has at least two parts the item and the pointer	array based list is preferred because it can hold any size as long as u specify it	1
How are infix expressions evaluated by computers	First they are converted into postfix form followed by an evaluation of the postfix expression	By using parentheses to have order in the expression	2.5
How are infix expressions evaluated by computers	First they are converted into postfix form followed by an evaluation of the postfix expression	In postfix notation	4
How are infix expressions evaluated by computers	First they are converted into postfix form followed by an evaluation of the postfix expression	in postfix format	4
How are infix expressions evaluated by computers	First they are converted into postfix form followed by an evaluation of the postfix expression	they use parenthisis and a stack to determine which evaluations need to be made first	3
How are infix expressions evaluated by computers	First they are converted into postfix form followed by an evaluation of the postfix expression	By throwing variables into a postfix expression and operands onto a parentheses regulated stack until end parentheses and enough variables to operate on are encountered	4.5
How are infix expressions evaluated by computers	First they are converted into postfix form followed by an evaluation of the postfix expression	by being passed to the function by a leading term	1.5
How are infix expressions evaluated by computers	First they are converted into postfix form followed by an evaluation of the postfix expression	i have an hard time explaining this so i will show how infix is evaluated instead Start with an infix expression like - LRB - - LRB - - LRB - 5 plus 2 - RRB - multiplied by 5 - RRB - plus - LRB - 400 divided by - LRB - 2 plus 3 - RRB - - RRB - - RRB - and push items until you get a - RRB - and once that happens perform the operations until you reach an - LRB - with that complete you will now have - LRB - - LRB - 7 multiplied by 5 - RRB - plus - LRB - 400 divided by - LRB - 2 plus 3 - RRB - - RRB - - RRB - as now the expression that will be evaluated perform last step again - LRB - 35 plus - LRB - 400 divided by - LRB - 2 plus 3 - RRB - - RRB - - RRB - is now the stack repeat agian - LRB - 35 plus - LRB - 400 divided by 5 - RRB - - RRB - is now the stack after that repeat - LRB - 35 plus 80 - RRB - is now the stack repeat again 115 is now the stack and is returned	2.5
How are infix expressions evaluated by computers	First they are converted into postfix form followed by an evaluation of the postfix expression	infix expressions are pointers evaluated by reference to the memory location	1.5
How are infix expressions evaluated by computers	First they are converted into postfix form followed by an evaluation of the postfix expression	When an operand is entered the computer Pushes it onto a stack When an operator is entered the computer Applies it to the top two operands of the stack Pops the operands from the stack Pushes the result of the operation onto the stack	4
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	They are converted to post fix expressions It still follow the order of precedence for the operators	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	They are first converted to postfix expressions and then evaluated	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	Computers cannot evaulate infix expressions it must first convert infix to postfix expression then it can evaluate	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	By using parentheses to have order in the expression	2.5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	In postfix notation	4
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	computers usually convert infix expressions to post fix expression and evaluate them using a stack	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	they are converted to postfix	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	Infix expressions are interpreted as postfix expressions by implementing stacks	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	They are first converted into an equivalent postfix expression so it can be read by the computer	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	The computer translates the infix expression to a postfix expression then solves	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	in postfix format	4
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	they use parenthisis and a stack to determine which evaluations need to be made first	3
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	By throwing variables into a postfix expression and operands onto a parentheses regulated stack until end parentheses and enough variables to operate on are encountered	4.5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	by being passed to the function by a leading term	1.5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	i have an hard time explaining this so i will show how infix is evaluated instead Start with an infix expression like - LRB - - LRB - - LRB - 5 plus 2 - RRB - multiplied by 5 - RRB - plus - LRB - 400 divided by - LRB - 2 plus 3 - RRB - - RRB - - RRB - and push items until you get a - RRB - and once that happens perform the operations until you reach an - LRB - with that complete you will now have - LRB - - LRB - 7 multiplied by 5 - RRB - plus - LRB - 400 divided by - LRB - 2 plus 3 - RRB - - RRB - - RRB - as now the expression that will be evaluated perform last step again - LRB - 35 plus - LRB - 400 divided by - LRB - 2 plus 3 - RRB - - RRB - - RRB - is now the stack repeat agian - LRB - 35 plus - LRB - 400 divided by 5 - RRB - - RRB - is now the stack after that repeat - LRB - 35 plus 80 - RRB - is now the stack repeat again 115 is now the stack and is returned	2.5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	The infix expression is converted to postfix form	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	by converting them to postfix expressions and putting the operations in a stack	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	The computer converts the infix expression to postfix form Then evaluates the postfix expression	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	infix expressions are converted to postfix expressions before they can be evaluated by a computer Operands stay in the same order Operators always follow the operands	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	infix expressions are pointers evaluated by reference to the memory location	1.5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	computers convert infix expressions to postfix form before evaluation	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	convert infix expressions to postfix expression and evaluate the postfix expression	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	When an operand is entered the computer Pushes it onto a stack When an operator is entered the computer Applies it to the top two operands of the stack Pops the operands from the stack Pushes the result of the operation onto the stack	4
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	Computers convert an infix expression into a postfix expression They then push the numbers onto a stack and pop them out as they are needed	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	infix expressions are converted to postfix - LRB - i e 3 plus 2 is changed to 32 plus - RRB -	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	they are transformed into post - fix expressions then evaluated with a stack	5
How are infix expressions evaluated by computers	They are converted to post fix expressions It still follow the order of precedence for the operators	Writing arithmetic expressions is called infix notation This is because a binary operator - LRB - like plus - RRB - is written in between its two operands - LRB - as in a plus b - RRB - There are two alternative forms of notation used in certain situations One is prefix notation in which an operator is written before its operands In prefix notation the sum of a and b is written plus a b This is the notation used to write function calls in mathematics and computer science It is also used in the Lisp and Scheme programming languages In postfix notation an operator is written after its operands The sum of a and b is written a b plus - LRB - You may have seen this as reverse Polish notation - RRB - Postfix notation forms the conceptual basis for the way that arithmetic expressions are evaluated by a computer One important characteristic of both postfix and prefix notations is that they are unambiguous; no parentheses are needed to indicate the order of operations	5
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	isEmptry - LRB - - RRB - or or determines if the stack is full or not pop - LRB - - RRB - or or to remove the top element if it is not the on you are looking for search - LRB - - RRB - or or you compare each element of the stack to the data you are looking for	3
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	You would have to keep using peek or getTop to see what the top element is then popping the top element until peek or getTop provides the element you are looking for	3
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	Push adds a given node to the top of the stack leaving previous nodes below Pop removes and returns the current top node of the stack	3
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	if the stack is implemented using an array you could simply search the array for the item If the stack is implemented using a linked list you would have to pop the values off of the stack until either the value is found or the stack is empty you would then have to have the items put back into the list	4.5
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	You need to pop each item on the stack and compare the item Once the item is found no more items need to be removed	3.5
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	Basically pop the stack until you find the given element	3.5
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	Iterate through the stack checking the number against the current element	1.5
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	pop and push	3
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	either traverse the entire list and pop the given part or create a pointer system that automatically points to it	3
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	if top item ! equals given element pop the stack Repeat until item is found or stack is empty	3.5
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	could traverse through the list or array to find the element	2
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	you need the pop opertation to go throught the stack and find the element	3.5
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	createStack push isEmpty pop and a boolean return value	3
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	you would have to traverse the stack popping each element to search it	3.5
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	Pop each element off the stack - LRB - and into another stack for storage - RRB - until the desired element is found	4
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	pop operation	2.5
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	to pop elements then push them back	4.5
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	A function to keep track of the elements popped and a function to put the popped elements backinto the function	4.5
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	you would pop each element and compare it to what you are looking for and then push it back on the stack so that it is not lost	4.5
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	you would need to perform a search through the list of elements - LRB - i dont really understand what this question is asking its not very clear - RRB -	1.5
What operations would you need to perform to find a given element on a stack	Pop all the elements and store them on another stack until the element is found then push back all the elements on the original stack	StackPush - LRB - - RRB - StackPop - LRB - - RRB - StackIsEmpty - LRB - - RRB -	3
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	isEmptry - LRB - - RRB - or or determines if the stack is full or not pop - LRB - - RRB - or or to remove the top element if it is not the on you are looking for search - LRB - - RRB - or or you compare each element of the stack to the data you are looking for	3
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	You would have to keep using peek or getTop to see what the top element is then popping the top element until peek or getTop provides the element you are looking for	3
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	Push adds a given node to the top of the stack leaving previous nodes below Pop removes and returns the current top node of the stack	3
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	Pop each item off the top until you find what you are looking for If the stack ends up empty and you never found the item then it does not exist in the stack It may also be necessary to save the popped values in case you want to recreate the stack	5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	if the stack is implemented using an array you could simply search the array for the item If the stack is implemented using a linked list you would have to pop the values off of the stack until either the value is found or the stack is empty you would then have to have the items put back into the list	4.5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	You need to pop each item on the stack and compare the item Once the item is found no more items need to be removed	3.5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	Pop an element from one stack check to see if it is the desired element if not push it onto another stack When finished pop the items from the second stack and push them back onto the first stack - LRB - this will ensure the order of the elements is maintained - RRB -	5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	Basically pop the stack until you find the given element	3.5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	Iterate through the stack checking the number against the current element	1.5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	pop and push	3
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	pop all elements off stack until you find that element and then push the popped elements back on the stack	5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	Keep popping nodes and storing them in an alternate stack until the given element is found then pop the given element and push the previously popped nodes back onto the stack	5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	either traverse the entire list and pop the given part or create a pointer system that automatically points to it	3
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	Depends on the type of stack on a true stack you will haft to pop all of the elements of the stack until you find the element you want and then after that you will need to push all the elements that where removed back in to the stack in the order that they where removed With a Java style stack where there is a peek function it will return the element you wanted instead of requiring you to perform all the excessive actions that are required from a true stack	5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	if top item ! equals given element pop the stack Repeat until item is found or stack is empty	3.5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	could traverse through the list or array to find the element	2
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	you need the pop opertation to go throught the stack and find the element	3.5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	createStack push isEmpty pop and a boolean return value	3
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	you would have to traverse the stack popping each element to search it	3.5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	Pop each element off the stack - LRB - and into another stack for storage - RRB - until the desired element is found	4
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	pop operation	2.5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	to pop elements then push them back	4.5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	A function to keep track of the elements popped and a function to put the popped elements backinto the function	4.5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	you would pop each element and compare it to what you are looking for and then push it back on the stack so that it is not lost	4.5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	you would need to perform a search through the list of elements - LRB - i dont really understand what this question is asking its not very clear - RRB -	1.5
What operations would you need to perform to find a given element on a stack	Using linked lists and stacks you would need a temp stack to retain the values Then you would use the Pop - LRB - - RRB - function to pop off each element and then compare it If its not the element your looking for Push - LRB - - RRB - it to the temp stack Repeat until the element is found When you find it Pop - LRB - - RRB - off the temp stack back onto the regular stack to have a complete stack again	StackPush - LRB - - RRB - StackPop - LRB - - RRB - StackIsEmpty - LRB - - RRB -	3
What is a queue	A data structure that can store elements which has the property that the last item added will be the last to be removed - LRB - or first - in - first - out - RRB -	a queue is a list of objects in a particular order that is read one at a time starting at the first followed by the second and so on	4
What is a queue	A data structure that can store elements which has the property that the last item added will be the last to be removed - LRB - or first - in - first - out - RRB -	Like a linked list but first in first out	4.5
What is a queue	A data structure that can store elements which has the property that the last item added will be the last to be removed - LRB - or first - in - first - out - RRB -	Queue is a buffer which store element in a particular order	3.5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	A data structure in c plus plus which is a collection of data that is kept in order First in first out	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	a queue is a list of objects in a particular order that is read one at a time starting at the first followed by the second and so on	4
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	A queue is an abstract data structure in which operations are performed at both ends giving the queue first in first out behavior	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	A queue stores a set of elements in a particular order Its principle of operation is FIFO - LRB - first in first out - RRB - which means the first element inserted is the first one to be removed	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	An ADT whose first inserted item is the first item removed This uses the FIFO idea where items enter a queue at its back and leave at its front	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	Last in last out architecture It works the same way a line at the bank would work the person that is been waiting the longest gets served first	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	a queue is a data structure that stores elements in a First in First out order	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	A waiting list of items that operation in a FIFO - LRB - first in first out - RRB - order	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	A queue is similar to an array except that the data can only be accessed sequentially rather than at random Unlike a stack a queue follows FIFO First in First out	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	is a particular kind of collection in which the entities in the collection are kept in order and the principal - LRB - or only - RRB - operations on the collection are the addition of entities to the rear terminal position and removal of entities from the front terminal position First in First Out - LRB - FIFO Method - RRB -	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	Like a linked list but first in first out	4.5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	A queue is a FIFO data structure	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	A queue is a first in first out data structure	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	Its like a stack but uses the linked list to stack a little differently It is FIFO so the first thing enqueued is the first thing dequeued	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	A first in first out Abstract Data type that can be used to store values	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	Stores a set of elements in a particular order with a First In First Out principle	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	object that stores elements in order that follows first in first out the first element added is the first one to come off	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	A quese is an list that stores a set of elements in a particular order It has Stack principle but in this case its First In First Out The first element inserted is the first element to be removed	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	a finite ordered list with zero or more elements based upon First In First Out	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	a data structure that performs operations in the order of first in first out FIFO	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	A Queue is a first in first out data structure such that the first element added is also the first removed	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	Queue is a buffer which store element in a particular order	3.5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	stores a set of elements where the first element in is the first element to be removed	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	A data structure that removes nodes from the head and adds nodes at the tail	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	a queue is a list of things that follows the first in first out behavior	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	a queue is a storage container that holds its objects in a first in first out priority	5
What is a queue	A data structure in c plus plus which is a collection of data that is kept in order First in first out	The queue is another data structure A physical analogy for a queue is a line at a bank When you go to the bank customers go to the rear - LRB - end - RRB - of the line and customers come off of the line - LRB - i e are serviced - RRB - from the front of the line	5
What are the two main functions defined by a queue	enqueue and dequeue	rear and front	2.5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	enqueue which inserts a specified element at the head of the specified queue and dequeue which removes the specified element from the queue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	The two main functions are enqueue which inserts an item at the back of the queue and dequeue which removes an item from the front of the queue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	The two main functions are enqueue and dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	Enqueue and Dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	Enqueue and Dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	enqueue insert into queue dequeue remove element	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	Remove the item added first add items to the back	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	The two main functions of a queue are enqueue and dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	enqueue and dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	enqueue and dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	Enqueue and Dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	enqueue and dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	enqueue and dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	enque - LRB - Data - RRB - Deque - LRB - - RRB -	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	enqueue and dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	enqueue and dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	The two functions are Enqueue and Dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	enqueue dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	enqueue that adds an item to the queue dequeue that takes the first item out of the queue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	Enqueue and dequeue which add and remove elements from the queue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	Enqueue and Dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	dequeue and enqueue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	enqueue and dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	enqueue and dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	enqueue dequeue	5
What are the two main functions defined by a queue	enqueue which adds data to the queue and dequeue which deletes data from the queue	rear and front	2.5
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	Make use of a front pointer and a tail pointer When the tail pointer reaches the end of an array it gets reset to the front of the array If the two pointers are equal then the queue is either full or just has one element	4.5
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	you create an array with the max size of your queue and adjust the items to make them follow FIFO procedure	3
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	By implementing an array and only adding items to the end of the array and only removing items from the beginning of the array	3
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	For applications in which a fixed - sized queue does not present a problem you can use an array to represent a queue	2.5
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	Keep track of the front and the back of the array as you increase and decrease the elements inside the array	4
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	Declare the size of an array and have special conditional statements - LRB - pointers - RRB - to make sure you re - use ALL of the array Say you have an array of 20 elements you load up 18 then dequeue 3 when you enqueue 4 more elements you want to loop back to index 0 and continue from there this process saves resources	4.5
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	you could use the first element of the list as the remove point and insert at the end f you do this you would have to shift the elements down each time you remove an item unless you make the array circular	4
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	Utilizing indexes for the front and the back Front is 0 and as you add items the back index is incremented	4
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	Declare two variables front and rear to be used to denote which elements in the array can be accessed Increment rear whenever data is enqueued to the end and increment front whenever data is dequeued	4.5
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	It is an array of fixed size A queue of maximum N elements	2.5
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	make an array of a size and add on to the front and delete from the back keep track of the two so that you know when it is full and where to add or subtract from	4
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	By using the beginning of the array as the removal point of the queue - LRB - or beginning of the queue - RRB - and the ith element as the end of the queue	3.5
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	add in data from the first element to the last take out data from the first element to the last	3
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	you can take the array and put it in a queue stack or you can just traverse the list and keep track of top and bottom	3.5
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	create a fixed array size with with 2 integers to point to the beginning and the end of the que and special cases to know when the que is empty or full	4
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	Keep track of the front and rear indexes Either : 1 - RRB - Dequeue items by shifting the array left 2 - RRB - Use wrapped configuration	4
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	add items into a fixed size array pull the items out by calling on them with the starting index increase starting index so when it calls again its now the next index element in the array	3.5
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	To use and array to implement a Queue element or item 0 should be the top element in the array Every time an element is inserted all the items in the array are pushed back one space The top element is always removed first	3
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	fixed size array with max N elements Need to keep track of front and rear of array	4
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	A pointer based implementation of a queue could use a linear linked list with two external pointers one to the front and one to the back	2
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	remove the element then shift the elements one space back	3
How can you implement a queue with an array	Use a circular array Keep the rear of the queue toward the end of the array and the front toward the beginning and allow the rear pointer to wrap around	an array is a type of queue with a fixed length	1.5
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	Make use of a front pointer and a tail pointer When the tail pointer reaches the end of an array it gets reset to the front of the array If the two pointers are equal then the queue is either full or just has one element	4.5
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	you create an array with the max size of your queue and adjust the items to make them follow FIFO procedure	3
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	By implementing an array and only adding items to the end of the array and only removing items from the beginning of the array	3
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	For applications in which a fixed - sized queue does not present a problem you can use an array to represent a queue	2.5
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	Keep track of the front and the back of the array as you increase and decrease the elements inside the array	4
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	Declare the size of an array and have special conditional statements - LRB - pointers - RRB - to make sure you re - use ALL of the array Say you have an array of 20 elements you load up 18 then dequeue 3 when you enqueue 4 more elements you want to loop back to index 0 and continue from there this process saves resources	4.5
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	you could use the first element of the list as the remove point and insert at the end f you do this you would have to shift the elements down each time you remove an item unless you make the array circular	4
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	Utilizing indexes for the front and the back Front is 0 and as you add items the back index is incremented	4
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	Declare two variables front and rear to be used to denote which elements in the array can be accessed Increment rear whenever data is enqueued to the end and increment front whenever data is dequeued	4.5
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	It is an array of fixed size A queue of maximum N elements	2.5
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	make an array of a size and add on to the front and delete from the back keep track of the two so that you know when it is full and where to add or subtract from	4
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	By using the beginning of the array as the removal point of the queue - LRB - or beginning of the queue - RRB - and the ith element as the end of the queue	3.5
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	add in data from the first element to the last take out data from the first element to the last	3
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	you can take the array and put it in a queue stack or you can just traverse the list and keep track of top and bottom	3.5
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	create a fixed array size with with 2 integers to point to the beginning and the end of the que and special cases to know when the que is empty or full	4
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	Keep track of the front and rear indexes Either : 1 - RRB - Dequeue items by shifting the array left 2 - RRB - Use wrapped configuration	4
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	add items into a fixed size array pull the items out by calling on them with the starting index increase starting index so when it calls again its now the next index element in the array	3.5
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	To use and array to implement a Queue element or item 0 should be the top element in the array Every time an element is inserted all the items in the array are pushed back one space The top element is always removed first	3
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	fixed size array with max N elements Need to keep track of front and rear of array	4
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	5
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	Using an array for a queue the size of the array allocated limits the size of the queue An array based queue class must keep track of both the front and back of the queue which may need to wrap around the array	5
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	A pointer based implementation of a queue could use a linear linked list with two external pointers one to the front and one to the back	2
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	remove the element then shift the elements one space back	3
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	By having the head pointer point to the first or least current data entered and having the tail point to the most current data entered A method must be created so that the tail pointer does not leave the array	5
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	an array is a type of queue with a fixed length	1.5
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	your storage class has an array and you keep track of the index of the first and last item in the array and wrap around when end of the array is full	5
How can you implement a queue with an array	by keeping track of a front item and a rear item or with a circular array that uses the modulo function	Boolean isFullQ - LRB - queue - RRB - : : equals rear equals equals MAX QUEUE SIZE - 1	5
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	theoretically you could do it two ways one of which uses more processing power and memory no larger than the queue is ever at when full and the other which uses almost infinite memory The more practical method would be two place the items in an array and remove the item in position one of the array after which you can shift the array and add another element if required The other option which can use infinite memory when used for long term queues such as job scheduling that goes nonstop for extended periods that is to implement an array and add the items read item one raise your counter value to two ecetera and continue adding more elements to the array the downside to this method is after you use element one it is still in memory or im crazy who knows	2
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	You can use list to represent the items in a queue	1.5
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	Have a pointer to the last element in the list and then use enqueue to insert items there Link the first and last elements together to dequeue the list	3.5
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	Utilizing a front pointer and a back pointer The front poiner and back pointer points to the first item into the queue As you add items the front remains the same but the back poiner next points to the new item and the new item is assigned to become the new back pointer	4.5
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	Implement a linked list that only allows nodes to be added to the tail and can only be retrieved from the head	4.5
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	Check if list is empty and add elements to the list	2.5
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	make a linked list and add on to the front and delete from the back keep track of both to do so	4.5
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	by making the head of the list the beginning of the queue and the last listed item the insertion point of the queue	4.5
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	throw in data at the head and take it out at the tail	4.5
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	You create a list of nodes that had a head and a top pointer and the functions are basically the same substituting pop and push with enqueue and dequeue	3
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	fairly easy singly linked list with a pointer to the head and tail of hte list deque first item in que create temp pointer to next element delete head and then make head the temporary pointer enque new item use pointer to end of list add a new item to the next item of the tail and make the tail the next item of the current tail	4.5
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	Use a linked list with 2 pointers one to the front and one to the back As long as back ! equals front the queue is not empty	4.5
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	create a node with the input data continue to add to the list when dequeueing get the first elements data and set the next element in the list as the new first element	4
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	A linked list with Stack principles The Queue top element is the element that is always being removed first Must use nodes to contain each element with a pointer to the top element which also could be called the head pointer	3
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	linked list checking for front and rear Keep enqueueing elements until front equal to rear 1	3.5
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	a queue can be implemented in a list by keeping track of two pointers a head and a tail	4.5
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	Implement the operation dequeue - LRB - - RRB - as the list operation remove - LRB - 1 - RRB - and the operation getFront - LRB - queueFront - RRB - as the list operation retrieve - LRB - 1 queueFront - RRB -	4
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	remove the first element and reference the second element as the new head of the list	3.5
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	you would have your list and add a back pointer so that your program knows where the end is	4
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	your queue storage class has a list and for enqueue you add the item to the end of the list and for dequeue you return the first item in the list	4.5
How can you implement a queue with a list	Keep the rear of the queue pointing to the tail of the linked list so the enqueue operation is done at the end of the list and keep the front of the queue pointing to the head of the linked list so the dequeue operation is done at the beginning of the list	temp implies next equals NULL; if - LRB - front - RRB - - LRB - rear - RRB - implies next equals temp; else front equals temp; rear equals temp;	3.5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	theoretically you could do it two ways one of which uses more processing power and memory no larger than the queue is ever at when full and the other which uses almost infinite memory The more practical method would be two place the items in an array and remove the item in position one of the array after which you can shift the array and add another element if required The other option which can use infinite memory when used for long term queues such as job scheduling that goes nonstop for extended periods that is to implement an array and add the items read item one raise your counter value to two ecetera and continue adding more elements to the array the downside to this method is after you use element one it is still in memory or im crazy who knows	2
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	By implementing a list in which a tail pointer points to the item most recently inserted onto the back of the list and a head pointer which points to the item least recently inserted onto the list Also items can only be removed from the front of the list and can only be added to the back of the list	5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	You can use list to represent the items in a queue	1.5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	Have a pointer to the last element in the list and then use enqueue to insert items there Link the first and last elements together to dequeue the list	3.5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	Enqueue to the end of the linked list dequeue items from the beginning - LRB - head - RRB - of the list	5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	you use the first element in the list as the remove point for the queue and insert items at the end of the list	5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	Utilizing a front pointer and a back pointer The front poiner and back pointer points to the first item into the queue As you add items the front remains the same but the back poiner next points to the new item and the new item is assigned to become the new back pointer	4.5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	Implement a linked list that only allows nodes to be added to the tail and can only be retrieved from the head	4.5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	Check if list is empty and add elements to the list	2.5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	make a linked list and add on to the front and delete from the back keep track of both to do so	4.5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	by making the head of the list the beginning of the queue and the last listed item the insertion point of the queue	4.5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	throw in data at the head and take it out at the tail	4.5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	You create a list of nodes that had a head and a top pointer and the functions are basically the same substituting pop and push with enqueue and dequeue	3
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	fairly easy singly linked list with a pointer to the head and tail of hte list deque first item in que create temp pointer to next element delete head and then make head the temporary pointer enque new item use pointer to end of list add a new item to the next item of the tail and make the tail the next item of the current tail	4.5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	Use a linked list with 2 pointers one to the front and one to the back As long as back ! equals front the queue is not empty	4.5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	create a node with the input data continue to add to the list when dequeueing get the first elements data and set the next element in the list as the new first element	4
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	A linked list with Stack principles The Queue top element is the element that is always being removed first Must use nodes to contain each element with a pointer to the top element which also could be called the head pointer	3
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	linked list checking for front and rear Keep enqueueing elements until front equal to rear 1	3.5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	a queue can be implemented in a list by keeping track of two pointers a head and a tail	4.5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	each element of a queue can be allocated in the nodes of an linked list New elements should be added to the head of the list with each dequeued element coming off the tail	5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	Implement the operation dequeue - LRB - - RRB - as the list operation remove - LRB - 1 - RRB - and the operation getFront - LRB - queueFront - RRB - as the list operation retrieve - LRB - 1 queueFront - RRB -	4
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	remove the first element and reference the second element as the new head of the list	3.5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	By creating and adding nodes at the end of the list and removing the nodes from the beginning of the list	5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	you would have your list and add a back pointer so that your program knows where the end is	4
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	your queue storage class has a list and for enqueue you add the item to the end of the list and for dequeue you return the first item in the list	4.5
How can you implement a queue with a list	A list can have unlimited elements in it You can push a node onto the end of the list and pop the one in the front	temp implies next equals NULL; if - LRB - front - RRB - - LRB - rear - RRB - implies next equals temp; else front equals temp; rear equals temp;	3.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	List based Because it is on the run time order of N also it does not have a limited size like an array does	4.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	A list - based implementation would be preferred The array is slightly more complicated where you would need to keep track of both front and rear	3.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	List - based Array - based queues have a way to complicate things to an extent	3.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	array - based is preferred because all you have to keep track of is the array itself and the count	1.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	List - based because when you enqueue - LRB - or dequeue depending upon your implementation - RRB - you would need to shift all elements to another space with an array causing a horrid time complexity for large data sets where as you can just modify the pointers in a list for a constant time complexity	4.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	list based its much simpler and the run time is better	4
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	I think array based is batter because of fixed size but on other had list base is more flaxible You do not have to worry about the size	4
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	Link - based because they are dynamic - LRB - no size constraints - RRB -	list based because you dont need to shift the elements like you do in array based queues	4
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	List based Because it is on the run time order of N also it does not have a limited size like an array does	4.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	linked list based because it does not store the items linearly in memory but instead as individual blocks	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	List based is preferred because there are no size restrictions	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	A list - based implementation would be preferred The array is slightly more complicated where you would need to keep track of both front and rear	3.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	List - based Array - based queues have a way to complicate things to an extent	3.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	List - based Less code and no size limitation or declaration which means it is also more efficient and versatile	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	list based is prefered because it does not have a set size and insertion and deletion can be done very quickly of you keep pointers to first element and last	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	List based is preferred because there are space issues with array based due to rightward drift The fix for rightward drift requires constant shifting of the queue data	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	Similar to stacks linked lists are preferable for queues because the size can be adjusted	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	array - based is preferred because all you have to keep track of is the array itself and the count	1.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	list because its size is not defined	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	List - based because when you enqueue - LRB - or dequeue depending upon your implementation - RRB - you would need to shift all elements to another space with an array causing a horrid time complexity for large data sets where as you can just modify the pointers in a list for a constant time complexity	4.5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	queue are best with lists especially if the tail is kept track of as the list can be dynamically grown without losing track of the head or tail	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	list based its much simpler and the run time is better	4
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	list based because of the lessened memory usage initially and the increased limits on how large the que can become	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	List - based because it is not fixed size	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	list its dynamic and no size needs to be declared	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	list bases implementatoin is best because you use pointers to keep track of the front and back pointers Easier to maintain but uses more memory	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	list based It can dynamically grow and has fewer restrictions	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	list based is preferred because memory allocation is not an issue	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	List based solutions are preferred because they allow for queues of any size	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	I think array based is batter because of fixed size but on other had list base is more flaxible You do not have to worry about the size	4
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	list based because you dont need to shift the elements like you do in array based queues	4
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	List - based because memory is not constricted	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	list based because the array based has to have a fixed size it cannot be added to or removed from as easily	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	list - based array is easier and more scalable	5
Which implementation - LRB - array - based vs list - based - RRB - is preferred for a queue and why	linked list based because it does not store the items linearly in memory but instead as individual blocks	list based becuase an arrary based has to have an arrary size and needs to be pre - defined and cannot be changed dynamically	5
What is the stack operation corresponding to the enqueue operation in queues	push	The stack operation is almost the opposite of the enqueue operation	2.5
What is the stack operation corresponding to the enqueue operation in queues	push	push equals enqueue pop equals dequeue	4.5
What is the stack operation corresponding to the enqueue operation in queues	push	enqueue corresponds with push dequeue corresponds with pop	4.5
What is the stack operation corresponding to the enqueue operation in queues	push	FIFO : First in First out	1.5
What is the stack operation corresponding to the enqueue operation in queues	Push	Push	5
What is the stack operation corresponding to the enqueue operation in queues	Push	push which inserts something at the top of the stack	5
What is the stack operation corresponding to the enqueue operation in queues	Push	The stack operation corresponding to enqueue in queues is the push operation	5
What is the stack operation corresponding to the enqueue operation in queues	Push	Push in a stack operation corresponds to the enqueue operation in queues These operations insert a new item into one end - LRB - the top and back respectively - RRB - of the ADT	5
What is the stack operation corresponding to the enqueue operation in queues	Push	The stack operation is almost the opposite of the enqueue operation	2.5
What is the stack operation corresponding to the enqueue operation in queues	Push	push equals enqueue pop equals dequeue	4.5
What is the stack operation corresponding to the enqueue operation in queues	Push	push	5
What is the stack operation corresponding to the enqueue operation in queues	Push	Not sure what this question means You can use the stack push operation and the enqueue operation to detect palindromes	5
What is the stack operation corresponding to the enqueue operation in queues	Push	Enqueue is the queue equivalent of push and dequeue is the queue equivalent to pop	5
What is the stack operation corresponding to the enqueue operation in queues	Push	Push operation	5
What is the stack operation corresponding to the enqueue operation in queues	Push	push	5
What is the stack operation corresponding to the enqueue operation in queues	Push	push	5
What is the stack operation corresponding to the enqueue operation in queues	Push	push	5
What is the stack operation corresponding to the enqueue operation in queues	Push	push	5
What is the stack operation corresponding to the enqueue operation in queues	Push	that would be the push operation if it put the item at the end of the list	5
What is the stack operation corresponding to the enqueue operation in queues	Push	push	5
What is the stack operation corresponding to the enqueue operation in queues	Push	push	5
What is the stack operation corresponding to the enqueue operation in queues	Push	the Push method in the stack operations	5
What is the stack operation corresponding to the enqueue operation in queues	Push	push	5
What is the stack operation corresponding to the enqueue operation in queues	Push	enqueue corresponds with push dequeue corresponds with pop	4.5
What is the stack operation corresponding to the enqueue operation in queues	Push	Push corresponds with enqueue both very similarly place new elements into their stack or queue	5
What is the stack operation corresponding to the enqueue operation in queues	Push	FIFO : First in First out	1.5
What is the stack operation corresponding to the enqueue operation in queues	Push	push	5
What is the stack operation corresponding to the enqueue operation in queues	Push	Push	5
What is the stack operation corresponding to the enqueue operation in queues	Push	push	5
What is the stack operation corresponding to the enqueue operation in queues	Push	push	5
What is the stack operation corresponding to the enqueue operation in queues	Push	push	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	queue	A stack some printing jobs might have a higher priority than others and they can be easily inserted at the front of the list or anywhere between	1.5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	A stack some printing jobs might have a higher priority than others and they can be easily inserted at the front of the list or anywhere between	1.5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	a queue otherwise some things would never be printed	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	A queue is more appropriate for scheduling printing jobs because queues have first in first out behavior	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	Queue its better to be FIFO than LIFO - LRB - stack - RRB -	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	Queue of course !	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	Queue the person who wanted to print first should be first served	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	queue because it guarantees that job are executed in the order they come in	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	queue	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	Queues would be preferable to stacks for use as scheduling print jobs because it would print jobs in the order that they were sent to the printer	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	a queue	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	queue	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	a queue	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	Queue are more appropriate as printers are usually first come first serve	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	queue	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	queue because of the first in first out principles and if it was a stack it would be last in last out because it could possibly not let the first item that was added get removed in a timely manner	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	Queue	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	a queue	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	A Queue data structure is more appropriate for scheduling printing jobs at a printer The first job sent to the printer is the first job printed	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	a queue It would not be unfair for the first job to finish last	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	a queue because it takes the job that has waited the longest	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	A queue is more appropriate because the clients which have waited the longest should be the first served	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	Queue	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	a queue	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	Queue	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	i would say that a queue is better because the first thing you try to print should be the first one to come out of the printer - LRB - FIFO - RRB -	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	a queue because you want the jobs to execute in the order that they are received	5
What data structure is more appropriate for scheduling printing jobs at a printer a stack or a queue	a queue otherwise some things would never be printed	queue	5
